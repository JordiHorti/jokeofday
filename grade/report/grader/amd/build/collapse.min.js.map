{"version":3,"file":"collapse.min.js","sources":["../src/collapse.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Allow the user to show and hide columns of the report at will.\n *\n * @module    gradereport_grader/collapse\n * @copyright 2023 Mathew May <mathew.solutions>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport * as Repository from 'gradereport_grader/collapse/repository';\nimport search_combobox from 'core/comboboxsearch/search_combobox';\nimport {renderForPromise, replaceNodeContents, replaceNode} from 'core/templates';\nimport {debounce} from 'core/utils';\nimport $ from 'jquery';\nimport {getStrings} from 'core/str';\nimport CustomEvents from \"core/custom_interaction_events\";\nimport storage from 'core/localstorage';\nimport {addIconToContainer} from 'core/loadingicon';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\n\n// Contain our selectors within this file until they could be of use elsewhere.\nconst selectors = {\n    component: '.collapse-columns',\n    formDropdown: '.columnsdropdownform',\n    formItems: {\n        cancel: 'cancel',\n        save: 'save',\n        checked: 'input[type=\"checkbox\"]:checked',\n        currentlyUnchecked: 'input[type=\"checkbox\"]:not([data-action=\"selectall\"])',\n    },\n    hider: 'hide',\n    expand: 'expand',\n    colVal: '[data-col]',\n    itemVal: '[data-itemid]',\n    content: '[data-collapse=\"content\"]',\n    sort: '[data-collapse=\"sort\"]',\n    expandbutton: '[data-collapse=\"expandbutton\"]',\n    rangerowcell: '[data-collapse=\"rangerowcell\"]',\n    avgrowcell: '[data-collapse=\"avgrowcell\"]',\n    menu: '[data-collapse=\"menu\"]',\n    icons: '.data-collapse_gradeicons',\n    count: '[data-collapse=\"count\"]',\n    placeholder: '.collapsecolumndropdown [data-region=\"placeholder\"]',\n    fullDropdown: '.collapsecolumndropdown',\n    searchResultContainer: '.searchresultitemscontainer',\n    cellMenuButton: '.cellmenubtn',\n};\n\nconst countIndicator = document.querySelector(selectors.count);\n\nexport default class ColumnSearch extends search_combobox {\n\n    userID = -1;\n    courseID = null;\n    defaultSort = '';\n\n    nodes = [];\n\n    gradeStrings = null;\n    userStrings = null;\n    stringMap = [];\n\n    static init(userID, courseID, defaultSort) {\n        return new ColumnSearch(userID, courseID, defaultSort);\n    }\n\n    constructor(userID, courseID, defaultSort) {\n        super();\n        this.userID = userID;\n        this.courseID = courseID;\n        this.defaultSort = defaultSort;\n        this.component = document.querySelector(selectors.component);\n\n        const pendingPromise = new Pending();\n        // Display a loader whilst collapsing appropriate columns (based on the locally stored state for the current user).\n        addIconToContainer(document.querySelector('.gradeparent')).then((loader) => {\n            setTimeout(() => {\n                // Get the users' checked columns to change.\n                this.getDataset().forEach((item) => {\n                    this.nodesUpdate(item);\n                });\n                this.renderDefault();\n\n                // Once the grade categories have been re-collapsed, remove the loader and display the Gradebook setup content.\n                loader.remove();\n                document.querySelector('.gradereport-grader-table').classList.remove('d-none');\n            }, 10);\n        }).then(() => pendingPromise.resolve()).catch(Notification.exception);\n\n        this.$component.on('hide.bs.dropdown', () => {\n            const searchResultContainer = this.component.querySelector(selectors.searchResultContainer);\n            searchResultContainer.scrollTop = 0;\n\n            // Use setTimeout to make sure the following code is executed after the click event is handled.\n            setTimeout(() => {\n                if (this.searchInput.value !== '') {\n                    this.searchInput.value = '';\n                    this.searchInput.dispatchEvent(new Event('input', {bubbles: true}));\n                }\n            });\n        });\n    }\n\n    /**\n     * The overall div that contains the searching widget.\n     *\n     * @returns {string}\n     */\n    componentSelector() {\n        return '.collapse-columns';\n    }\n\n    /**\n     * The dropdown div that contains the searching widget result space.\n     *\n     * @returns {string}\n     */\n    dropdownSelector() {\n        return '.searchresultitemscontainer';\n    }\n\n    /**\n     * Return the dataset that we will be searching upon.\n     *\n     * @returns {Array}\n     */\n    getDataset() {\n        if (!this.dataset) {\n            const cols = this.fetchDataset();\n            this.dataset = JSON.parse(cols) ? JSON.parse(cols).split(',') : [];\n        }\n        this.datasetSize = this.dataset.length;\n        return this.dataset;\n    }\n\n    /**\n     * Get the data we will be searching against in this component.\n     *\n     * @returns {string}\n     */\n    fetchDataset() {\n        return storage.get(`gradereport_grader_collapseditems_${this.courseID}_${this.userID}`);\n    }\n\n    /**\n     * Given a user performs an action, update the users' preferences.\n     */\n    setPreferences() {\n        storage.set(`gradereport_grader_collapseditems_${this.courseID}_${this.userID}`,\n            JSON.stringify(this.getDataset().join(','))\n        );\n    }\n\n    /**\n     * Register clickable event listeners.\n     */\n    registerClickHandlers() {\n        // Register click events within the component.\n        this.component.addEventListener('click', this.clickHandler.bind(this));\n\n        document.addEventListener('click', this.docClickHandler.bind(this));\n    }\n\n    /**\n     * The handler for when a user interacts with the component.\n     *\n     * @param {MouseEvent} e The triggering event that we are working with.\n     */\n    clickHandler(e) {\n        super.clickHandler(e);\n        // Prevent BS from closing the dropdown if they click elsewhere within the dropdown besides the form.\n        if (e.target.closest(selectors.fullDropdown)) {\n            e.stopPropagation();\n        }\n    }\n\n    /**\n     * Externally defined click function to improve memory handling.\n     *\n     * @param {MouseEvent} e\n     * @returns {Promise<void>}\n     */\n    async docClickHandler(e) {\n        if (e.target.dataset.hider === selectors.hider) {\n            e.preventDefault();\n            const pendingPromise = new Pending('gradereport_grader/collapse:docClickHandler:hide');\n            const desiredToHide = e.target.closest(selectors.colVal) ?\n                e.target.closest(selectors.colVal)?.dataset.col :\n                e.target.closest(selectors.itemVal)?.dataset.itemid;\n            const idx = this.getDataset().indexOf(desiredToHide);\n            if (idx === -1) {\n                this.getDataset().push(desiredToHide);\n            }\n            await this.prefcountpipe();\n\n            await this.nodesUpdate(desiredToHide);\n            pendingPromise.resolve();\n        }\n\n        if (e.target.closest('button')?.dataset.hider === selectors.expand) {\n            e.preventDefault();\n            const pendingPromise = new Pending('gradereport_grader/collapse:docClickHandler:expand');\n            const desiredToHide = e.target.closest(selectors.colVal) ?\n                e.target.closest(selectors.colVal)?.dataset.col :\n                e.target.closest(selectors.itemVal)?.dataset.itemid;\n            const idx = this.getDataset().indexOf(desiredToHide);\n            this.getDataset().splice(idx, 1);\n\n            await this.prefcountpipe();\n\n            await this.nodesUpdate(e.target.closest(selectors.colVal)?.dataset.col);\n            await this.nodesUpdate(e.target.closest(selectors.colVal)?.dataset.itemid);\n            pendingPromise.resolve();\n        }\n    }\n\n    /**\n     * Handle any keyboard inputs.\n     */\n    registerInputEvents() {\n        // Register & handle the text input.\n        this.searchInput.addEventListener('input', debounce(async() => {\n            if (this.getSearchTerm() === this.searchInput.value && this.searchResultsVisible()) {\n                window.console.warn(`Search term matches input value - skipping`);\n                // Debounce can happen multiple times quickly.\n                return;\n            }\n            this.setSearchTerms(this.searchInput.value);\n            // We can also require a set amount of input before search.\n            if (this.searchInput.value === '') {\n                // Hide the \"clear\" search button in the search bar.\n                this.clearSearchButton.classList.add('d-none');\n            } else {\n                // Display the \"clear\" search button in the search bar.\n                this.clearSearchButton.classList.remove('d-none');\n            }\n            const pendingPromise = new Pending();\n            // User has given something for us to filter against.\n            await this.filterrenderpipe().then(() => {\n                pendingPromise.resolve();\n                return true;\n            });\n        }, 300, {pending: true}));\n    }\n\n    /**\n     * Handle the form submission within the dropdown.\n     */\n    registerFormEvents() {\n        const form = this.component.querySelector(selectors.formDropdown);\n        const events = [\n            'click',\n            CustomEvents.events.activate,\n            CustomEvents.events.keyboardActivate\n        ];\n        CustomEvents.define(document, events);\n\n        const selectall = form.querySelector('[data-action=\"selectall\"]');\n\n        // Register clicks & keyboard form handling.\n        events.forEach((event) => {\n            const submitBtn = form.querySelector(`[data-action=\"${selectors.formItems.save}\"`);\n            form.addEventListener(event, (e) => {\n                // Stop Bootstrap from being clever.\n                e.stopPropagation();\n                const input = e.target.closest('input');\n                if (input) {\n                    // If the user is unchecking an item, we need to uncheck the select all if it's checked.\n                    if (selectall.checked && !input.checked) {\n                        selectall.checked = false;\n                    }\n                    const checkedCount = Array.from(form.querySelectorAll(selectors.formItems.checked)).length;\n                    // Check if any are clicked or not then change disabled.\n                    submitBtn.disabled = checkedCount <= 0;\n                }\n            }, false);\n\n            // Stop Bootstrap from being clever.\n            this.searchInput.addEventListener(event, e => e.stopPropagation());\n            this.clearSearchButton.addEventListener(event, async(e) => {\n                e.stopPropagation();\n                this.searchInput.value = '';\n                this.setSearchTerms(this.searchInput.value);\n                await this.filterrenderpipe();\n            });\n            selectall.addEventListener(event, (e) => {\n                // Stop Bootstrap from being clever.\n                e.stopPropagation();\n                if (!selectall.checked) {\n                    const touncheck = Array.from(form.querySelectorAll(selectors.formItems.checked));\n                    touncheck.forEach(item => {\n                        item.checked = false;\n                    });\n                    submitBtn.disabled = true;\n                } else {\n                    const currentUnchecked = Array.from(form.querySelectorAll(selectors.formItems.currentlyUnchecked));\n                    currentUnchecked.forEach(item => {\n                        item.checked = true;\n                    });\n                    submitBtn.disabled = false;\n                }\n            });\n        });\n\n        form.addEventListener('submit', async(e) => {\n            e.preventDefault();\n            if (e.submitter.dataset.action === selectors.formItems.cancel) {\n                $(this.component).dropdown('toggle');\n                return;\n            }\n            // Get the users' checked columns to change.\n            const checkedItems = [...form.elements].filter(item => item.checked);\n            checkedItems.forEach((item) => {\n                const idx = this.getDataset().indexOf(item.dataset.collapse);\n                this.getDataset().splice(idx, 1);\n                this.nodesUpdate(item.dataset.collapse);\n            });\n            // Reset the check all & submit to false just in case.\n            selectall.checked = false;\n            e.submitter.disabled = true;\n            await this.prefcountpipe();\n        });\n    }\n\n    async nodesUpdate(item) {\n        const colNodesToHide = [...document.querySelectorAll(`[data-col=\"${item}\"]`)];\n        const itemIDNodesToHide = [...document.querySelectorAll(`[data-itemid=\"${item}\"]`)];\n        const elements = [...colNodesToHide, ...itemIDNodesToHide];\n        if (elements && elements.length) {\n            const pendingPromise = new Pending('gradereport_grader/collapse:nodesUpdate:' + item);\n            this.updateDisplay(elements).then(() => pendingPromise.resolve()).catch(Notification.exception);\n        }\n    }\n\n    /**\n     * Update the user preferences, count display then render the results.\n     *\n     * @returns {Promise<void>}\n     */\n    async prefcountpipe() {\n        this.setPreferences();\n        this.countUpdate();\n        await this.filterrenderpipe();\n    }\n\n    /**\n     * Dictate to the search component how and what we want to match upon.\n     *\n     * @param {Array} filterableData\n     * @returns {Array} An array of objects containing the system reference and the user readable value.\n     */\n    async filterDataset(filterableData) {\n        const stringUserMap = await this.fetchRequiredUserStrings();\n        const stringGradeMap = await this.fetchRequiredGradeStrings();\n        // Custom user profile fields are not in our string map and need a bit of extra love.\n        const customFieldMap = this.fetchCustomFieldValues();\n        this.stringMap = new Map([...stringGradeMap, ...stringUserMap, ...customFieldMap]);\n\n        const searching = filterableData.map(s => {\n            const mapObj = this.stringMap.get(s);\n            if (mapObj === undefined) {\n                return {key: s, string: s};\n            }\n            return {\n                key: s,\n                string: mapObj.itemname ?? this.stringMap.get(s),\n                category: mapObj.category ?? '',\n            };\n        });\n        // Sometimes we just want to show everything.\n        if (this.getPreppedSearchTerm() === '') {\n            return searching;\n        }\n        // Other times we want to actually filter the content.\n        return searching.filter((col) => {\n            return col.string.toString().toLowerCase().includes(this.getPreppedSearchTerm());\n        });\n    }\n\n    /**\n     * Given we have a subset of the dataset, set the field that we matched upon to inform the end user.\n     */\n    filterMatchDataset() {\n        this.setMatchedResults(\n            this.getMatchedResults().map((column) => {\n                return {\n                    name: column.key,\n                    displayName: column.string ?? column.key,\n                    category: column.category ?? '',\n                };\n            })\n        );\n    }\n\n    /**\n     * With an array of nodes, switch their classes and values.\n     *\n     * @param {Array} elements The elements to update.\n     */\n    async updateDisplay(elements) {\n        const promises = [];\n        elements.forEach((element) => {\n            promises.push(this.updateDisplayForElement(element));\n        });\n\n        await Promise.all(promises);\n    }\n\n    /**\n     * Update display for given element, switch its classes and values.\n     *\n     * @param {HTMLElement} element The element to update.\n     */\n    async updateDisplayForElement(element) {\n        const content = element.querySelector(selectors.content);\n        const sort = element.querySelector(selectors.sort);\n        const expandButton = element.querySelector(selectors.expandbutton);\n        const rangeRowCell = element.querySelector(selectors.rangerowcell);\n        const avgRowCell = element.querySelector(selectors.avgrowcell);\n        const cellMenuButton = element.querySelector(selectors.cellMenuButton);\n        const nodeSet = [\n            element.querySelector(selectors.menu),\n            element.querySelector(selectors.icons),\n            content\n        ];\n\n        // This can be further improved to reduce redundant similar calls.\n        if (element.classList.contains('cell')) {\n            // The column is actively being sorted, lets reset that and reload the page.\n            if (sort !== null) {\n                window.location = this.defaultSort;\n            }\n            if (content === null) {\n                // If it's not a content cell, it must be an overall average or a range cell.\n                const rowCell = avgRowCell ?? rangeRowCell;\n\n                rowCell?.classList.toggle('d-none');\n            } else if (content.classList.contains('d-none')) {\n                // We should always have content but some cells do not contain menus or other actions.\n                element.classList.remove('collapsed');\n                // If there are many nodes, apply the following.\n                if (content.childNodes.length > 1) {\n                    content.classList.add('d-flex');\n                }\n                nodeSet.forEach(node => {\n                    node?.classList.remove('d-none');\n                });\n                expandButton?.classList.add('d-none');\n                cellMenuButton?.focus();\n            } else {\n                element.classList.add('collapsed');\n                content.classList.remove('d-flex');\n                nodeSet.forEach(node => {\n                    node?.classList.add('d-none');\n                });\n                expandButton?.classList.remove('d-none');\n            }\n        }\n    }\n\n    /**\n     * Update the visual count of collapsed columns or hide the count all together.\n     */\n    countUpdate() {\n        countIndicator.textContent = this.getDatasetSize();\n        if (this.getDatasetSize() > 0) {\n            this.component.parentElement.classList.add('d-flex');\n            this.component.parentElement.classList.remove('d-none');\n        } else {\n            this.component.parentElement.classList.remove('d-flex');\n            this.component.parentElement.classList.add('d-none');\n        }\n    }\n\n    /**\n     * Build the content then replace the node by default we want our form to exist.\n     */\n    async renderDefault() {\n        this.setMatchedResults(await this.filterDataset(this.getDataset()));\n        this.filterMatchDataset();\n\n        // Update the collapsed button pill.\n        this.countUpdate();\n        const {html, js} = await renderForPromise('gradereport_grader/collapse/collapsebody', {\n            'instance': this.instance,\n            'results': this.getMatchedResults(),\n            'userid': this.userID,\n        });\n        replaceNode(selectors.placeholder, html, js);\n        this.updateNodes();\n\n        // Given we now have the body, we can set up more triggers.\n        this.registerFormEvents();\n        this.registerInputEvents();\n\n        // Add a small BS listener so that we can set the focus correctly on open.\n        this.$component.on('shown.bs.dropdown', () => {\n            this.searchInput.focus({preventScroll: true});\n            this.selectallEnable();\n        });\n    }\n\n    /**\n     * Build the content then replace the node.\n     */\n    async renderDropdown() {\n        const {html, js} = await renderForPromise('gradereport_grader/collapse/collapseresults', {\n            instance: this.instance,\n            'results': this.getMatchedResults(),\n            'searchTerm': this.getSearchTerm(),\n        });\n        replaceNodeContents(this.getHTMLElements().searchDropdown, html, js);\n        this.selectallEnable();\n        // Reset the expand button to be disabled as we have re-rendered the dropdown.\n        const form = this.component.querySelector(selectors.formDropdown);\n        const expandButton = form.querySelector(`[data-action=\"${selectors.formItems.save}\"`);\n        expandButton.disabled = true;\n    }\n\n    /**\n     * Given we render the dropdown, Determine if we want to enable the select all checkbox.\n     */\n    selectallEnable() {\n        const form = this.component.querySelector(selectors.formDropdown);\n        const selectall = form.querySelector('[data-action=\"selectall\"]');\n        selectall.disabled = this.getMatchedResults().length === 0;\n    }\n\n    /**\n     * If we have any custom user profile fields, grab their system & readable names to add to our string map.\n     *\n     * @returns {array<string,*>} An array of associated string arrays ready for our map.\n     */\n    fetchCustomFieldValues() {\n        const customFields = document.querySelectorAll('[data-collapse-name]');\n        // Cast from NodeList to array to grab all the values.\n        return [...customFields].map(field => [field.parentElement.dataset.col, field.dataset.collapseName]);\n    }\n\n    /**\n     * Given the set of profile fields we can possibly search, fetch their strings,\n     * so we can report to screen readers the field that matched.\n     *\n     * @returns {Promise<void>}\n     */\n    fetchRequiredUserStrings() {\n        if (!this.userStrings) {\n            const requiredStrings = [\n                'username',\n                'firstname',\n                'lastname',\n                'email',\n                'city',\n                'country',\n                'department',\n                'institution',\n                'idnumber',\n                'phone1',\n                'phone2',\n            ];\n            this.userStrings = getStrings(requiredStrings.map((key) => ({key})))\n                .then((stringArray) => new Map(\n                    requiredStrings.map((key, index) => ([key, stringArray[index]]))\n                ));\n        }\n        return this.userStrings;\n    }\n\n    /**\n     * Given the set of gradable items we can possibly search, fetch their strings,\n     * so we can report to screen readers the field that matched.\n     *\n     * @returns {Promise<void>}\n     */\n    fetchRequiredGradeStrings() {\n        if (!this.gradeStrings) {\n            this.gradeStrings = Repository.gradeItems(this.courseID)\n                .then((result) => new Map(\n                    result.gradeItems.map(key => ([key.id, key]))\n                ));\n        }\n        return this.gradeStrings;\n    }\n}\n"],"names":["_interopRequireDefault","e","__esModule","default","_getRequireWildcardCache","WeakMap","r","t","Repository","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_interopRequireWildcard","_search_combobox","_jquery","_custom_interaction_events","_localstorage","_notification","_pending","selectors","cancel","save","checked","currentlyUnchecked","countIndicator","document","querySelector","ColumnSearch","search_combobox","userID","courseID","defaultSort","nodes","gradeStrings","userStrings","stringMap","init","constructor","super","this","component","pendingPromise","Pending","addIconToContainer","then","loader","setTimeout","getDataset","forEach","item","nodesUpdate","renderDefault","remove","classList","resolve","catch","Notification","exception","$component","on","scrollTop","searchInput","value","dispatchEvent","Event","bubbles","componentSelector","dropdownSelector","dataset","cols","fetchDataset","JSON","parse","split","datasetSize","length","storage","setPreferences","stringify","join","registerClickHandlers","addEventListener","clickHandler","bind","docClickHandler","target","closest","stopPropagation","_e$target$closest3","hider","_e$target$closest","_e$target$closest2","preventDefault","desiredToHide","col","itemid","indexOf","push","prefcountpipe","_e$target$closest4","_e$target$closest5","_e$target$closest6","_e$target$closest7","idx","splice","registerInputEvents","debounce","async","getSearchTerm","searchResultsVisible","window","console","warn","setSearchTerms","clearSearchButton","add","filterrenderpipe","pending","registerFormEvents","form","events","CustomEvents","activate","keyboardActivate","define","selectall","event","submitBtn","input","checkedCount","Array","from","querySelectorAll","disabled","submitter","action","$","dropdown","elements","filter","collapse","updateDisplay","countUpdate","filterDataset","filterableData","stringUserMap","fetchRequiredUserStrings","stringGradeMap","fetchRequiredGradeStrings","customFieldMap","fetchCustomFieldValues","Map","searching","map","s","mapObj","undefined","key","string","itemname","category","getPreppedSearchTerm","toString","toLowerCase","includes","filterMatchDataset","setMatchedResults","getMatchedResults","column","name","displayName","promises","element","updateDisplayForElement","Promise","all","content","sort","expandButton","rangeRowCell","avgRowCell","cellMenuButton","nodeSet","contains","location","rowCell","toggle","childNodes","node","focus","textContent","getDatasetSize","parentElement","html","js","renderForPromise","instance","results","userid","replaceNode","updateNodes","preventScroll","selectallEnable","renderDropdown","searchTerm","replaceNodeContents","getHTMLElements","searchDropdown","field","collapseName","requiredStrings","getStrings","stringArray","index","gradeItems","result","id","_exports"],"mappings":"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"}