{"version":3,"file":"policy.min.js","sources":["../src/policy.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport {getPolicyStatus, setPolicyStatus} from \"./repository\";\n\n/**\n * The Javascript module to handle the policy acceptance.\n *\n * @module     core_ai/policy\n * @copyright  2024 Andrew Lyons <andrew@nicols.co.uk>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nexport default class {\n    static #policyAcceptedFor = {};\n\n    static preconfigurePolicyState(userid, state) {\n        if (!this.#policyAcceptedFor.hasOwnProperty(userid)) {\n            this.#policyAcceptedFor[userid] = state;\n        }\n    }\n\n    /**\n     * Get the policy status for a user.\n     *\n     * @param {Number} userid The user ID.\n     * @return {Promise<Object>} The policy status.\n     */\n    static async getPolicyStatus(userid) {\n        if (this.#policyAcceptedFor[userid]) {\n            return this.#policyAcceptedFor[userid];\n        }\n\n        const accepted = await getPolicyStatus(userid);\n\n        this.#policyAcceptedFor[userid] = accepted.status;\n\n        return accepted.status;\n    }\n\n    static acceptPolicy() {\n        this.#policyAcceptedFor[M.cfg.userId] = true;\n\n        return setPolicyStatus(M.cfg.contextid);\n    }\n}\n"],"names":["_exports","default","static","preconfigurePolicyState","userid","state","this","policyAcceptedFor","hasOwnProperty","getPolicyStatus","accepted","status","acceptPolicy","M","cfg","userId","setPolicyStatus","contextid"],"mappings":"mKAwDC,OAAAA,SAAAC;;;;;;;;AAhCc,MACXC,yBAA4B,CAAA,EAE5B,8BAAOC,CAAwBC,OAAQC,OAC9BC,MAAKC,kBAAmBC,eAAeJ,UACxCE,MAAKC,kBAAmBH,QAAUC,MAE1C,CAQA,4BAAaI,CAAgBL,QACzB,GAAIE,MAAKC,kBAAmBH,QACxB,OAAOE,MAAKC,kBAAmBH,QAGnC,MAAMM,eAAiB,EAAAD,YAAeA,iBAACL,QAIvC,OAFAE,MAAKC,kBAAmBH,QAAUM,SAASC,OAEpCD,SAASC,MACpB,CAEA,mBAAOC,GAGH,OAFAN,MAAKC,kBAAmBM,EAAEC,IAAIC,SAAU,GAEjC,EAAAC,6BAAgBH,EAAEC,IAAIG,UACjC,GACHjB,SAAAC,OAAA"}