{"version":3,"file":"edit_multiple_grades.min.js","sources":["../src/edit_multiple_grades.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JavaScript for managing multiple grade items for a quiz.\n *\n * @module     mod_quiz/edit_multiple_grades\n * @copyright  2023 The Open University\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {call as fetchMany} from 'core/ajax';\nimport MoodleConfig from 'core/config';\nimport {addIconToContainer} from 'core/loadingicon';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport {get_string as getString} from 'core/str';\nimport {render as renderTemplate} from 'core/templates';\nimport {replaceNode} from 'core/templates';\n\n/**\n * @type {Object} selectors used in this code.\n */\nconst SELECTORS = {\n    'addGradeItemButton': '#mod_quiz-add_grade_item',\n    'autoSetupButton': '#mod_quiz-grades_auto_setup',\n    'editingPageContents': '#edit_grading_page-contents',\n    'gradeItemList': 'table#mod_quiz-grade-item-list',\n    'gradeItemSelect': 'select[data-slot-id]',\n    'gradeItemSelectId': (id) => 'select#grade-item-choice-' + id,\n    'gradeItemTr': 'table#mod_quiz-grade-item-list tr[data-quiz-grade-item-id]',\n    'inplaceEditable': 'span.inplaceeditable',\n    'inplaceEditableOn': 'span.inplaceeditable.inplaceeditingon',\n    'resetAllButton': '#mod_quiz-grades_reset_all',\n    'slotList': 'table#mod_quiz-slot-list',\n    'updateGradeItemLink': (id) => 'tr[data-quiz-grade-item-id=\"' + id + '\"] .quickeditlink',\n};\n\n/**\n * Call the Ajax service to create a quiz grade item.\n *\n * @param {Number} quizId id of the quiz to update.\n * @returns {Promise<Object>} a promise that resolves to the template context required to re-render the page.\n */\nconst createGradeItem = (\n    quizId,\n) => callServiceAndReturnRenderingData({\n    methodname: 'mod_quiz_create_grade_items',\n    args: {\n        quizid: quizId,\n        quizgradeitems: [{name: ''}],\n    }\n});\n\n/**\n * Call the Ajax service to update a quiz grade item.\n *\n * @param {Number} quizId id of the quiz to update.\n * @param {Number} gradeItemId id of the grade item to update.\n * @param {String} newName the new name to set.\n * @return {Promise} Promise that resolves to the context required to re-render the page.\n */\nconst updateGradeItem = (\n    quizId,\n    gradeItemId,\n    newName\n) => callServiceAndReturnRenderingData({\n    methodname: 'mod_quiz_update_grade_items',\n    args: {\n        quizid: quizId,\n        quizgradeitems: [{id: gradeItemId, name: newName}],\n    }\n});\n\n/**\n * Call the Ajax service to delete a quiz grade item.\n *\n * @param {Number} quizId id of the quiz to update.\n * @param {Number} gradeItemId id of the grade item to delete.\n * @return {Promise} Promise that resolves to the context required to re-render the page.\n */\nconst deleteGradeItem = (\n    quizId,\n    gradeItemId\n) => callServiceAndReturnRenderingData({\n    methodname: 'mod_quiz_delete_grade_items',\n    args: {\n        quizid: quizId,\n        quizgradeitems: [{id: gradeItemId}],\n    }\n});\n\n/**\n * Call the Ajax service to update the quiz grade item used by a slot.\n *\n * @param {Number} quizId id of the quiz to update.\n * @param {Number} slotId id of the slot to update.\n * @param {Number|null} gradeItemId new grade item ot set, or null to un-set.\n * @return {Promise} Promise that resolves to the context required to re-render the page.\n */\nconst updateSlotGradeItem = (\n    quizId,\n    slotId,\n    gradeItemId\n) => callServiceAndReturnRenderingData({\n    methodname: 'mod_quiz_update_slots',\n    args: {\n        quizid: quizId,\n        slots: [{id: slotId, quizgradeitemid: gradeItemId}],\n    }\n});\n\n/**\n * Call the Ajax service to setup one grade item for each quiz section.\n *\n * @param {Number} quizId id of the quiz to update.\n * @return {Promise} Promise that resolves to the context required to re-render the page.\n */\nconst autoSetupGradeItems = (\n    quizId\n) => callServiceAndReturnRenderingData({\n    methodname: 'mod_quiz_create_grade_item_per_section',\n    args: {\n        quizid: quizId\n    }\n});\n\n/**\n * Make a web service call, and also call mod_quiz_get_edit_grading_page_data to get the date to re-render the page.\n *\n * @param {Object} methodCall a web service call to pass to fetchMany. Must include methodCall.args.quizid.\n * @returns {Promise<Object>} a promise that resolves to the template context required to re-render the page.\n */\nconst callServiceAndReturnRenderingData = (methodCall) => callServicesAndReturnRenderingData([methodCall]);\n\n/**\n * Make a web service call, and also call mod_quiz_get_edit_grading_page_data to get the date to re-render the page.\n *\n * @param {Object[]} methodCalls web service calls to pass to fetchMany. Must include methodCalls[0].args.quizid.\n * @returns {Promise<Object>} a promise that resolves to the template context required to re-render the page.\n */\nconst callServicesAndReturnRenderingData = (methodCalls) => {\n    methodCalls.push({\n            methodname: 'mod_quiz_get_edit_grading_page_data',\n            args: {\n                quizid: methodCalls[0].args.quizid,\n            }\n        });\n    return Promise.all(fetchMany(methodCalls))\n    .then(results => JSON.parse(results.at(-1)));\n};\n\n/**\n * Handle click events on the delete icon.\n *\n * @param {Event} e click event.\n */\nconst handleGradeItemDelete = (e) => {\n    e.preventDefault();\n    const pending = new Pending('delete-quiz-grade-item');\n\n    const tableCell = e.target.closest('td');\n    addIconToContainer(tableCell, pending);\n\n    const tableRow = tableCell.closest('tr');\n    const quizId = tableRow.closest('table').dataset.quizId;\n    const gradeItemId = tableRow.dataset.quizGradeItemId;\n\n    let nextItemToFocus;\n    if (tableRow.nextElementSibling) {\n        nextItemToFocus = SELECTORS.updateGradeItemLink(tableRow.nextElementSibling.dataset.quizGradeItemId);\n    } else {\n        nextItemToFocus = SELECTORS.addGradeItemButton;\n    }\n\n    deleteGradeItem(quizId, gradeItemId)\n        .then(reRenderPage)\n        .then(() => {\n            pending.resolve();\n            document.querySelector(nextItemToFocus).focus();\n        })\n        .catch(Notification.exception);\n};\n\n/**\n *\n * @param {HTMLElement} editableSpan the editable to turn off.\n */\nconst stopEditingGadeItem = (editableSpan) => {\n    editableSpan.innerHTML = editableSpan.dataset.oldContent;\n    delete editableSpan.dataset.oldContent;\n\n    editableSpan.classList.remove('inplaceeditingon');\n    editableSpan.querySelector('[data-action-edit]').focus();\n};\n\n/**\n * Handle click events on the start rename icon.\n *\n * @param {Event} e click event.\n */\nconst handleGradeItemEditStart = (e) => {\n    e.preventDefault();\n    const pending = new Pending('edit-quiz-grade-item-start');\n    const editableSpan = e.target.closest(SELECTORS.inplaceEditable);\n\n    document.querySelectorAll(SELECTORS.inplaceEditableOn).forEach(stopEditingGadeItem);\n\n    editableSpan.dataset.oldContent = editableSpan.innerHTML;\n    getString('edittitleinstructions')\n        .then((instructions) => {\n            const uniqueId = 'gi-edit-input-' + editableSpan.closest('tr').dataset.quizGradeItemId;\n            editableSpan.innerHTML = '<span class=\"editinstructions\">' + instructions + '</span>' +\n                    '<label class=\"sr-only\" for=\"' + uniqueId + '\">' + editableSpan.dataset.editLabel + '</label>' +\n                    '<input type=\"text\" id=\"' + uniqueId + '\" value=\"' + editableSpan.dataset.rawName +\n                            '\" class=\"ignoredirty form-control w-100\">';\n\n            const inputElement = editableSpan.querySelector('input');\n            inputElement.focus();\n            inputElement.select();\n            editableSpan.classList.add('inplaceeditingon');\n            pending.resolve();\n            return null;\n        })\n        .catch(Notification.exception);\n};\n\n/**\n * Handle key down in the editable.\n *\n * @param {Event} e key event.\n */\nconst handleGradeItemKeyDown = (e) => {\n    if (e.keyCode !== 13) {\n        return;\n    }\n\n    const editableSpan = e.target.closest(SELECTORS.inplaceEditableOn);\n\n    // Check this click is on a relevant element.\n    if (!editableSpan || !editableSpan.closest(SELECTORS.gradeItemList)) {\n        return;\n    }\n\n    e.preventDefault();\n    const pending = new Pending('edit-quiz-grade-item-save');\n\n    const newName = editableSpan.querySelector('input').value;\n    const tableCell = e.target.closest('th');\n    addIconToContainer(tableCell);\n\n    const tableRow = tableCell.closest('tr');\n    const quizId = tableRow.closest('table').dataset.quizId;\n    const gradeItemId = tableRow.dataset.quizGradeItemId;\n\n    updateGradeItem(quizId, gradeItemId, newName)\n        .then(reRenderPage)\n        .then(() => {\n            pending.resolve();\n            document.querySelector(SELECTORS.updateGradeItemLink(gradeItemId)).focus({'focusVisible': true});\n        })\n        .catch(Notification.exception);\n};\n\n/**\n * Replace the contents of the page with the page re-rendered from the provided data, once that promise resolves.\n *\n * @param {Object} editGradingPageData the template context data required to re-render the page.\n * @returns {Promise<void>} a promise that will resolve when the page is updated.\n */\nconst reRenderPage = (editGradingPageData) =>\n    renderTemplate('mod_quiz/edit_grading_page', editGradingPageData)\n        .then((html, js) => replaceNode(document.querySelector(SELECTORS.editingPageContents), html, js || ''));\n\n/**\n * Handle key up in the editable.\n *\n * @param {Event} e key event.\n */\nconst handleGradeItemKeyUp = (e) => {\n    if (e.keyCode !== 27) {\n        return;\n    }\n\n    const editableSpan = e.target.closest(SELECTORS.inplaceEditableOn);\n\n    // Check this click is on a relevant element.\n    if (!editableSpan || !editableSpan.closest(SELECTORS.gradeItemList)) {\n        return;\n    }\n\n    e.preventDefault();\n    stopEditingGadeItem(editableSpan);\n};\n\n/**\n * Handle focus out of the editable.\n *\n * @param {Event} e event.\n */\nconst handleGradeItemFocusOut = (e) => {\n    if (MoodleConfig.behatsiterunning) {\n        // Behat triggers focusout too often so ignore.\n        return;\n    }\n\n    const editableSpan = e.target.closest(SELECTORS.inplaceEditableOn);\n\n    // Check this click is on a relevant element.\n    if (!editableSpan || !editableSpan.closest(SELECTORS.gradeItemList)) {\n        return;\n    }\n\n    e.preventDefault();\n    stopEditingGadeItem(editableSpan);\n};\n\n/**\n * Handle when the selected grade item for a slot is changed.\n *\n * @param {Event} e event.\n */\nconst handleSlotGradeItemChanged = (e) => {\n    const select = e.target.closest(SELECTORS.gradeItemSelect);\n\n    // Check this click is on a relevant element.\n    if (!select || !select.closest(SELECTORS.slotList)) {\n        return;\n    }\n\n    e.preventDefault();\n    const pending = new Pending('edit-slot-grade-item-updated');\n\n    const slotId = select.dataset.slotId;\n    const newGradeItemId = select.value ? select.value : null;\n    const tableCell = e.target.closest('td');\n    addIconToContainer(tableCell, pending);\n\n    const quizId = tableCell.closest('table').dataset.quizId;\n\n    updateSlotGradeItem(quizId, slotId, newGradeItemId)\n        .then(reRenderPage)\n        .then(() => {\n            pending.resolve();\n            document.querySelector(SELECTORS.gradeItemSelectId(slotId)).focus();\n        })\n        .catch(Notification.exception);\n};\n\n/**\n * Handle clicks in the table the shows the grade items.\n *\n * @param {Event} e click event.\n */\nconst handleGradeItemClick = (e) => {\n    const link = e.target.closest('a');\n\n    // Check this click is on a relevant element.\n    if (!link || !link.closest(SELECTORS.gradeItemList)) {\n        return;\n    }\n\n    if (link.dataset.actionDelete) {\n        handleGradeItemDelete(e);\n    }\n\n    if (link.dataset.actionEdit) {\n        handleGradeItemEditStart(e);\n    }\n};\n\n/**\n * Handle clicks on the buttons.\n *\n * @param {Event} e click event.\n */\n\nconst handleButtonClick = (e) => {\n    if (e.target.closest(SELECTORS.addGradeItemButton)) {\n        handleAddGradeItemClick(e);\n    }\n    if (e.target.closest(SELECTORS.autoSetupButton)) {\n        handleAutoSetup(e);\n    }\n    if (e.target.closest(SELECTORS.resetAllButton)) {\n        handleResetAllClick(e);\n    }\n};\n\n/**\n * Handle clicks on the 'Add grade item' button.\n *\n * @param {Event} e click event.\n */\nconst handleAddGradeItemClick = (e) => {\n    e.preventDefault();\n    const pending = new Pending('create-quiz-grade-item');\n    addIconToContainer(e.target.parentNode, pending);\n\n    const quizId = e.target.dataset.quizId;\n\n    createGradeItem(quizId)\n        .then(reRenderPage)\n        .then(() => {\n            pending.resolve();\n            document.querySelector(SELECTORS.addGradeItemButton).focus();\n        })\n        .catch(Notification.exception);\n};\n\n/**\n * Handle clicks on the reset button - show a confirmation.\n *\n * @param {Event} e click event.\n */\nconst handleAutoSetup = (e) => {\n    e.preventDefault();\n    const pending = new Pending('setup-quiz-grade-items');\n\n    const quizId = e.target.dataset.quizId;\n\n    autoSetupGradeItems(quizId)\n        .then(reRenderPage)\n        .then(() => {\n            pending.resolve();\n            document.querySelector(SELECTORS.resetAllButton).focus();\n        })\n        .catch(Notification.exception);\n};\n\n/**\n * Handle clicks on the reset button - show a confirmation.\n *\n * @param {Event} e click event.\n */\nconst handleResetAllClick = (e) => {\n    e.preventDefault();\n    const button = e.target;\n\n    Notification.deleteCancelPromise(\n        getString('gradeitemsremoveallconfirm', 'quiz'),\n        getString('gradeitemsremoveallmessage', 'quiz'),\n        getString('reset'),\n        button\n    ).then(() => reallyResetAll(button))\n    .catch(() => button.focus());\n};\n\n/**\n * Really reset all if the confirmation is OKed.\n *\n * @param {HTMLElement} button the reset button.\n */\nconst reallyResetAll = (button) => {\n    const pending = new Pending('reset-quiz-grading');\n    addIconToContainer(button.parentNode, pending);\n\n    const quizId = button.dataset.quizId;\n\n    let methodCalls = [];\n\n    // Call to clear any assignments of grade items to slots (if required).\n    const slotResets = [...document.querySelectorAll(SELECTORS.gradeItemSelect)].map(\n            (select) => ({\n                id: select.dataset.slotId,\n                quizgradeitemid: 0,\n            }));\n    if (slotResets.length) {\n        methodCalls.push({\n            methodname: 'mod_quiz_update_slots',\n            args: {\n                quizid: quizId,\n                slots: slotResets\n            }\n        });\n    }\n\n    // Request to delete all the grade items.\n    methodCalls.push({\n        methodname: 'mod_quiz_delete_grade_items',\n        args: {\n            quizid: quizId,\n            quizgradeitems: [...document.querySelectorAll(SELECTORS.gradeItemTr)].map((tr) => {\n                return {id: tr.dataset.quizGradeItemId};\n            })\n        }\n    });\n\n    callServicesAndReturnRenderingData(methodCalls)\n        .then(reRenderPage)\n        .then(() => {\n            pending.resolve();\n            document.querySelector(SELECTORS.addGradeItemButton).focus();\n        })\n        .catch(Notification.exception);\n};\n\n/**\n * Replace the container with a new version.\n */\nconst registerEventListeners = () => {\n    document.body.addEventListener('click', handleGradeItemClick);\n    document.body.addEventListener('keydown', handleGradeItemKeyDown);\n    document.body.addEventListener('keyup', handleGradeItemKeyUp);\n    document.body.addEventListener('focusout', handleGradeItemFocusOut);\n\n    document.body.addEventListener('click', handleButtonClick);\n\n    document.body.addEventListener('change', handleSlotGradeItemChanged);\n};\n\n/**\n * Entry point.\n */\nexport const init = () => {\n    registerEventListeners();\n};\n"],"names":["_interopRequireDefault","e","__esModule","default","_config","_notification","_pending","SELECTORS","id","callServiceAndReturnRenderingData","methodCall","callServicesAndReturnRenderingData","methodCalls","push","methodname","args","quizid","Promise","all","fetchMany","call","then","results","JSON","parse","at","handleGradeItemDelete","preventDefault","pending","Pending","tableCell","target","closest","addIconToContainer","tableRow","quizId","dataset","gradeItemId","quizGradeItemId","nextItemToFocus","nextElementSibling","deleteGradeItem","quizgradeitems","reRenderPage","resolve","document","querySelector","focus","catch","Notification","exception","stopEditingGadeItem","editableSpan","innerHTML","oldContent","classList","remove","handleGradeItemKeyDown","keyCode","newName","value","updateGradeItem","name","focusVisible","editGradingPageData","renderTemplate","html","js","replaceNode","handleGradeItemKeyUp","handleGradeItemFocusOut","MoodleConfig","behatsiterunning","handleSlotGradeItemChanged","select","slotId","newGradeItemId","updateSlotGradeItem","slots","quizgradeitemid","handleGradeItemClick","link","actionDelete","actionEdit","querySelectorAll","forEach","getString","instructions","uniqueId","editLabel","rawName","inputElement","add","handleGradeItemEditStart","handleButtonClick","handleAddGradeItemClick","handleAutoSetup","handleResetAllClick","parentNode","createGradeItem","autoSetupGradeItems","button","deleteCancelPromise","get_string","reallyResetAll","slotResets","map","length","tr","_exports","init","body","addEventListener"],"mappings":"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"}