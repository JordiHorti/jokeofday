{"version":3,"file":"grader.min.js","sources":["../../../src/local/grades/grader.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This module will tie together all of the different calls the gradable module will make.\n *\n * @module     mod_forum/local/grades/grader\n * @copyright  2019 Mathew May <mathew.solutions>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport Templates from 'core/templates';\nimport Selectors from './local/grader/selectors';\nimport getUserPicker from './local/grader/user_picker';\nimport {createLayout as createFullScreenWindow} from 'mod_forum/local/layout/fullscreen';\nimport getGradingPanelFunctions from './local/grader/gradingpanel';\nimport {add as addToast} from 'core/toast';\nimport {addNotification} from 'core/notification';\nimport {getString} from 'core/str';\nimport {failedUpdate} from 'core_grades/grades/grader/gradingpanel/normalise';\nimport {addIconToContainerWithPromise} from 'core/loadingicon';\nimport {debounce} from 'core/utils';\nimport {fillInitialValues} from 'core_grades/grades/grader/gradingpanel/comparison';\nimport Modal from 'core/modal_cancel';\nimport {subscribe} from 'core/pubsub';\nimport DrawerEvents from 'core/drawer_events';\n\nconst templateNames = {\n    grader: {\n        app: 'mod_forum/local/grades/grader',\n        gradingPanel: {\n            error: 'mod_forum/local/grades/local/grader/gradingpanel/error',\n        },\n        searchResults: 'mod_forum/local/grades/local/grader/user_picker/user_search',\n        status: 'mod_forum/local/grades/local/grader/status',\n    },\n};\n\n/**\n * Helper function that replaces the user picker placeholder with what we get back from the user picker class.\n *\n * @param {HTMLElement} root\n * @param {String} html\n */\nconst displayUserPicker = (root, html) => {\n    const pickerRegion = root.querySelector(Selectors.regions.pickerRegion);\n    Templates.replaceNodeContents(pickerRegion, html, '');\n};\n\n/**\n * To be removed, this is now done as a part of Templates.renderForPromise()\n *\n * @param {String} html\n * @param {String} js\n * @returns {array} An array containing the HTML, and JS.\n */\nconst fetchContentFromRender = (html, js) => {\n    return [html, js];\n};\n\n/**\n * Here we build the function that is passed to the user picker that'll handle updating the user content area\n * of the grading interface.\n *\n * @param {HTMLElement} root\n * @param {Function} getContentForUser\n * @param {Function} getGradeForUser\n * @param {Function} saveGradeForUser\n * @return {Function}\n */\nconst getUpdateUserContentFunction = (root, getContentForUser, getGradeForUser, saveGradeForUser) => {\n    let firstLoad = true;\n\n    return async(user) => {\n        const spinner = firstLoad ? null : addIconToContainerWithPromise(root);\n        const [\n            [html, js],\n            userGrade,\n        ] = await Promise.all([\n            getContentForUser(user.id).then(fetchContentFromRender),\n            getGradeForUser(user.id),\n        ]);\n        Templates.replaceNodeContents(root.querySelector(Selectors.regions.moduleReplace), html, js);\n\n        const [\n            gradingPanelHtml,\n            gradingPanelJS\n        ] = await Templates.render(userGrade.templatename, userGrade.grade).then(fetchContentFromRender);\n        const panelContainer = root.querySelector(Selectors.regions.gradingPanelContainer);\n        const panel = panelContainer.querySelector(Selectors.regions.gradingPanel);\n        Templates.replaceNodeContents(panel, gradingPanelHtml, gradingPanelJS);\n\n        const form = panel.querySelector('form');\n        fillInitialValues(form);\n\n        form.addEventListener('submit', event => {\n            saveGradeForUser(user);\n            event.preventDefault();\n        });\n\n        panelContainer.scrollTop = 0;\n        firstLoad = false;\n\n        if (spinner) {\n            spinner.resolve();\n        }\n        return userGrade;\n    };\n};\n\n/**\n * Show the search results container and hide the user picker and body content.\n *\n * @param {HTMLElement} bodyContainer The container element for the body content\n * @param {HTMLElement} userPickerContainer The container element for the user picker\n * @param {HTMLElement} searchResultsContainer The container element for the search results\n */\nconst showSearchResultContainer = (bodyContainer, userPickerContainer, searchResultsContainer) => {\n    bodyContainer.classList.add('hidden');\n    userPickerContainer.classList.add('hidden');\n    searchResultsContainer.classList.remove('hidden');\n};\n\n/**\n * Hide the search results container and show the user picker and body content.\n *\n * @param {HTMLElement} bodyContainer The container element for the body content\n * @param {HTMLElement} userPickerContainer The container element for the user picker\n * @param {HTMLElement} searchResultsContainer The container element for the search results\n */\nconst hideSearchResultContainer = (bodyContainer, userPickerContainer, searchResultsContainer) => {\n    bodyContainer.classList.remove('hidden');\n    userPickerContainer.classList.remove('hidden');\n    searchResultsContainer.classList.add('hidden');\n};\n\n/**\n * Toggles the visibility of the user search.\n *\n * @param {HTMLElement} toggleSearchButton The button that toggles the search\n * @param {HTMLElement} searchContainer The container element for the user search\n * @param {HTMLElement} searchInput The input element for searching\n */\nconst showUserSearchInput = (toggleSearchButton, searchContainer, searchInput) => {\n    searchContainer.classList.remove('collapsed');\n    toggleSearchButton.setAttribute('aria-expanded', 'true');\n    toggleSearchButton.classList.add('expand');\n    toggleSearchButton.classList.remove('collapse');\n\n    // Hide the grading info container from screen reader.\n    const gradingInfoContainer = searchContainer.parentElement.querySelector(Selectors.regions.gradingInfoContainer);\n    gradingInfoContainer.setAttribute('aria-hidden', 'true');\n\n    // Hide the collapse grading drawer button from screen reader.\n    const collapseGradingDrawer = searchContainer.parentElement.querySelector(Selectors.buttons.collapseGradingDrawer);\n    collapseGradingDrawer.setAttribute('aria-hidden', 'true');\n    collapseGradingDrawer.setAttribute('tabindex', '-1');\n\n    searchInput.focus();\n};\n\n/**\n * Toggles the visibility of the user search.\n *\n * @param {HTMLElement} toggleSearchButton The button that toggles the search\n * @param {HTMLElement} searchContainer The container element for the user search\n * @param {HTMLElement} searchInput The input element for searching\n */\nconst hideUserSearchInput = (toggleSearchButton, searchContainer, searchInput) => {\n    searchContainer.classList.add('collapsed');\n    toggleSearchButton.setAttribute('aria-expanded', 'false');\n    toggleSearchButton.classList.add('collapse');\n    toggleSearchButton.classList.remove('expand');\n    toggleSearchButton.focus();\n\n    // Show the grading info container to screen reader.\n    const gradingInfoContainer = searchContainer.parentElement.querySelector(Selectors.regions.gradingInfoContainer);\n    gradingInfoContainer.removeAttribute('aria-hidden');\n\n    // Show the collapse grading drawer button from screen reader.\n    const collapseGradingDrawer = searchContainer.parentElement.querySelector(Selectors.buttons.collapseGradingDrawer);\n    collapseGradingDrawer.removeAttribute('aria-hidden');\n    collapseGradingDrawer.setAttribute('tabindex', '0');\n\n    searchInput.value = '';\n};\n\n/**\n * Find the list of users who's names include the given search term.\n *\n * @param {Array} userList List of users for the grader\n * @param {String} searchTerm The search term to match\n * @return {Array}\n */\nconst searchForUsers = (userList, searchTerm) => {\n    if (searchTerm === '') {\n        return userList;\n    }\n\n    searchTerm = searchTerm.toLowerCase();\n\n    return userList.filter((user) => {\n        return user.fullname.toLowerCase().includes(searchTerm);\n    });\n};\n\n/**\n * Render the list of users in the search results area.\n *\n * @param {HTMLElement} searchResultsContainer The container element for search results\n * @param {Array} users The list of users to display\n */\nconst renderSearchResults = async(searchResultsContainer, users) => {\n    const {html, js} = await Templates.renderForPromise(templateNames.grader.searchResults, {users});\n    Templates.replaceNodeContents(searchResultsContainer, html, js);\n};\n\n/**\n * Add click handlers to the buttons in the header of the grading interface.\n *\n * @param {HTMLElement} graderLayout\n * @param {Object} userPicker\n * @param {Function} saveGradeFunction\n * @param {Array} userList List of users for the grader.\n */\nconst registerEventListeners = (graderLayout, userPicker, saveGradeFunction, userList) => {\n    const graderContainer = graderLayout.getContainer();\n    const toggleSearchButton = graderContainer.querySelector(Selectors.buttons.toggleSearch);\n    const searchInputContainer = graderContainer.querySelector(Selectors.regions.userSearchContainer);\n    const searchInput = searchInputContainer.querySelector(Selectors.regions.userSearchInput);\n    const bodyContainer = graderContainer.querySelector(Selectors.regions.bodyContainer);\n    const userPickerContainer = graderContainer.querySelector(Selectors.regions.pickerRegion);\n    const searchResultsContainer = graderContainer.querySelector(Selectors.regions.searchResultsContainer);\n\n    graderContainer.addEventListener('click', (e) => {\n        if (e.target.closest(Selectors.buttons.toggleFullscreen)) {\n            e.stopImmediatePropagation();\n            e.preventDefault();\n            graderLayout.toggleFullscreen();\n\n            return;\n        }\n\n        if (e.target.closest(Selectors.buttons.closeGrader)) {\n            e.stopImmediatePropagation();\n            e.preventDefault();\n\n            graderLayout.close();\n\n            return;\n        }\n\n        if (e.target.closest(Selectors.buttons.saveGrade)) {\n            saveGradeFunction(userPicker.currentUser);\n        }\n\n        if (e.target.closest(Selectors.buttons.toggleSearch)) {\n            if (toggleSearchButton.getAttribute('aria-expanded') === 'true') {\n                // Search is open so let's close it.\n                hideUserSearchInput(toggleSearchButton, searchInputContainer, searchInput);\n                hideSearchResultContainer(bodyContainer, userPickerContainer, searchResultsContainer);\n                searchResultsContainer.innerHTML = '';\n            } else {\n                // Search is closed so let's open it.\n                showUserSearchInput(toggleSearchButton, searchInputContainer, searchInput);\n                showSearchResultContainer(bodyContainer, userPickerContainer, searchResultsContainer);\n                renderSearchResults(searchResultsContainer, userList);\n            }\n\n            return;\n        }\n\n        const selectUserButton = e.target.closest(Selectors.buttons.selectUser);\n        if (selectUserButton) {\n            const userId = selectUserButton.getAttribute('data-userid');\n            const user = userList.find(user => user.id == userId);\n            userPicker.setUserId(userId);\n            userPicker.showUser(user);\n            hideUserSearchInput(toggleSearchButton, searchInputContainer, searchInput);\n            hideSearchResultContainer(bodyContainer, userPickerContainer, searchResultsContainer);\n            searchResultsContainer.innerHTML = '';\n        }\n    });\n\n    // Debounce the search input so that it only executes 300 milliseconds after the user has finished typing.\n    searchInput.addEventListener('input', debounce(() => {\n        const users = searchForUsers(userList, searchInput.value);\n        renderSearchResults(searchResultsContainer, users);\n    }, 300));\n\n    // Remove the right margin of the content container when the grading panel is hidden so that it expands to full-width.\n    subscribe(DrawerEvents.DRAWER_HIDDEN, (drawerRoot) => {\n        const gradingPanel = drawerRoot[0];\n        if (gradingPanel.querySelector(Selectors.regions.gradingPanel)) {\n            setContentContainerMargin(graderContainer, 0);\n        }\n    });\n\n    // Bring back the right margin of the content container when the grading panel is shown to give space for the grading panel.\n    subscribe(DrawerEvents.DRAWER_SHOWN, (drawerRoot) => {\n        const gradingPanel = drawerRoot[0];\n        if (gradingPanel.querySelector(Selectors.regions.gradingPanel)) {\n            setContentContainerMargin(graderContainer, gradingPanel.offsetWidth);\n        }\n    });\n};\n\n/**\n * Adjusts the right margin of the content container.\n *\n * @param {HTMLElement} graderContainer The container for the grader app.\n * @param {Number} rightMargin The right margin value.\n */\nconst setContentContainerMargin = (graderContainer, rightMargin) => {\n    const contentContainer = graderContainer.querySelector(Selectors.regions.moduleContainer);\n    if (contentContainer) {\n        contentContainer.style.marginRight = `${rightMargin}px`;\n    }\n};\n\n/**\n * Get the function used to save a user grade.\n *\n * @param {HTMLElement} root The container for the grader\n * @param {Function} setGradeForUser The function that will be called.\n * @return {Function}\n */\nconst getSaveUserGradeFunction = (root, setGradeForUser) => {\n    return async(user) => {\n        try {\n            root.querySelector(Selectors.regions.gradingPanelErrors).innerHTML = '';\n            const result = await setGradeForUser(\n                user.id,\n                root.querySelector(Selectors.values.sendStudentNotifications).value,\n                root.querySelector(Selectors.regions.gradingPanel)\n            );\n            if (result.success) {\n                addToast(await getString('grades:gradesavedfor', 'mod_forum', user));\n            }\n            if (result.failed) {\n                displayGradingError(root, user, result.error);\n            }\n\n            return result;\n        } catch (err) {\n            displayGradingError(root, user, err);\n\n            return failedUpdate(err);\n        }\n    };\n};\n\n/**\n * Display a grading error, typically from a failed save.\n *\n * @param {HTMLElement} root The container for the grader\n * @param {Object} user The user who was errored\n * @param {Object} err The details of the error\n */\nconst displayGradingError = async(root, user, err) => {\n    const [\n        {html, js},\n        errorString\n    ] = await Promise.all([\n        Templates.renderForPromise(templateNames.grader.gradingPanel.error, {error: err}),\n        await getString('grades:gradesavefailed', 'mod_forum', {error: err.message, ...user}),\n    ]);\n\n    Templates.replaceNodeContents(root.querySelector(Selectors.regions.gradingPanelErrors), html, js);\n    addToast(errorString, {type: 'warning'});\n};\n\n/**\n * Launch the grader interface with the specified parameters.\n *\n * @param {Function} getListOfUsers A function to get the list of users\n * @param {Function} getContentForUser A function to get the content for a specific user\n * @param {Function} getGradeForUser A function get the grade details for a specific user\n * @param {Function} setGradeForUser A function to set the grade for a specific user\n * @param {Object} preferences Preferences for the launch function\n * @param {Number} preferences.initialUserId\n * @param {string} preferences.moduleName\n * @param {string} preferences.courseName\n * @param {string} preferences.courseUrl\n * @param {boolean} preferences.sendStudentNotifications\n * @param {null|HTMLElement} preferences.focusOnClose\n */\nexport const launch = async(getListOfUsers, getContentForUser, getGradeForUser, setGradeForUser, {\n    initialUserId = null,\n    moduleName,\n    courseName,\n    courseUrl,\n    sendStudentNotifications,\n    focusOnClose = null,\n} = {}) => {\n\n    // We need all of these functions to be executed in series, if one step runs before another the interface\n    // will not work.\n\n    // We need this promise to resolve separately so that we can avoid loading the whole interface if there are no users.\n    const userList = await getListOfUsers();\n    if (!userList.length) {\n        addNotification({\n            message: await getString('nouserstograde', 'core_grades'),\n            type: \"error\",\n        });\n        return;\n    }\n\n    // Now that we have confirmed there are at least some users let's boot up the grader interface.\n    const [\n        graderLayout,\n        {html, js},\n    ] = await Promise.all([\n        createFullScreenWindow({\n            fullscreen: false,\n            showLoader: false,\n            focusOnClose,\n        }),\n        Templates.renderForPromise(templateNames.grader.app, {\n            moduleName,\n            courseName,\n            courseUrl,\n            drawer: {show: true},\n            defaultsendnotifications: sendStudentNotifications,\n        }),\n    ]);\n\n    const graderContainer = graderLayout.getContainer();\n\n    const saveGradeFunction = getSaveUserGradeFunction(graderContainer, setGradeForUser);\n\n    Templates.replaceNodeContents(graderContainer, html, js);\n    const updateUserContent = getUpdateUserContentFunction(graderContainer, getContentForUser, getGradeForUser, saveGradeFunction);\n\n    const userIds = userList.map(user => user.id);\n    const statusContainer = graderContainer.querySelector(Selectors.regions.statusContainer);\n    // Fetch the userpicker for display.\n    const userPicker = await getUserPicker(\n        userList,\n        async(user) => {\n            const userGrade = await updateUserContent(user);\n            const renderContext = {\n                status: userGrade.hasgrade,\n                index: userIds.indexOf(user.id) + 1,\n                total: userList.length\n            };\n            Templates.render(templateNames.grader.status, renderContext).then(html => {\n                statusContainer.innerHTML = html;\n                return html;\n            }).catch();\n        },\n        saveGradeFunction,\n        {\n            initialUserId,\n        },\n    );\n\n    // Register all event listeners.\n    registerEventListeners(graderLayout, userPicker, saveGradeFunction, userList);\n\n    // Display the newly created user picker.\n    displayUserPicker(graderContainer, userPicker.rootNode);\n};\n\n/**\n * Show the grade for a specific user.\n *\n * @param {Function} getGradeForUser A function get the grade details for a specific user\n * @param {Number} userid The ID of a specific user\n * @param {String} moduleName the name of the module\n * @param {object} param\n * @param {null|HTMLElement} param.focusOnClose\n */\nexport const view = async(getGradeForUser, userid, moduleName, {\n    focusOnClose = null,\n} = {}) => {\n\n    const userGrade = await getGradeForUser(userid);\n\n    const [\n        modal,\n        gradeTemplateData\n    ] = await Promise.all([\n        Modal.create({\n            title: moduleName,\n            large: true,\n            removeOnClose: true,\n            returnElement: focusOnClose,\n            show: true,\n            body: Templates.render('mod_forum/local/grades/view_grade', userGrade),\n        }),\n        renderGradeTemplate(userGrade)\n    ]);\n\n    const bodyPromise = await modal.getBodyPromise();\n    const gradeReplace = bodyPromise[0].querySelector('[data-region=\"grade-template\"]');\n    Templates.replaceNodeContents(gradeReplace, gradeTemplateData.html, gradeTemplateData.js);\n};\n\nconst renderGradeTemplate = (userGrade) => Templates.renderForPromise(userGrade.templatename, userGrade.grade);\n\nexport {getGradingPanelFunctions};\n"],"names":["_interopRequireDefault","e","__esModule","default","_templates","_selectors","_user_picker","_gradingpanel","_modal_cancel","_drawer_events","templateNames","app","gradingPanel","error","searchResults","status","fetchContentFromRender","html","js","hideSearchResultContainer","bodyContainer","userPickerContainer","searchResultsContainer","classList","remove","add","hideUserSearchInput","toggleSearchButton","searchContainer","searchInput","setAttribute","focus","parentElement","querySelector","Selectors","regions","gradingInfoContainer","removeAttribute","collapseGradingDrawer","buttons","value","renderSearchResults","async","users","Templates","renderForPromise","replaceNodeContents","registerEventListeners","graderLayout","userPicker","saveGradeFunction","userList","graderContainer","getContainer","toggleSearch","searchInputContainer","userSearchContainer","userSearchInput","pickerRegion","addEventListener","target","closest","toggleFullscreen","stopImmediatePropagation","preventDefault","closeGrader","close","saveGrade","currentUser","getAttribute","innerHTML","showUserSearchInput","showSearchResultContainer","selectUserButton","selectUser","userId","user","find","id","setUserId","showUser","debounce","searchForUsers","searchTerm","toLowerCase","filter","fullname","includes","subscribe","DrawerEvents","DRAWER_HIDDEN","drawerRoot","setContentContainerMargin","DRAWER_SHOWN","offsetWidth","rightMargin","contentContainer","moduleContainer","style","marginRight","displayGradingError","root","err","errorString","Promise","all","getString","message","gradingPanelErrors","addToast","type","_exports","launch","getListOfUsers","getContentForUser","getGradeForUser","setGradeForUser","initialUserId","moduleName","courseName","courseUrl","sendStudentNotifications","focusOnClose","arguments","length","undefined","addNotification","createFullScreenWindow","fullscreen","showLoader","drawer","show","defaultsendnotifications","getSaveUserGradeFunction","result","values","success","failed","failedUpdate","updateUserContent","getUpdateUserContentFunction","saveGradeForUser","firstLoad","spinner","addIconToContainerWithPromise","userGrade","then","moduleReplace","gradingPanelHtml","gradingPanelJS","render","templatename","grade","panelContainer","gradingPanelContainer","panel","form","fillInitialValues","event","scrollTop","resolve","userIds","map","statusContainer","getUserPicker","renderContext","hasgrade","index","indexOf","total","catch","displayUserPicker","rootNode","view","userid","modal","gradeTemplateData","Modal","create","title","large","removeOnClose","returnElement","body","renderGradeTemplate","gradeReplace","getBodyPromise"],"mappings":"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"}