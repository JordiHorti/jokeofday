{"version":3,"file":"loglevel.min.js","sources":["../src/loglevel.js"],"sourcesContent":["// Copyright (c) 2013 Tim Perry\n//\n// Permission is hereby granted, free of charge, to any person\n// obtaining a copy of this software and associated documentation\n// files (the \"Software\"), to deal in the Software without\n// restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the\n// Software is furnished to do so, subject to the following\n// conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n// OTHER DEALINGS IN THE SOFTWARE.\n\n// Description of import into Moodle:\n// Download from https://github.com/pimterry/loglevel/tree/master/dist\n// Copy loglevel.js into lib/amd/src/ in Moodle folder.\n// Add the license as a comment to the file and these instructions.\n\n/*\n* loglevel - https://github.com/pimterry/loglevel\n*\n* Copyright (c) 2013 Tim Perry\n* Licensed under the MIT license.\n*/\n(function (root, definition) {\n    \"use strict\";\n    if (typeof define === 'function' && define.amd) {\n        define(definition);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = definition();\n    } else {\n        root.log = definition();\n    }\n}(this, function () {\n    \"use strict\";\n\n    // Slightly dubious tricks to cut down minimized file size\n    var noop = function() {};\n    var undefinedType = \"undefined\";\n    var isIE = (typeof window !== undefinedType) && (typeof window.navigator !== undefinedType) && (\n        /Trident\\/|MSIE /.test(window.navigator.userAgent)\n    );\n\n    var logMethods = [\n        \"trace\",\n        \"debug\",\n        \"info\",\n        \"warn\",\n        \"error\"\n    ];\n\n    var _loggersByName = {};\n    var defaultLogger = null;\n\n    // Cross-browser bind equivalent that works at least back to IE6\n    function bindMethod(obj, methodName) {\n        var method = obj[methodName];\n        if (typeof method.bind === 'function') {\n            return method.bind(obj);\n        } else {\n            try {\n                return Function.prototype.bind.call(method, obj);\n            } catch (e) {\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n                return function() {\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\n                };\n            }\n        }\n    }\n\n    // Trace() doesn't print the message in IE, so for that case we need to wrap it\n    function traceForIE() {\n        if (console.log) {\n            if (console.log.apply) {\n                console.log.apply(console, arguments);\n            } else {\n                // In old IE, native console methods themselves don't have apply().\n                Function.prototype.apply.apply(console.log, [console, arguments]);\n            }\n        }\n        if (console.trace) console.trace();\n    }\n\n    // Build the best logging method possible for this env\n    // Wherever possible we want to bind, not wrap, to preserve stack traces\n    function realMethod(methodName) {\n        if (methodName === 'debug') {\n            methodName = 'log';\n        }\n\n        if (typeof console === undefinedType) {\n            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n        } else if (methodName === 'trace' && isIE) {\n            return traceForIE;\n        } else if (console[methodName] !== undefined) {\n            return bindMethod(console, methodName);\n        } else if (console.log !== undefined) {\n            return bindMethod(console, 'log');\n        } else {\n            return noop;\n        }\n    }\n\n    // These private functions always need `this` to be set properly\n\n    function replaceLoggingMethods() {\n        /*jshint validthis:true */\n        var level = this.getLevel();\n\n        // Replace the actual methods.\n        for (var i = 0; i < logMethods.length; i++) {\n            var methodName = logMethods[i];\n            this[methodName] = (i < level) ?\n                noop :\n                this.methodFactory(methodName, level, this.name);\n        }\n\n        // Define log.log as an alias for log.debug\n        this.log = this.debug;\n\n        // Return any important warnings.\n        if (typeof console === undefinedType && level < this.levels.SILENT) {\n            return \"No console available for logging\";\n        }\n    }\n\n    // In old IE versions, the console isn't present until you first open it.\n    // We build realMethod() replacements here that regenerate logging methods\n    function enableLoggingWhenConsoleArrives(methodName) {\n        return function () {\n            if (typeof console !== undefinedType) {\n                replaceLoggingMethods.call(this);\n                this[methodName].apply(this, arguments);\n            }\n        };\n    }\n\n    // By default, we use closely bound real methods wherever possible, and\n    // otherwise we wait for a console to appear, and then try again.\n    function defaultMethodFactory(methodName, _level, _loggerName) {\n        /*jshint validthis:true */\n        return realMethod(methodName) ||\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\n    }\n\n    function Logger(name, factory) {\n      // Private instance variables.\n      var self = this;\n      /**\n       * The level inherited from a parent logger (or a global default). We\n       * cache this here rather than delegating to the parent so that it stays\n       * in sync with the actual logging methods that we have installed (the\n       * parent could change levels but we might not have rebuilt the loggers\n       * in this child yet).\n       * @type {number}\n       */\n      var inheritedLevel;\n      /**\n       * The default level for this logger, if any. If set, this overrides\n       * `inheritedLevel`.\n       * @type {number|null}\n       */\n      var defaultLevel;\n      /**\n       * A user-specific level for this logger. If set, this overrides\n       * `defaultLevel`.\n       * @type {number|null}\n       */\n      var userLevel;\n\n      var storageKey = \"loglevel\";\n      if (typeof name === \"string\") {\n        storageKey += \":\" + name;\n      } else if (typeof name === \"symbol\") {\n        storageKey = undefined;\n      }\n\n      function persistLevelIfPossible(levelNum) {\n          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage[storageKey] = levelName;\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n          } catch (ignore) {}\n      }\n\n      function getPersistedLevel() {\n          var storedLevel;\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          try {\n              storedLevel = window.localStorage[storageKey];\n          } catch (ignore) {}\n\n          // Fallback to cookies if local storage gives us nothing\n          if (typeof storedLevel === undefinedType) {\n              try {\n                  var cookie = window.document.cookie;\n                  var cookieName = encodeURIComponent(storageKey);\n                  var location = cookie.indexOf(cookieName + \"=\");\n                  if (location !== -1) {\n                      storedLevel = /^([^;]+)/.exec(\n                          cookie.slice(location + cookieName.length + 1)\n                      )[1];\n                  }\n              } catch (ignore) {}\n          }\n\n          // If the stored level is not valid, treat it as if nothing was stored.\n          if (self.levels[storedLevel] === undefined) {\n              storedLevel = undefined;\n          }\n\n          return storedLevel;\n      }\n\n      function clearPersistedLevel() {\n          if (typeof window === undefinedType || !storageKey) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage.removeItem(storageKey);\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=; expires=Thu, 01 Jan 1970 00:00:00 UTC\";\n          } catch (ignore) {}\n      }\n\n      function normalizeLevel(input) {\n          var level = input;\n          if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\n              level = self.levels[level.toUpperCase()];\n          }\n          if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\n              return level;\n          } else {\n              throw new TypeError(\"log.setLevel() called with invalid level: \" + input);\n          }\n      }\n\n      /*\n       *\n       * Public logger API - see https://github.com/pimterry/loglevel for details\n       *\n       */\n\n      self.name = name;\n\n      self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\n          \"ERROR\": 4, \"SILENT\": 5};\n\n      self.methodFactory = factory || defaultMethodFactory;\n\n      self.getLevel = function () {\n          if (userLevel != null) {\n            return userLevel;\n          } else if (defaultLevel != null) {\n            return defaultLevel;\n          } else {\n            return inheritedLevel;\n          }\n      };\n\n      self.setLevel = function (level, persist) {\n          userLevel = normalizeLevel(level);\n          if (persist !== false) {  // defaults to true\n              persistLevelIfPossible(userLevel);\n          }\n\n          // NOTE: in v2, this should call rebuild(), which updates children.\n          return replaceLoggingMethods.call(self);\n      };\n\n      self.setDefaultLevel = function (level) {\n          defaultLevel = normalizeLevel(level);\n          if (!getPersistedLevel()) {\n              self.setLevel(level, false);\n          }\n      };\n\n      self.resetLevel = function () {\n          userLevel = null;\n          clearPersistedLevel();\n          replaceLoggingMethods.call(self);\n      };\n\n      self.enableAll = function(persist) {\n          self.setLevel(self.levels.TRACE, persist);\n      };\n\n      self.disableAll = function(persist) {\n          self.setLevel(self.levels.SILENT, persist);\n      };\n\n      self.rebuild = function () {\n          if (defaultLogger !== self) {\n              inheritedLevel = normalizeLevel(defaultLogger.getLevel());\n          }\n          replaceLoggingMethods.call(self);\n\n          if (defaultLogger === self) {\n              for (var childName in _loggersByName) {\n                _loggersByName[childName].rebuild();\n              }\n          }\n      };\n\n      // Initialize all the internal levels.\n      inheritedLevel = normalizeLevel(\n          defaultLogger ? defaultLogger.getLevel() : \"WARN\"\n      );\n      var initialLevel = getPersistedLevel();\n      if (initialLevel != null) {\n          userLevel = normalizeLevel(initialLevel);\n      }\n      replaceLoggingMethods.call(self);\n    }\n\n    /*\n     *\n     * Top-level API\n     *\n     */\n\n    defaultLogger = new Logger();\n\n    defaultLogger.getLogger = function getLogger(name) {\n        if ((typeof name !== \"symbol\" && typeof name !== \"string\") || name === \"\") {\n            throw new TypeError(\"You must supply a name when creating a logger.\");\n        }\n\n        var logger = _loggersByName[name];\n        if (!logger) {\n            logger = _loggersByName[name] = new Logger(\n                name,\n                defaultLogger.methodFactory\n            );\n        }\n        return logger;\n    };\n\n    // Grab the current global log variable in case of overwrite\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\n    defaultLogger.noConflict = function() {\n        if (typeof window !== undefinedType &&\n               window.log === defaultLogger) {\n            window.log = _log;\n        }\n\n        return defaultLogger;\n    };\n\n    defaultLogger.getLoggers = function getLoggers() {\n        return _loggersByName;\n    };\n\n    // ES6 default export, for compatibility\n    defaultLogger['default'] = defaultLogger;\n\n    return defaultLogger;\n}));\n"],"names":["root","definition","this","noop","isIE","window","navigator","test","userAgent","logMethods","_loggersByName","defaultLogger","bindMethod","obj","methodName","method","bind","Function","prototype","call","e","apply","arguments","traceForIE","console","log","trace","replaceLoggingMethods","level","getLevel","i","length","methodFactory","name","debug","levels","SILENT","enableLoggingWhenConsoleArrives","defaultMethodFactory","_level","_loggerName","undefined","realMethod","Logger","factory","inheritedLevel","defaultLevel","userLevel","self","storageKey","getPersistedLevel","storedLevel","localStorage","ignore","cookie","document","cookieName","encodeURIComponent","location","indexOf","exec","slice","normalizeLevel","input","toUpperCase","TypeError","TRACE","DEBUG","INFO","WARN","ERROR","setLevel","persist","levelNum","levelName","persistLevelIfPossible","setDefaultLevel","resetLevel","removeItem","clearPersistedLevel","enableAll","disableAll","rebuild","childName","initialLevel","getLogger","logger","_log","noConflict","getLoggers","define","amd","module","exports"],"mappings":"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"}