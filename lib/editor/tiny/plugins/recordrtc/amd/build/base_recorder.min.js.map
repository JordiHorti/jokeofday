{"version":3,"file":"base_recorder.min.js","sources":["../src/base_recorder.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n//\n\n/**\n * Tiny Record RTC type.\n *\n * @module      tiny_recordrtc/base_recorder\n * @copyright   2022 Stevani Andolo <stevani@hotmail.com.au>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getString, getStrings} from 'core/str';\nimport {component} from './common';\nimport Pending from 'core/pending';\nimport {getData, isPausingAllowed} from './options';\nimport uploadFile from 'editor_tiny/uploader';\nimport {add as addToast} from 'core/toast';\nimport * as ModalEvents from 'core/modal_events';\nimport * as Templates from 'core/templates';\nimport {saveCancelPromise} from 'core/notification';\nimport {prefetchStrings, prefetchTemplates} from 'core/prefetch';\nimport AlertModal from 'core/local/modal/alert';\n\n/**\n * The RecordRTC base class for audio, video, and any other future types\n */\nexport default class {\n\n    stopRequested = false;\n    buttonTimer = null;\n    pauseTime = null;\n    startTime = null;\n\n    /**\n     * Constructor for the RecordRTC class\n     *\n     * @param {TinyMCE} editor The Editor to which the content will be inserted\n     * @param {Modal} modal The Moodle Modal that contains the interface used for recording\n     */\n    constructor(editor, modal) {\n        this.ready = false;\n\n        if (!this.checkAndWarnAboutBrowserCompatibility()) {\n            return;\n        }\n\n        this.editor = editor;\n        this.config = getData(editor).params;\n        this.modal = modal;\n        this.modalRoot = modal.getRoot()[0];\n        this.startStopButton = this.modalRoot.querySelector('button[data-action=\"startstop\"]');\n        this.uploadButton = this.modalRoot.querySelector('button[data-action=\"upload\"]');\n        this.pauseResumeButton = this.modalRoot.querySelector('button[data-action=\"pauseresume\"]');\n\n        // Disable the record button untilt he stream is acquired.\n        this.setRecordButtonState(false);\n\n        this.player = this.configurePlayer();\n        this.registerEventListeners();\n        this.ready = true;\n\n        this.captureUserMedia();\n        this.prefetchContent();\n    }\n\n    /**\n     * Check whether the browser is compatible.\n     *\n     * @returns {boolean}\n     */\n    isReady() {\n        return this.ready;\n    }\n\n    // Disable eslint's valid-jsdoc rule as the following methods are abstract and mnust be overridden by the child class.\n\n    /* eslint-disable valid-jsdoc, no-unused-vars */\n\n    /**\n     * Get the Player element for this type.\n     *\n     * @returns {HTMLElement} The player element, typically an audio or video tag.\n     */\n    configurePlayer() {\n        throw new Error(`configurePlayer() must be implemented in ${this.constructor.name}`);\n    }\n\n    /**\n     * Get the list of supported mimetypes for this recorder.\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/isTypeSupported}\n     *\n     * @returns {string[]} The list of supported mimetypes.\n     */\n    getSupportedTypes() {\n        throw new Error(`getSupportedTypes() must be implemented in ${this.constructor.name}`);\n    }\n\n    /**\n     * Get any recording options passed into the MediaRecorder.\n     * Please note that the mimeType will be fetched from {@link getSupportedTypes()}.\n     *\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/MediaRecorder#options}\n     * @returns {Object}\n     */\n    getRecordingOptions() {\n        throw new Error(`getRecordingOptions() must be implemented in ${this.constructor.name}`);\n    }\n\n    /**\n     * Get a filename for the generated file.\n     *\n     * Typically this function will take a prefix and add a type-specific suffix such as the extension to it.\n     *\n     * @param {string} prefix The prefix for the filename generated by the recorder.\n     * @returns {string}\n     */\n    getFileName(prefix) {\n        throw new Error(`getFileName() must be implemented in ${this.constructor.name}`);\n    }\n\n    /**\n     * Get a list of constraints as required by the getUserMedia() function.\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia#constraints}\n     *\n     * @returns {Object}\n     */\n    getMediaConstraints() {\n        throw new Error(`getMediaConstraints() must be implemented in ${this.constructor.name}`);\n    }\n\n    /**\n     * Whether to start playing the recording as it is captured.\n     * @returns {boolean} Whether to start playing the recording as it is captured.\n     */\n    playOnCapture() {\n        return false;\n    }\n\n    /**\n     * Get the time limit for this recording type.\n     *\n     * @returns {number} The time limit in seconds.\n     */\n    getTimeLimit() {\n        throw new Error(`getTimeLimit() must be implemented in ${this.constructor.name}`);\n    }\n\n    /**\n     * Get the name of the template used when embedding the URL in the editor content.\n     *\n     * @returns {string}\n     */\n    getEmbedTemplateName() {\n        throw new Error(`getEmbedTemplateName() must be implemented in ${this.constructor.name}`);\n    }\n\n    /**\n     * Fetch the Class of the Modal to be displayed.\n     *\n     * @returns {Modal}\n     */\n    static getModalClass() {\n        throw new Error(`getModalClass() must be implemented in ${this.constructor.name}`);\n    }\n\n    /* eslint-enable valid-jsdoc, no-unused-vars */\n\n    /**\n     * Get the options for the MediaRecorder.\n     *\n     * @returns {object} The options for the MediaRecorder instance.\n     */\n    getParsedRecordingOptions() {\n        const requestedTypes = this.getSupportedTypes();\n        const possibleTypes = requestedTypes.reduce((result, type) => {\n            result.push(type);\n            // Safari seems to use codecs: instead of codecs=.\n            // It is safe to add both, so we do, but we want them to remain in order.\n            result.push(type.replace('=', ':'));\n            return result;\n        }, []);\n\n        const compatTypes = possibleTypes.filter((type) => window.MediaRecorder.isTypeSupported(type));\n\n        const options = this.getRecordingOptions();\n        if (compatTypes.length !== 0) {\n            options.mimeType = compatTypes[0];\n        }\n        window.console.info(\n            `Selected codec ${options.mimeType} from ${compatTypes.length} options.`,\n            compatTypes,\n        );\n\n        return options;\n    }\n\n    /**\n     * Start capturing the User Media and handle success or failure of the capture.\n     */\n    async captureUserMedia() {\n        try {\n            const stream = await navigator.mediaDevices.getUserMedia(this.getMediaConstraints());\n            this.handleCaptureSuccess(stream);\n        } catch (error) {\n            this.handleCaptureFailure(error);\n        }\n    }\n\n    /**\n     * Prefetch some of the content that will be used in the UI.\n     *\n     * Note: not all of the strings used are pre-fetched.\n     * Some of the strings will be fetched because their template is used.\n     */\n    prefetchContent() {\n        prefetchStrings(component, [\n            'uploading',\n            'recordagain_title',\n            'recordagain_desc',\n            'discard_title',\n            'discard_desc',\n            'confirm_yes',\n            'recordinguploaded',\n            'maxfilesizehit',\n            'maxfilesizehit_title',\n            'uploadfailed',\n            'pause',\n            'resume',\n        ]);\n\n        prefetchTemplates([\n            this.getEmbedTemplateName(),\n            'tiny_recordrtc/timeremaining',\n        ]);\n    }\n\n    /**\n     * Display an error message to the user.\n     *\n     * @param {Promise<string>} title The error title\n     * @param {Promise<string>} content The error message\n     * @returns {Promise<Modal>}\n     */\n    async displayAlert(title, content) {\n        const pendingPromise = new Pending('core/confirm:alert');\n        const modal = await AlertModal.create({\n            title: title,\n            body: content,\n            removeOnClose: true,\n        });\n\n        modal.show();\n        pendingPromise.resolve();\n\n        return modal;\n    }\n\n    /**\n     * Handle successful capture of the User Media.\n     *\n     * @param {MediaStream} stream The stream as captured by the User Media.\n     */\n    handleCaptureSuccess(stream) {\n        // Set audio player source to microphone stream.\n        this.player.srcObject = stream;\n\n        if (this.playOnCapture()) {\n            // Mute audio, distracting while recording.\n            this.player.muted = true;\n\n            this.player.play();\n        }\n\n        this.stream = stream;\n        this.setupPlayerSource();\n        this.setRecordButtonState(true);\n    }\n\n    /**\n     * Setup the player to use the stream as a source.\n     */\n    setupPlayerSource() {\n        if (!this.player.srcObject) {\n            this.player.srcObject = this.stream;\n\n            // Mute audio, distracting while recording.\n            this.player.muted = true;\n\n            this.player.play();\n        }\n    }\n\n    /**\n     * Enable the record button.\n     *\n     * @param {boolean|null} enabled Set the button state\n     */\n    setRecordButtonState(enabled) {\n        this.startStopButton.disabled = !enabled;\n    }\n\n    /**\n     * Configure button visibility for the record button.\n     *\n     * @param {boolean} visible Set the visibility of the button.\n     */\n    setRecordButtonVisibility(visible) {\n        const container = this.getButtonContainer('start-stop');\n        container.classList.toggle('hide', !visible);\n    }\n\n    /**\n     * Configure button visibility for the pause button.\n     *\n     * @param {boolean} visible Set the visibility of the button.\n     */\n    setPauseButtonVisibility(visible) {\n        if (this.pauseResumeButton) {\n            this.pauseResumeButton.classList.toggle('hidden', !visible);\n        }\n    }\n\n    /**\n     * Enable the upload button.\n     *\n     * @param {boolean|null} enabled Set the button state\n     */\n    setUploadButtonState(enabled) {\n        this.uploadButton.disabled = !enabled;\n    }\n\n    /**\n     * Configure button visibility for the upload button.\n     *\n     * @param {boolean} visible Set the visibility of the button.\n     */\n    setUploadButtonVisibility(visible) {\n        const container = this.getButtonContainer('upload');\n        container.classList.toggle('hide', !visible);\n    }\n\n    /**\n     * Sets the state of the audio player, including visibility, muting, and controls.\n     *\n     * @param {boolean} state A boolean indicating the audio player state.\n     */\n    setPlayerState(state) {\n        // Mute or unmute the audio player and show or hide controls.\n        this.player.muted = !state;\n        this.player.controls = state;\n        // Toggle the 'hide' class on the player button container based on state.\n        this.getButtonContainer('player')?.classList.toggle('hide', !state);\n    }\n\n    /**\n     * Handle failure to capture the User Media.\n     *\n     * @param {Error} error\n     */\n    handleCaptureFailure(error) {\n        // Changes 'CertainError' -> 'gumcertain' to match language string names.\n        var subject = `gum${error.name.replace('Error', '').toLowerCase()}`;\n        this.displayAlert(\n            getString(`${subject}_title`, component),\n            getString(subject, component)\n        );\n    }\n\n    /**\n     * Close the modal and stop recording.\n     */\n    close() {\n        // Closing the modal will destroy it and remove it from the DOM.\n        // It will also stop the recording via the hidden Modal Event.\n        this.modal.hide();\n    }\n\n    /**\n     * Register event listeners for the modal.\n     */\n    registerEventListeners() {\n        this.modalRoot.addEventListener('click', this.handleModalClick.bind(this));\n        this.modal.getRoot().on(ModalEvents.outsideClick, this.outsideClickHandler.bind(this));\n        this.modal.getRoot().on(ModalEvents.hidden, () => {\n            this.cleanupStream();\n            this.requestRecordingStop();\n        });\n        this.player.addEventListener('error', this.handlePlayerError.bind(this));\n        this.player.addEventListener('loadedmetadata', this.handlePlayerLoadedMetadata.bind(this));\n    }\n\n    /**\n     * Handle the player `error` event.\n     *\n     * This event is called when the player throws an error.\n     */\n    handlePlayerError() {\n        const error = this.player.error;\n        if (error) {\n            const message = `An error occurred: ${error.message || 'Unknown error'}. Please try again.`;\n            addToast(message, {type: error});\n            // Disable the upload button.\n            this.setUploadButtonState(false);\n        }\n    }\n\n    /**\n     * Handles the event when the player's metadata has been loaded.\n     */\n    handlePlayerLoadedMetadata() {\n        if (isFinite(this.player.duration)) {\n            // Note: In Chrome, you need to seek to activate the error listener\n            // if an issue arises after inserting the recorded audio into the player source.\n            this.player.currentTime = 0.1;\n        }\n    }\n\n    /**\n     * Prevent the Modal from closing when recording is on process.\n     *\n     * @param {MouseEvent} event The click event\n     */\n    async outsideClickHandler(event) {\n        if (this.isRecording() || this.isPaused()) {\n            // The user is recording.\n            // Do not distract with a confirmation, just prevent closing.\n            event.preventDefault();\n        } else if (this.hasData()) {\n            // If there is a blobsize then there is data that may be lost.\n            // Ask the user to confirm they want to close the modal.\n            // We prevent default here, and then close the modal if they confirm.\n            event.preventDefault();\n\n            try {\n                await saveCancelPromise(\n                    await getString(\"discard_title\", component),\n                    await getString(\"discard_desc\", component),\n                    await getString(\"confirm_yes\", component),\n                );\n                this.modal.hide();\n            } catch (error) {\n                // Do nothing, the modal will not close.\n            }\n        }\n    }\n\n    /**\n     * Handle a click within the Modal.\n     *\n     * @param {MouseEvent} event The click event\n     */\n    handleModalClick(event) {\n        const button = event.target.closest('button');\n        if (button && button.dataset.action) {\n            const action = button.dataset.action;\n            if (action === 'startstop') {\n                this.handleRecordingStartStopRequested();\n            }\n\n            if (action === 'upload') {\n                this.uploadRecording();\n            }\n\n            if (action === 'pauseresume') {\n                this.handleRecordingPauseResumeRequested();\n            }\n        }\n    }\n\n    /**\n     * Handle the click event for the recording start/stop button.\n     */\n    handleRecordingStartStopRequested() {\n        if (this.isRecording() || this.isPaused()) {\n            this.requestRecordingStop();\n        } else {\n            this.startRecording();\n        }\n    }\n\n    /**\n     * Handle the click event for the recording pause/resume button.\n     */\n    handleRecordingPauseResumeRequested() {\n        if (this.isRecording()) {\n            // Pause recording.\n            this.mediaRecorder.pause();\n        } else if (this.isPaused()) {\n            // Resume recording.\n            this.mediaRecorder.resume();\n        }\n    }\n\n    /**\n     * Handle the media stream after it has finished.\n     */\n    async onMediaStopped() {\n        // Set source of audio player.\n        this.blob = new Blob(this.data.chunks, {\n            type: this.mediaRecorder.mimeType\n        });\n        this.player.srcObject = null;\n        this.player.src = URL.createObjectURL(this.blob);\n\n        // Change the label to \"Record again\".\n        this.setRecordButtonTextFromString('recordagain');\n\n        // Show upload button.\n        this.setUploadButtonVisibility(true);\n        this.setPlayerState(true);\n        this.setUploadButtonState(true);\n\n        // Hide the pause button.\n        this.setPauseButtonVisibility(false);\n        if (this.mediaRecorder.state === 'inactive') {\n            this.setPauseButtonTextFromString('pause');\n        }\n    }\n\n    /**\n     * Upload the recording and insert it into the editor content.\n     */\n    async uploadRecording() {\n        // Trigger error if no recording has been made.\n        if (this.data.chunks.length === 0) {\n            this.displayAlert('norecordingfound');\n            return;\n        }\n\n        const fileName = this.getFileName((Math.random() * 1000).toString().replace('.', ''));\n\n        // Upload recording to server.\n        try {\n            // Once uploading starts, do not allow any further changes to the recording.\n            this.setRecordButtonVisibility(false);\n\n            // Disable the upload button.\n            this.setUploadButtonState(false);\n\n            // Upload the recording.\n            const fileURL = await uploadFile(this.editor, 'media', this.blob, fileName, (progress) => {\n                this.setUploadButtonTextProgress(progress);\n            });\n            this.insertMedia(fileURL);\n            this.close();\n            addToast(await getString('recordinguploaded', component));\n        } catch (error) {\n            // Show a toast and unhide the button.\n            this.setUploadButtonState(true);\n\n            addToast(await getString('uploadfailed', component, {error}), {\n                type: 'error',\n            });\n\n        }\n    }\n\n    /**\n     * Helper to get the container that a button is in.\n     *\n     * @param {string} purpose The button purpose\n     * @returns {HTMLElement}\n     */\n    getButtonContainer(purpose) {\n        return this.modalRoot.querySelector(`[data-purpose=\"${purpose}-container\"]`);\n    }\n\n    /**\n     * Check whether the browser is compatible with capturing media.\n     *\n     * @returns {boolean}\n     */\n    static isBrowserCompatible() {\n        return this.checkSecure() && this.hasUserMedia();\n    }\n\n    static async display(editor) {\n        const ModalClass = this.getModalClass();\n        const modal = await ModalClass.create({\n            templateContext: {\n                isallowedpausing: isPausingAllowed(editor),\n            },\n            large: true,\n            removeOnClose: true,\n        });\n\n        // Set up the VideoRecorder.\n        const recorder = new this(editor, modal);\n        if (recorder.isReady()) {\n            modal.show();\n        }\n        return modal;\n    }\n\n    /**\n     * Check whether the browser is compatible with capturing media, and display a warning if not.\n     *\n     * @returns {boolean}\n     */\n    checkAndWarnAboutBrowserCompatibility() {\n        if (!this.constructor.checkSecure()) {\n            getStrings(['insecurealert_title', 'insecurealert'].map((key) => ({key, component})))\n                .then(([title, message]) => addToast(message, {title, type: 'error'}))\n                .catch();\n            return false;\n        }\n\n        if (!this.constructor.hasUserMedia) {\n            getStrings(['nowebrtc_title', 'nowebrtc'].map((key) => ({key, component})))\n                .then(([title, message]) => addToast(message, {title, type: 'error'}))\n                .catch();\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Check whether the browser supports WebRTC.\n     *\n     * @returns {boolean}\n     */\n    static hasUserMedia() {\n        return (navigator.mediaDevices && window.MediaRecorder);\n    }\n\n    /**\n     * Check whether the hostname is either hosted over SSL, or from a valid localhost hostname.\n     *\n     * The UserMedia API can only be used in secure contexts as noted.\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia#privacy_and_security}\n     *\n     * @returns {boolean} Whether the plugin can be loaded.\n     */\n    static checkSecure() {\n        // Note: We can now use window.isSecureContext.\n        // https://developer.mozilla.org/en-US/docs/Web/Security/Secure_Contexts#feature_detection\n        // https://developer.mozilla.org/en-US/docs/Web/API/isSecureContext\n        return window.isSecureContext;\n    }\n\n    /**\n     * Update the content of the stop recording button timer.\n     */\n    async setStopRecordingButton() {\n        const {html, js} = await Templates.renderForPromise('tiny_recordrtc/timeremaining', this.getTimeRemaining());\n        Templates.replaceNodeContents(this.startStopButton, html, js);\n        this.startButtonTimer();\n    }\n\n    /**\n     * Update the time on the stop recording button.\n     */\n    updateRecordButtonTime() {\n        const {remaining, minutes, seconds} = this.getTimeRemaining();\n        if (remaining < 0) {\n            this.requestRecordingStop();\n        } else {\n            this.startStopButton.querySelector('[data-type=\"minutes\"]').textContent = minutes;\n            this.startStopButton.querySelector('[data-type=\"seconds\"]').textContent = seconds;\n        }\n    }\n\n    /**\n     * Set the text of the record button using a language string.\n     *\n     * @param {string} string The string identifier\n     */\n    async setRecordButtonTextFromString(string) {\n        this.startStopButton.textContent = await getString(string, component);\n    }\n\n    /**\n     * Set the text of the pause button using a language string.\n     *\n     * @param {string} string The string identifier\n     */\n    async setPauseButtonTextFromString(string) {\n        if (this.pauseResumeButton) {\n            this.pauseResumeButton.textContent = await getString(string, component);\n        }\n    }\n\n    /**\n     * Set the upload button text progress.\n     *\n     * @param {number} progress The progress\n     */\n    async setUploadButtonTextProgress(progress) {\n        this.uploadButton.textContent = await getString('uploading', component, {\n            progress: Math.round(progress * 100) / 100,\n        });\n    }\n\n    async resetUploadButtonText() {\n        this.uploadButton.textContent = await getString('upload', component);\n    }\n\n    /**\n     * Clear the timer for the stop recording button.\n     */\n    clearButtonTimer() {\n        if (this.buttonTimer) {\n            clearInterval(this.buttonTimer);\n        }\n        this.buttonTimer = null;\n        this.pauseTime = null;\n        this.startTime = null;\n    }\n\n    /**\n     * Pause the timer for the stop recording button.\n     */\n    pauseButtonTimer() {\n        // Stop the countdown timer.\n        this.pauseTime = new Date().getTime(); // Store pause time.\n        if (this.buttonTimer) {\n            clearInterval(this.buttonTimer);\n        }\n    }\n\n    /**\n     * Start the timer for the start recording button.\n     * If the recording was paused, the timer will resume from the pause time.\n     */\n    startButtonTimer() {\n        if (this.pauseTime !== null) {\n            // Resume from pause.\n            const pauseDuration = new Date().getTime() - this.pauseTime;\n            // Adjust start time by pause duration.\n            this.startTime += pauseDuration;\n            this.pauseTime = null;\n        }\n        this.buttonTimer = setInterval(this.updateRecordButtonTime.bind(this), 500);\n    }\n\n    /**\n     * Get the time remaining for the recording.\n     *\n     * @returns {Object} The minutes and seconds remaining.\n     */\n    getTimeRemaining() {\n        // All times are in milliseconds.\n        let now = new Date().getTime();\n        if (this.pauseTime !== null) {\n            // If paused, use pauseTime instead of current time.\n            now = this.pauseTime;\n        }\n        const remaining = Math.floor(this.getTimeLimit() - ((now - this.startTime) / 1000));\n\n        const formatter = new Intl.NumberFormat(navigator.language, {minimumIntegerDigits: 2});\n        const seconds = formatter.format(remaining % 60);\n        const minutes = formatter.format(Math.floor((remaining - seconds) / 60));\n        return {\n            remaining,\n            minutes,\n            seconds,\n        };\n    }\n\n    /**\n     * Get the maximum file size that can be uploaded.\n     *\n     * @returns {number} The max byte size\n     */\n    getMaxUploadSize() {\n        return this.config.maxrecsize;\n    }\n\n    /**\n     * Stop the recording.\n     * Please note that this should only stop the recording.\n     * Anything related to processing the recording should be handled by the\n     * mediaRecorder's stopped event handler which is processed after it has stopped.\n     */\n    requestRecordingStop() {\n        if (this.mediaRecorder && this.mediaRecorder.state !== 'inactive') {\n            this.stopRequested = true;\n            if (this.isPaused()) {\n                this.stopRecorder();\n            }\n        } else {\n            // There is no recording to stop, but the stream must still be cleaned up.\n            this.cleanupStream();\n        }\n    }\n\n    stopRecorder() {\n        if (this.isPaused()) {\n            this.pauseTime = null;\n        }\n        this.mediaRecorder.stop();\n\n        // Unmute the player so that the audio is heard during playback.\n        this.player.muted = false;\n    }\n\n    /**\n     * Clean up the stream.\n     *\n     * This involves stopping any track which is still active.\n     */\n    cleanupStream() {\n        if (this.stream) {\n            this.stream.getTracks()\n                .filter((track) => track.readyState !== 'ended')\n                .forEach((track) => track.stop());\n        }\n    }\n\n    /**\n     * Handle the mediaRecorder `stop` event.\n     */\n    handleStopped() {\n        // Handle the stream data.\n        this.onMediaStopped();\n\n        // Clear the button timer.\n        this.clearButtonTimer();\n    }\n\n    /**\n     * Handle the mediaRecorder `start` event.\n     *\n     * This event is called when the recording starts.\n     */\n    handleStarted() {\n        this.startTime = new Date().getTime();\n        if (isPausingAllowed(this.editor) && !this.isPaused()) {\n            this.setPauseButtonVisibility(true);\n        }\n        this.setStopRecordingButton();\n    }\n\n    /**\n     * Handle the mediaRecorder `pause` event.\n     *\n     * This event is called when the recording pauses.\n     */\n    handlePaused() {\n        this.pauseButtonTimer();\n        this.setPauseButtonTextFromString('resume');\n    }\n\n    /**\n     * Handle the mediaRecorder `resume` event.\n     *\n     * This event is called when the recording resumes.\n     */\n    handleResume() {\n        this.startButtonTimer();\n        this.setPauseButtonTextFromString('pause');\n    }\n\n    /**\n     * Handle the mediaRecorder `dataavailable` event.\n     *\n     * @param {Event} event\n     */\n    handleDataAvailable(event) {\n        if (this.isRecording() || this.isPaused()) {\n            const newSize = this.data.blobSize + event.data.size;\n            // Recording stops when either the maximum upload size is reached, or the time limit expires.\n            // The time limit is checked in the `updateButtonTime` function.\n            if (newSize >= this.getMaxUploadSize()) {\n                this.stopRecorder();\n                this.displayFileLimitHitMessage();\n            } else {\n                // Push recording slice to array.\n                this.data.chunks.push(event.data);\n\n                // Size of all recorded data so far.\n                this.data.blobSize = newSize;\n\n                if (this.stopRequested) {\n                    this.stopRecorder();\n                }\n            }\n        }\n    }\n\n    async displayFileLimitHitMessage() {\n        addToast(await getString('maxfilesizehit', component), {\n            title: await getString('maxfilesizehit_title', component),\n            type: 'error',\n        });\n    }\n\n    /**\n     * Check whether the recording is in progress.\n     *\n     * @returns {boolean}\n     */\n    isRecording() {\n        return this.mediaRecorder?.state === 'recording';\n    }\n\n    /**\n     * Check whether the recording is paused.\n     *\n     * @returns {boolean}\n     */\n    isPaused() {\n        return this.mediaRecorder?.state === 'paused';\n    }\n\n    /**\n     * Whether any data has been recorded.\n     *\n     * @returns {boolean}\n     */\n    hasData() {\n        return !!this.data?.blobSize;\n    }\n\n    /**\n     * Start the recording\n     */\n    async startRecording() {\n        if (this.mediaRecorder) {\n            // Stop the existing recorder if it exists.\n            if (this.isRecording() || this.isPaused()) {\n                this.mediaRecorder.stop();\n            }\n\n            if (this.hasData()) {\n                const resetRecording = await this.recordAgainConfirmation();\n                if (!resetRecording) {\n                    // User cancelled at the confirmation to reset the data, so exit early.\n                    return;\n                }\n                this.setUploadButtonVisibility(false);\n                this.setPlayerState(false);\n                if (!this.stream.active) {\n                    await this.captureUserMedia();\n                }\n            }\n\n            this.mediaRecorder = null;\n        }\n\n        // The options for the recording codecs and bitrates.\n        this.mediaRecorder = new MediaRecorder(this.stream, this.getParsedRecordingOptions());\n\n        this.mediaRecorder.addEventListener('dataavailable', this.handleDataAvailable.bind(this));\n        this.mediaRecorder.addEventListener('stop', this.handleStopped.bind(this));\n        this.mediaRecorder.addEventListener('start', this.handleStarted.bind(this));\n        this.mediaRecorder.addEventListener('pause', this.handlePaused.bind(this));\n        this.mediaRecorder.addEventListener('resume', this.handleResume.bind(this));\n\n        this.data = {\n            chunks: [],\n            blobSize: 0\n        };\n        this.setupPlayerSource();\n        this.stopRequested = false;\n\n        // Capture in 50ms chunks.\n        this.mediaRecorder.start(50);\n    }\n\n    /**\n     * Confirm whether the user wants to reset the existing recoring.\n     *\n     * @returns {Promise<boolean>} Whether the user confirmed the reset.\n     */\n    async recordAgainConfirmation() {\n        try {\n            await saveCancelPromise(\n                await getString(\"recordagain_title\", component),\n                await getString(\"recordagain_desc\", component),\n                await getString(\"confirm_yes\", component)\n            );\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    /**\n     * Insert the HTML to embed the recording into the editor content.\n     *\n     * @param {string} source The URL to view the media.\n     */\n    async insertMedia(source) {\n        const {html} = await Templates.renderForPromise(\n            this.getEmbedTemplateName(),\n            this.getEmbedTemplateContext({\n                source,\n            })\n        );\n        this.editor.insertContent(html);\n    }\n\n    /**\n     * Add or modify the template parameters for the specified type.\n     *\n     * @param {Object} templateContext The Tempalte context to use\n     * @returns {Object} The finalised template context\n     */\n    getEmbedTemplateContext(templateContext) {\n        return templateContext;\n    }\n}\n"],"names":["_getRequireWildcardCache","e","WeakMap","r","t","_interopRequireWildcard","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_interopRequireDefault","_pending","_uploader","ModalEvents","Templates","_alert","_exports","stopRequested","buttonTimer","pauseTime","startTime","constructor","editor","modal","this","ready","checkAndWarnAboutBrowserCompatibility","config","getData","params","modalRoot","getRoot","startStopButton","querySelector","uploadButton","pauseResumeButton","setRecordButtonState","player","configurePlayer","registerEventListeners","captureUserMedia","prefetchContent","isReady","Error","name","getSupportedTypes","getRecordingOptions","getFileName","prefix","getMediaConstraints","playOnCapture","getTimeLimit","getEmbedTemplateName","getModalClass","getParsedRecordingOptions","compatTypes","reduce","result","type","push","replace","filter","window","MediaRecorder","isTypeSupported","options","length","mimeType","console","info","stream","navigator","mediaDevices","getUserMedia","handleCaptureSuccess","error","handleCaptureFailure","prefetchStrings","component","prefetchTemplates","displayAlert","title","content","pendingPromise","Pending","AlertModal","create","body","removeOnClose","show","resolve","srcObject","muted","play","setupPlayerSource","enabled","disabled","setRecordButtonVisibility","visible","getButtonContainer","classList","toggle","setPauseButtonVisibility","setUploadButtonState","setUploadButtonVisibility","setPlayerState","state","_this$getButtonContai","controls","subject","toLowerCase","getString","close","hide","addEventListener","handleModalClick","bind","on","outsideClick","outsideClickHandler","hidden","cleanupStream","requestRecordingStop","handlePlayerError","handlePlayerLoadedMetadata","message","addToast","isFinite","duration","currentTime","event","isRecording","isPaused","preventDefault","hasData","saveCancelPromise","button","target","closest","dataset","action","handleRecordingStartStopRequested","uploadRecording","handleRecordingPauseResumeRequested","startRecording","mediaRecorder","pause","resume","onMediaStopped","blob","Blob","data","chunks","src","URL","createObjectURL","setRecordButtonTextFromString","setPauseButtonTextFromString","fileName","Math","random","toString","fileURL","uploadFile","progress","setUploadButtonTextProgress","insertMedia","purpose","isBrowserCompatible","checkSecure","hasUserMedia","display","ModalClass","templateContext","isallowedpausing","isPausingAllowed","large","getStrings","map","key","then","_ref2","catch","_ref","isSecureContext","setStopRecordingButton","html","js","renderForPromise","getTimeRemaining","replaceNodeContents","startButtonTimer","updateRecordButtonTime","remaining","minutes","seconds","textContent","string","round","resetUploadButtonText","clearButtonTimer","clearInterval","pauseButtonTimer","Date","getTime","pauseDuration","setInterval","now","floor","formatter","Intl","NumberFormat","language","minimumIntegerDigits","format","getMaxUploadSize","maxrecsize","stopRecorder","stop","getTracks","track","readyState","forEach","handleStopped","handleStarted","handlePaused","handleResume","handleDataAvailable","newSize","blobSize","size","displayFileLimitHitMessage","_this$mediaRecorder","_this$mediaRecorder2","_this$data","recordAgainConfirmation","active","start","source","getEmbedTemplateContext","insertContent"],"mappings":"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"}