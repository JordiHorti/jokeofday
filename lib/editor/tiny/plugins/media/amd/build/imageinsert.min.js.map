{"version":3,"file":"imageinsert.min.js","sources":["../src/imageinsert.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny media plugin image insertion class for Moodle.\n *\n * @module      tiny_media/imageinsert\n * @copyright   2024 Meirza <meirza.arson@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Selectors from './selectors';\nimport Dropzone from 'core/dropzone';\nimport uploadFile from 'editor_tiny/uploader';\nimport {prefetchStrings} from 'core/prefetch';\nimport {getStrings} from 'core/str';\nimport {component} from \"./common\";\nimport {getFilePicker} from 'editor_tiny/options';\nimport {displayFilepicker} from 'editor_tiny/utils';\nimport {ImageDetails} from 'tiny_media/imagedetails';\nimport {\n    showElements,\n    hideElements,\n    bodyImageDetails,\n    footerImageDetails,\n} from 'tiny_media/imagehelpers';\n\nprefetchStrings('tiny_media', [\n    'insertimage',\n    'enterurl',\n    'enterurlor',\n    'imageurlrequired',\n    'uploading',\n    'loading',\n    'addfilesdrop',\n    'sizecustom_help',\n]);\n\nexport class ImageInsert {\n\n    constructor(\n        root,\n        editor,\n        currentModal,\n        canShowFilePicker,\n        canShowDropZone,\n    ) {\n        this.root = root;\n        this.editor = editor;\n        this.currentModal = currentModal;\n        this.canShowFilePicker = canShowFilePicker;\n        this.canShowDropZone = canShowDropZone;\n    }\n\n    init = async function() {\n        // Get the localization lang strings and turn them into object.\n        const langStringKeys = [\n            'insertimage',\n            'enterurl',\n            'enterurlor',\n            'imageurlrequired',\n            'uploading',\n            'loading',\n            'addfilesdrop',\n            'sizecustom_help',\n        ];\n        const langStringvalues = await getStrings([...langStringKeys].map((key) => ({key, component})));\n\n        // Convert array to object.\n        this.langStrings = Object.fromEntries(langStringKeys.map((key, index) => [key, langStringvalues[index]]));\n        this.currentModal.setTitle(this.langStrings.insertimage);\n        if (this.canShowDropZone) {\n            const dropZoneEle = document.querySelector(Selectors.IMAGE.elements.dropzoneContainer);\n\n            // Accepted types can be either a string or an array.\n            let acceptedTypes = getFilePicker(this.editor, 'image').accepted_types;\n            if (Array.isArray(acceptedTypes)) {\n                acceptedTypes = acceptedTypes.join(',');\n            }\n\n            const dropZone = new Dropzone(\n                dropZoneEle,\n                acceptedTypes,\n                files => {\n                    this.handleUploadedFile(files);\n                }\n            );\n            dropZone.setLabel(this.langStrings.addfilesdrop);\n            dropZone.init();\n        }\n        await this.registerEventListeners();\n    };\n\n    /**\n     * Enables or disables the URL-related buttons in the footer based on the current URL and input value.\n     */\n    toggleUrlButton() {\n        const urlInput = this.root.querySelector(Selectors.IMAGE.elements.url);\n        const url = urlInput.value;\n        const addUrl = this.root.querySelector(Selectors.IMAGE.actions.addUrl);\n        addUrl.disabled = !(url !== \"\" && this.isValidUrl(url));\n    }\n\n    /**\n     * Check if given string is a valid URL.\n     *\n     * @param {String} urlString URL the link will point to.\n     * @returns {boolean} True is valid, otherwise false.\n     */\n    isValidUrl = urlString => {\n        const urlPattern = new RegExp('^(https?:\\\\/\\\\/)?' + // Protocol.\n                                    '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|' + // Domain name.\n                                    '((\\\\d{1,3}\\\\.){3}\\\\d{1,3})|localhost)' + // OR ip (v4) address, localhost.\n                                    '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*'); // Port and path.\n        return !!urlPattern.test(urlString);\n    };\n\n    /**\n     * Handles changes in the image URL input field and loads a preview of the image if the URL has changed.\n     */\n    urlChanged() {\n        hideElements(Selectors.IMAGE.elements.urlWarning, this.root);\n        const input = this.root.querySelector(Selectors.IMAGE.elements.url);\n        if (input.value && input.value !== this.currentUrl) {\n            this.loadPreviewImage(input.value);\n        }\n    }\n\n    /**\n     * Loads and displays a preview image based on the provided URL, and handles image loading events.\n     *\n     * @param {string} url - The URL of the image to load and display.\n     */\n    loadPreviewImage = function(url) {\n        this.startImageLoading();\n        this.currentUrl = url;\n        const image = new Image();\n        image.src = url;\n        image.addEventListener('error', () => {\n            const urlWarningLabelEle = this.root.querySelector(Selectors.IMAGE.elements.urlWarning);\n            urlWarningLabelEle.innerHTML = this.langStrings.imageurlrequired;\n            showElements(Selectors.IMAGE.elements.urlWarning, this.root);\n            this.currentUrl = \"\";\n            this.stopImageLoading();\n        });\n\n        image.addEventListener('load', () => {\n            let templateContext = {};\n            templateContext.sizecustomhelpicon = {text: this.langStrings.sizecustom_help};\n            Promise.all([bodyImageDetails(templateContext, this.root), footerImageDetails(templateContext, this.root)])\n                .then(() => {\n                    const imagedetails = new ImageDetails(\n                        this.root,\n                        this.editor,\n                        this.currentModal,\n                        this.canShowFilePicker,\n                        this.canShowDropZone,\n                        this.currentUrl,\n                        image,\n                    );\n                    imagedetails.init();\n                    return;\n                }).then(() => {\n                    this.stopImageLoading();\n                    return;\n                })\n                .catch(error => {\n                    window.console.log(error);\n                });\n        });\n    };\n\n    /**\n     * Displays the upload loader and disables UI elements while loading a file.\n     */\n    startImageLoading() {\n        showElements(Selectors.IMAGE.elements.loaderIcon, this.root);\n        const elementsToHide = [\n            Selectors.IMAGE.elements.insertImage,\n            Selectors.IMAGE.elements.urlWarning,\n            Selectors.IMAGE.elements.modalFooter,\n        ];\n        hideElements(elementsToHide, this.root);\n    }\n\n    /**\n     * Displays the upload loader and disables UI elements while loading a file.\n     */\n    stopImageLoading() {\n        hideElements(Selectors.IMAGE.elements.loaderIcon, this.root);\n        const elementsToShow = [\n            Selectors.IMAGE.elements.insertImage,\n            Selectors.IMAGE.elements.modalFooter,\n        ];\n        showElements(elementsToShow, this.root);\n    }\n\n    filePickerCallback(params) {\n        if (params.url) {\n            this.loadPreviewImage(params.url);\n        }\n    }\n\n    /**\n     * Updates the content of the loader icon.\n     *\n     * @param {HTMLElement} root - The root element containing the loader icon.\n     * @param {object} langStrings - An object containing language strings.\n     * @param {number|null} progress - The progress percentage (optional).\n     * @returns {void}\n     */\n    updateLoaderIcon = (root, langStrings, progress = null) => {\n        const loaderIcon = root.querySelector(Selectors.IMAGE.elements.loaderIconContainer + ' div');\n        loaderIcon.innerHTML = progress !== null ? `${langStrings.uploading} ${Math.round(progress)}%` : langStrings.loading;\n    };\n\n    /**\n     * Handles the uploaded file, initiates the upload process, and updates the UI during the upload.\n     *\n     * @param {FileList} files - The list of files to upload (usually from a file input field).\n     * @returns {Promise<void>} A promise that resolves when the file is uploaded and processed.\n     */\n    handleUploadedFile = async(files) => {\n        try {\n            this.startImageLoading();\n            const fileURL = await uploadFile(this.editor, 'image', files[0], files[0].name, (progress) => {\n                this.updateLoaderIcon(this.root, this.langStrings, progress);\n            });\n            // Set the loader icon content to \"loading\" after the file upload completes.\n            this.updateLoaderIcon(this.root, this.langStrings);\n            this.filePickerCallback({url: fileURL});\n        } catch (error) {\n            // Handle the error.\n            const urlWarningLabelEle = this.root.querySelector(Selectors.IMAGE.elements.urlWarning);\n            urlWarningLabelEle.innerHTML = error.error !== undefined ? error.error : error;\n            showElements(Selectors.IMAGE.elements.urlWarning, this.root);\n            this.stopImageLoading();\n        }\n    };\n\n    registerEventListeners() {\n        this.root.addEventListener('click', async(e) => {\n            const addUrlEle = e.target.closest(Selectors.IMAGE.actions.addUrl);\n            if (addUrlEle) {\n                this.urlChanged();\n            }\n\n            const imageBrowserAction = e.target.closest(Selectors.IMAGE.actions.imageBrowser);\n            if (imageBrowserAction && this.canShowFilePicker) {\n                e.preventDefault();\n                const params = await displayFilepicker(this.editor, 'image');\n                this.filePickerCallback(params);\n            }\n        });\n\n        this.root.addEventListener('input', (e) => {\n            const urlEle = e.target.closest(Selectors.IMAGE.elements.url);\n            if (urlEle) {\n                this.toggleUrlButton();\n            }\n        });\n\n        const fileInput = this.root.querySelector(Selectors.IMAGE.elements.fileInput);\n        if (fileInput) {\n            fileInput.addEventListener('change', () => {\n                this.handleUploadedFile(fileInput.files);\n            });\n        }\n    }\n}"],"names":["_interopRequireDefault","e","__esModule","default","_selectors","_dropzone","_uploader","prefetchStrings","_exports","ImageInsert","constructor","root","editor","currentModal","canShowFilePicker","canShowDropZone","this","init","async","langStringKeys","langStringvalues","getStrings","map","key","component","langStrings","Object","fromEntries","index","setTitle","insertimage","dropZoneEle","document","querySelector","Selectors","IMAGE","elements","dropzoneContainer","acceptedTypes","getFilePicker","accepted_types","Array","isArray","join","dropZone","Dropzone","files","handleUploadedFile","setLabel","addfilesdrop","registerEventListeners","toggleUrlButton","url","value","actions","addUrl","disabled","isValidUrl","urlString","RegExp","test","urlChanged","hideElements","urlWarning","input","currentUrl","loadPreviewImage","startImageLoading","image","Image","src","addEventListener","innerHTML","imageurlrequired","showElements","stopImageLoading","templateContext","sizecustomhelpicon","text","sizecustom_help","Promise","all","bodyImageDetails","footerImageDetails","then","ImageDetails","catch","error","window","console","log","loaderIcon","elementsToHide","insertImage","modalFooter","elementsToShow","filePickerCallback","params","updateLoaderIcon","progress","arguments","length","undefined","loaderIconContainer","uploading","Math","round","loading","fileURL","uploadFile","name","target","closest","imageBrowser","preventDefault","displayFilepicker","fileInput"],"mappings":"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"}