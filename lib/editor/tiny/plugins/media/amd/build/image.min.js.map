{"version":3,"file":"image.min.js","sources":["../src/image.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny Media plugin Image class for Moodle.\n *\n * @module      tiny_media/image\n * @copyright   2022 Huong Nguyen <huongnv13@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Selectors from './selectors';\nimport ImageModal from './imagemodal';\nimport {getImagePermissions} from './options';\nimport {getFilePicker} from 'editor_tiny/options';\nimport {ImageInsert} from 'tiny_media/imageinsert';\nimport {ImageDetails} from 'tiny_media/imagedetails';\nimport {prefetchStrings} from 'core/prefetch';\nimport {getString} from 'core/str';\nimport {\n    bodyImageInsert,\n    footerImageInsert,\n    bodyImageDetails,\n    footerImageDetails,\n    showElements,\n    hideElements,\n    isPercentageValue,\n} from 'tiny_media/imagehelpers';\n\nprefetchStrings('tiny_media', [\n    'imageurlrequired',\n    'sizecustom_help',\n]);\n\nexport default class MediaImage {\n    canShowFilePicker = false;\n    editor = null;\n    currentModal = null;\n    /**\n     * @type {HTMLElement|null} The root element.\n     */\n    root = null;\n\n    constructor(editor) {\n        const permissions = getImagePermissions(editor);\n        const options = getFilePicker(editor, 'image');\n        // Indicates whether the file picker can be shown.\n        this.canShowFilePicker = permissions.filepicker\n            && (typeof options !== 'undefined')\n            && Object.keys(options.repositories).length > 0;\n        // Indicates whether the drop zone area can be shown.\n        this.canShowDropZone = (typeof options !== 'undefined') &&\n            Object.values(options.repositories).some(repository => repository.type === 'upload');\n\n        this.editor = editor;\n    }\n\n    async displayDialogue() {\n        const currentImageData = await this.getCurrentImageData();\n        this.currentModal = await ImageModal.create();\n        this.root = this.currentModal.getRoot()[0];\n        if (currentImageData && currentImageData.src) {\n            this.loadPreviewImage(currentImageData.src);\n        } else {\n            this.loadInsertImage();\n        }\n    }\n\n    /**\n     * Displays an insert image view asynchronously.\n     *\n     * @returns {Promise<void>}\n     */\n    loadInsertImage = async function() {\n        const templateContext = {\n            elementid: this.editor.id,\n            showfilepicker: this.canShowFilePicker,\n            showdropzone: this.canShowDropZone,\n        };\n\n        Promise.all([bodyImageInsert(templateContext, this.root), footerImageInsert(templateContext, this.root)])\n            .then(() => {\n                const imageinsert = new ImageInsert(\n                    this.root,\n                    this.editor,\n                    this.currentModal,\n                    this.canShowFilePicker,\n                    this.canShowDropZone,\n                );\n                imageinsert.init();\n                return;\n            })\n            .catch(error => {\n                window.console.log(error);\n            });\n    };\n\n    async getTemplateContext(data) {\n        return {\n            elementid: this.editor.id,\n            showfilepicker: this.canShowFilePicker,\n            ...data,\n        };\n    }\n\n    async getCurrentImageData() {\n        const selectedImageProperties = this.getSelectedImageProperties();\n        if (!selectedImageProperties) {\n            return {};\n        }\n\n        const properties = {...selectedImageProperties};\n\n        if (properties.src) {\n            properties.haspreview = true;\n        }\n\n        if (!properties.alt) {\n            properties.presentation = true;\n        }\n\n        return properties;\n    }\n\n    /**\n     * Asynchronously loads and previews an image from the provided URL.\n     *\n     * @param {string} url - The URL of the image to load and preview.\n     * @returns {Promise<void>}\n     */\n    loadPreviewImage = async function(url) {\n        this.startImageLoading();\n        const image = new Image();\n        image.src = url;\n        image.addEventListener('error', async() => {\n            const urlWarningLabelEle = this.root.querySelector(Selectors.IMAGE.elements.urlWarning);\n            urlWarningLabelEle.innerHTML = await getString('imageurlrequired', 'tiny_media');\n            showElements(Selectors.IMAGE.elements.urlWarning, this.root);\n            this.stopImageLoading();\n        });\n\n        image.addEventListener('load', async() => {\n            const currentImageData = await this.getCurrentImageData();\n            let templateContext = await this.getTemplateContext(currentImageData);\n            templateContext.sizecustomhelpicon = {text: await getString('sizecustom_help', 'tiny_media')};\n\n            Promise.all([bodyImageDetails(templateContext, this.root), footerImageDetails(templateContext, this.root)])\n                .then(() => {\n                    this.stopImageLoading();\n                    return;\n                })\n                .then(() => {\n                    const imagedetails = new ImageDetails(\n                        this.root,\n                        this.editor,\n                        this.currentModal,\n                        this.canShowFilePicker,\n                        this.canShowDropZone,\n                        url,\n                        image,\n                    );\n                    imagedetails.init();\n                    return;\n                })\n                .catch(error => {\n                    window.console.log(error);\n                });\n        });\n    };\n\n    getSelectedImageProperties() {\n        const image = this.getSelectedImage();\n        if (!image) {\n            this.selectedImage = null;\n            return null;\n        }\n\n        const properties = {\n            src: null,\n            alt: null,\n            width: null,\n            height: null,\n            presentation: false,\n            customStyle: '', // Custom CSS styles applied to the image.\n        };\n\n        const getImageHeight = (image) => {\n            if (!isPercentageValue(String(image.height))) {\n                return parseInt(image.height, 10);\n            }\n\n            return image.height;\n        };\n\n        const getImageWidth = (image) => {\n            if (!isPercentageValue(String(image.width))) {\n                return parseInt(image.width, 10);\n            }\n\n            return image.width;\n        };\n\n        // Get the current selection.\n        this.selectedImage = image;\n\n        properties.customStyle = image.style.cssText;\n\n        const width = getImageWidth(image);\n        if (width !== 0) {\n            properties.width = width;\n        }\n\n        const height = getImageHeight(image);\n        if (height !== 0) {\n            properties.height = height;\n        }\n\n        properties.src = image.getAttribute('src');\n        properties.alt = image.getAttribute('alt') || '';\n        properties.presentation = (image.getAttribute('role') === 'presentation');\n\n        return properties;\n    }\n\n    getSelectedImage() {\n        const imgElm = this.editor.selection.getNode();\n        const figureElm = this.editor.dom.getParent(imgElm, 'figure.image');\n        if (figureElm) {\n            return this.editor.dom.select('img', figureElm)[0];\n        }\n\n        if (imgElm && (imgElm.nodeName.toUpperCase() !== 'IMG' || this.isPlaceholderImage(imgElm))) {\n            return null;\n        }\n        return imgElm;\n    }\n\n    isPlaceholderImage(imgElm) {\n        if (imgElm.nodeName.toUpperCase() !== 'IMG') {\n            return false;\n        }\n\n        return (imgElm.hasAttribute('data-mce-object') || imgElm.hasAttribute('data-mce-placeholder'));\n    }\n\n    /**\n     * Displays the upload loader and disables UI elements while loading a file.\n     */\n    startImageLoading() {\n        showElements(Selectors.IMAGE.elements.loaderIcon, this.root);\n        hideElements(Selectors.IMAGE.elements.insertImage, this.root);\n    }\n\n    /**\n     * Displays the upload loader and disables UI elements while loading a file.\n     */\n    stopImageLoading() {\n        hideElements(Selectors.IMAGE.elements.loaderIcon, this.root);\n        showElements(Selectors.IMAGE.elements.insertImage, this.root);\n    }\n}\n"],"names":["_interopRequireDefault","e","__esModule","default","_selectors","_imagemodal","prefetchStrings","_exports","canShowFilePicker","editor","currentModal","root","constructor","permissions","getImagePermissions","options","getFilePicker","this","filepicker","Object","keys","repositories","length","canShowDropZone","values","some","repository","type","displayDialogue","currentImageData","getCurrentImageData","ImageModal","create","getRoot","src","loadPreviewImage","loadInsertImage","async","templateContext","elementid","id","showfilepicker","showdropzone","Promise","all","bodyImageInsert","footerImageInsert","then","ImageInsert","init","catch","error","window","console","log","getTemplateContext","data","selectedImageProperties","getSelectedImageProperties","properties","haspreview","alt","presentation","url","startImageLoading","image","Image","addEventListener","querySelector","Selectors","IMAGE","elements","urlWarning","innerHTML","getString","showElements","stopImageLoading","sizecustomhelpicon","text","bodyImageDetails","footerImageDetails","ImageDetails","getSelectedImage","selectedImage","width","height","customStyle","style","cssText","isPercentageValue","String","parseInt","getImageWidth","getImageHeight","getAttribute","imgElm","selection","getNode","figureElm","dom","getParent","select","nodeName","toUpperCase","isPlaceholderImage","hasAttribute","loaderIcon","hideElements","insertImage"],"mappings":"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"}