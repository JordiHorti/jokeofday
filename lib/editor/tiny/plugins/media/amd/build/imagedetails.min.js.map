{"version":3,"file":"imagedetails.min.js","sources":["../src/imagedetails.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny media plugin image details class for Moodle.\n *\n * @module      tiny_media/imagedetails\n * @copyright   2024 Meirza <meirza.arson@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Config from 'core/config';\nimport ModalEvents from 'core/modal_events';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport Selectors from './selectors';\nimport Templates from 'core/templates';\nimport {getString} from 'core/str';\nimport {ImageInsert} from 'tiny_media/imageinsert';\nimport {\n    bodyImageInsert,\n    footerImageInsert,\n    showElements,\n    hideElements,\n    isPercentageValue,\n} from 'tiny_media/imagehelpers';\n\nexport class ImageDetails {\n    DEFAULTS = {\n        WIDTH: 160,\n        HEIGHT: 160,\n    };\n\n    rawImageDimensions = null;\n\n    constructor(\n        root,\n        editor,\n        currentModal,\n        canShowFilePicker,\n        canShowDropZone,\n        currentUrl,\n        image,\n    ) {\n        this.root = root;\n        this.editor = editor;\n        this.currentModal = currentModal;\n        this.canShowFilePicker = canShowFilePicker;\n        this.canShowDropZone = canShowDropZone;\n        this.currentUrl = currentUrl;\n        this.image = image;\n    }\n\n    init = function() {\n        this.currentModal.setTitle(getString('imagedetails', 'tiny_media'));\n        this.imageTypeChecked();\n        this.presentationChanged();\n        this.storeImageDimensions(this.image);\n        this.setImageDimensions();\n        this.registerEventListeners();\n    };\n\n    /**\n     * Loads and displays a preview image based on the provided URL, and handles image loading events.\n     */\n    loadInsertImage = async function() {\n        const templateContext = {\n            elementid: this.editor.id,\n            showfilepicker: this.canShowFilePicker,\n            showdropzone: this.canShowDropZone,\n        };\n\n        Promise.all([bodyImageInsert(templateContext, this.root), footerImageInsert(templateContext, this.root)])\n            .then(() => {\n                const imageinsert = new ImageInsert(\n                    this.root,\n                    this.editor,\n                    this.currentModal,\n                    this.canShowFilePicker,\n                    this.canShowDropZone,\n                );\n                imageinsert.init();\n                return;\n            })\n            .catch(error => {\n                window.console.log(error);\n            });\n    };\n\n    storeImageDimensions(image) {\n        // Store dimensions of the raw image, falling back to defaults for images without dimensions (e.g. SVG).\n        this.rawImageDimensions = {\n            width: image.width || this.DEFAULTS.WIDTH,\n            height: image.height || this.DEFAULTS.HEIGHT,\n        };\n\n        const getCurrentWidth = (element) => {\n            if (element.value === '') {\n                element.value = this.rawImageDimensions.width;\n            }\n            return element.value;\n        };\n\n        const getCurrentHeight = (element) => {\n            if (element.value === '') {\n                element.value = this.rawImageDimensions.height;\n            }\n            return element.value;\n        };\n\n        const widthInput = this.root.querySelector(Selectors.IMAGE.elements.width);\n        const currentWidth = getCurrentWidth(widthInput);\n\n        const heightInput = this.root.querySelector(Selectors.IMAGE.elements.height);\n        const currentHeight = getCurrentHeight(heightInput);\n\n        const preview = this.root.querySelector(Selectors.IMAGE.elements.preview);\n        preview.setAttribute('src', image.src);\n        preview.style.display = '';\n\n        // Ensure the checkbox always in unchecked status when an image loads at first.\n        const constrain = this.root.querySelector(Selectors.IMAGE.elements.constrain);\n        if (isPercentageValue(currentWidth) && isPercentageValue(currentHeight)) {\n            constrain.checked = currentWidth === currentHeight;\n        } else if (image.width === 0 || image.height === 0) {\n            // If we don't have both dimensions of the image, we can't auto-size it, so disable control.\n            constrain.disabled = 'disabled';\n        } else {\n            // This is the same as comparing to 3 decimal places.\n            const widthRatio = Math.round(100 * parseInt(currentWidth, 10) / image.width);\n            const heightRatio = Math.round(100 * parseInt(currentHeight, 10) / image.height);\n            constrain.checked = widthRatio === heightRatio;\n        }\n\n        /**\n         * Sets the selected size option based on current width and height values.\n         *\n         * @param {number} currentWidth - The current width value.\n         * @param {number} currentHeight - The current height value.\n         */\n        const setSelectedSize = (currentWidth, currentHeight) => {\n            if (this.rawImageDimensions.width === currentWidth &&\n                this.rawImageDimensions.height === currentHeight\n            ) {\n                this.currentWidth = this.rawImageDimensions.width;\n                this.currentHeight = this.rawImageDimensions.height;\n                this.sizeChecked('original');\n            } else {\n                this.currentWidth = currentWidth;\n                this.currentHeight = currentHeight;\n                this.sizeChecked('custom');\n            }\n        };\n\n        setSelectedSize(Number(currentWidth), Number(currentHeight));\n    }\n\n    /**\n     * Handles the selection of image size options and updates the form inputs accordingly.\n     *\n     * @param {string} option - The selected image size option (\"original\" or \"custom\").\n     */\n    sizeChecked(option) {\n        const widthInput = this.root.querySelector(Selectors.IMAGE.elements.width);\n        const heightInput = this.root.querySelector(Selectors.IMAGE.elements.height);\n        if (option === \"original\") {\n            this.sizeOriginalChecked();\n            widthInput.value = this.rawImageDimensions.width;\n            heightInput.value = this.rawImageDimensions.height;\n        } else if (option === \"custom\") {\n            this.sizeCustomChecked();\n            widthInput.value = this.currentWidth;\n            heightInput.value = this.currentHeight;\n\n            // If the current size is equal to the original size, then check the Keep proportion checkbox.\n            if (this.currentWidth === this.rawImageDimensions.width && this.currentHeight === this.rawImageDimensions.height) {\n                const constrainField = this.root.querySelector(Selectors.IMAGE.elements.constrain);\n                constrainField.checked = true;\n            }\n        }\n        this.autoAdjustSize();\n    }\n\n    autoAdjustSize(forceHeight = false) {\n        // If we do not know the image size, do not do anything.\n        if (!this.rawImageDimensions) {\n            return;\n        }\n\n        const widthField = this.root.querySelector(Selectors.IMAGE.elements.width);\n        const heightField = this.root.querySelector(Selectors.IMAGE.elements.height);\n\n        const normalizeFieldData = (fieldData) => {\n            fieldData.isPercentageValue = !!isPercentageValue(fieldData.field.value);\n            if (fieldData.isPercentageValue) {\n                fieldData.percentValue = parseInt(fieldData.field.value, 10);\n                fieldData.pixelSize = this.rawImageDimensions[fieldData.type] / 100 * fieldData.percentValue;\n            } else {\n                fieldData.pixelSize = parseInt(fieldData.field.value, 10);\n                fieldData.percentValue = fieldData.pixelSize / this.rawImageDimensions[fieldData.type] * 100;\n            }\n\n            return fieldData;\n        };\n\n        const getKeyField = () => {\n            const getValue = () => {\n                if (forceHeight) {\n                    return {\n                        field: heightField,\n                        type: 'height',\n                    };\n                } else {\n                    return {\n                        field: widthField,\n                        type: 'width',\n                    };\n                }\n            };\n\n            const currentValue = getValue();\n            if (currentValue.field.value === '') {\n                currentValue.field.value = this.rawImageDimensions[currentValue.type];\n            }\n\n            return normalizeFieldData(currentValue);\n        };\n\n        const getRelativeField = () => {\n            if (forceHeight) {\n                return normalizeFieldData({\n                    field: widthField,\n                    type: 'width',\n                });\n            } else {\n                return normalizeFieldData({\n                    field: heightField,\n                    type: 'height',\n                });\n            }\n        };\n\n        // Now update with the new values.\n        const constrainField = this.root.querySelector(Selectors.IMAGE.elements.constrain);\n        if (constrainField.checked) {\n            const keyField = getKeyField();\n            const relativeField = getRelativeField();\n            // We are keeping the image in proportion.\n            // Calculate the size for the relative field.\n            if (keyField.isPercentageValue) {\n                // In proportion, so the percentages are the same.\n                relativeField.field.value = keyField.field.value;\n                relativeField.percentValue = keyField.percentValue;\n            } else {\n                relativeField.pixelSize = Math.round(\n                    keyField.pixelSize / this.rawImageDimensions[keyField.type] * this.rawImageDimensions[relativeField.type]\n                );\n                relativeField.field.value = relativeField.pixelSize;\n            }\n        }\n\n        // Store the custom width and height to reuse.\n        this.currentWidth = Number(widthField.value) !== this.rawImageDimensions.width ? widthField.value : this.currentWidth;\n        this.currentHeight = Number(heightField.value) !== this.rawImageDimensions.height ? heightField.value : this.currentHeight;\n    }\n\n    /**\n     * Sets the dimensions of the image preview element based on user input and constraints.\n     */\n    setImageDimensions = () => {\n        const imagePreviewBox = this.root.querySelector(Selectors.IMAGE.elements.previewBox);\n        const image = this.root.querySelector(Selectors.IMAGE.elements.preview);\n        const widthField = this.root.querySelector(Selectors.IMAGE.elements.width);\n        const heightField = this.root.querySelector(Selectors.IMAGE.elements.height);\n\n        const updateImageDimensions = () => {\n            // Get the latest dimensions of the preview box for responsiveness.\n            const boxWidth = imagePreviewBox.clientWidth;\n            const boxHeight = imagePreviewBox.clientHeight;\n            // Get the new width and height for the image.\n            const dimensions = this.fitSquareIntoBox(widthField.value, heightField.value, boxWidth, boxHeight);\n            image.style.width = `${dimensions.width}px`;\n            image.style.height = `${dimensions.height}px`;\n        };\n        // If the client size is zero, then get the new dimensions once the modal is shown.\n        if (imagePreviewBox.clientWidth === 0) {\n            // Call the shown event.\n            this.currentModal.getRoot().on(ModalEvents.shown, () => {\n                updateImageDimensions();\n            });\n        } else {\n            updateImageDimensions();\n        }\n    };\n\n    /**\n     * Handles the selection of the \"Original Size\" option and updates the form elements accordingly.\n     */\n    sizeOriginalChecked() {\n        this.root.querySelector(Selectors.IMAGE.elements.sizeOriginal).checked = true;\n        this.root.querySelector(Selectors.IMAGE.elements.sizeCustom).checked = false;\n        hideElements(Selectors.IMAGE.elements.properties, this.root);\n    }\n\n    /**\n     * Handles the selection of the \"Custom Size\" option and updates the form elements accordingly.\n     */\n    sizeCustomChecked() {\n        this.root.querySelector(Selectors.IMAGE.elements.sizeOriginal).checked = false;\n        this.root.querySelector(Selectors.IMAGE.elements.sizeCustom).checked = true;\n        showElements(Selectors.IMAGE.elements.properties, this.root);\n    }\n\n    /**\n     * Handles changes in the image presentation checkbox and enables/disables the image alt text input accordingly.\n     */\n    presentationChanged() {\n        const presentation = this.root.querySelector(Selectors.IMAGE.elements.presentation);\n        const alt = this.root.querySelector(Selectors.IMAGE.elements.alt);\n        alt.disabled = presentation.checked;\n\n        // Counting the image description characters.\n        this.handleKeyupCharacterCount();\n    }\n\n    /**\n     * This function checks whether an image URL is local (within the same website's domain) or external (from an external source).\n     * Depending on the result, it dynamically updates the visibility and content of HTML elements in a user interface.\n     * If the image is local then we only show it's filename.\n     * If the image is external then it will show full URL and it can be updated.\n     */\n    imageTypeChecked() {\n        const regex = new RegExp(`${Config.wwwroot}`);\n\n        // True if the URL is from external, otherwise false.\n        const isExternalUrl = regex.test(this.currentUrl) === false;\n\n        // Hide the URL input.\n        hideElements(Selectors.IMAGE.elements.url, this.root);\n\n        if (!isExternalUrl) {\n            // Split the URL by '/' to get an array of segments.\n            const segments = this.currentUrl.split('/');\n            // Get the last segment, which should be the filename.\n            const filename = segments.pop().split('?')[0];\n            // Show the file name.\n            this.setFilenameLabel(decodeURI(filename));\n        } else {\n\n            this.setFilenameLabel(decodeURI(this.currentUrl));\n        }\n    }\n\n    /**\n     * Set the string for the URL label element.\n     *\n     * @param {string} label - The label text to set.\n     */\n    setFilenameLabel(label) {\n        const urlLabelEle = this.root.querySelector(Selectors.IMAGE.elements.fileNameLabel);\n        if (urlLabelEle) {\n            urlLabelEle.innerHTML = label;\n            urlLabelEle.setAttribute(\"title\", label);\n        }\n    }\n\n    toggleAriaInvalid(selectors, predicate) {\n        selectors.forEach((selector) => {\n            const elements = this.root.querySelectorAll(selector);\n            elements.forEach((element) => element.setAttribute('aria-invalid', predicate));\n        });\n    }\n\n    hasErrorUrlField() {\n        const urlError = this.currentUrl === '';\n        if (urlError) {\n            showElements(Selectors.IMAGE.elements.urlWarning, this.root);\n        } else {\n            hideElements(Selectors.IMAGE.elements.urlWarning, this.root);\n        }\n        this.toggleAriaInvalid([Selectors.IMAGE.elements.url], urlError);\n\n        return urlError;\n    }\n\n    hasErrorAltField() {\n        const alt = this.root.querySelector(Selectors.IMAGE.elements.alt).value;\n        const presentation = this.root.querySelector(Selectors.IMAGE.elements.presentation).checked;\n        const imageAltError = alt === '' && !presentation;\n        if (imageAltError) {\n            showElements(Selectors.IMAGE.elements.altWarning, this.root);\n        } else {\n            hideElements(Selectors.IMAGE.elements.urlWaaltWarningrning, this.root);\n        }\n        this.toggleAriaInvalid([Selectors.IMAGE.elements.alt, Selectors.IMAGE.elements.presentation], imageAltError);\n\n        return imageAltError;\n    }\n\n    updateWarning() {\n        const urlError = this.hasErrorUrlField();\n        const imageAltError = this.hasErrorAltField();\n\n        return urlError || imageAltError;\n    }\n\n    getImageContext() {\n        // Check if there are any accessibility issues.\n        if (this.updateWarning()) {\n            return null;\n        }\n\n        const classList = [];\n        const constrain = this.root.querySelector(Selectors.IMAGE.elements.constrain).checked;\n        const sizeOriginal = this.root.querySelector(Selectors.IMAGE.elements.sizeOriginal).checked;\n        if (constrain || sizeOriginal) {\n            // If the Auto size checkbox is checked or the Original size is checked, then apply the responsive class.\n            classList.push(Selectors.IMAGE.styles.responsive);\n        } else {\n            // Otherwise, remove it.\n            classList.pop(Selectors.IMAGE.styles.responsive);\n        }\n\n        return {\n            url: this.currentUrl,\n            alt: this.root.querySelector(Selectors.IMAGE.elements.alt).value,\n            width: this.root.querySelector(Selectors.IMAGE.elements.width).value,\n            height: this.root.querySelector(Selectors.IMAGE.elements.height).value,\n            presentation: this.root.querySelector(Selectors.IMAGE.elements.presentation).checked,\n            customStyle: this.root.querySelector(Selectors.IMAGE.elements.customStyle).value,\n            classlist: classList.join(' '),\n        };\n    }\n\n    setImage() {\n        const pendingPromise = new Pending('tiny_media:setImage');\n        const url = this.currentUrl;\n        if (url === '') {\n            return;\n        }\n\n        // Check if there are any accessibility issues.\n        if (this.updateWarning()) {\n            pendingPromise.resolve();\n            return;\n        }\n\n        // Check for invalid width or height.\n        const width = this.root.querySelector(Selectors.IMAGE.elements.width).value;\n        if (!isPercentageValue(width) && isNaN(parseInt(width, 10))) {\n            this.root.querySelector(Selectors.IMAGE.elements.width).focus();\n            pendingPromise.resolve();\n            return;\n        }\n\n        const height = this.root.querySelector(Selectors.IMAGE.elements.height).value;\n        if (!isPercentageValue(height) && isNaN(parseInt(height, 10))) {\n            this.root.querySelector(Selectors.IMAGE.elements.height).focus();\n            pendingPromise.resolve();\n            return;\n        }\n\n        Templates.render('tiny_media/image', this.getImageContext())\n        .then((html) => {\n            this.editor.insertContent(html);\n            this.currentModal.destroy();\n            pendingPromise.resolve();\n\n            return html;\n        })\n        .catch(error => {\n            window.console.log(error);\n        });\n    }\n\n    /**\n     * Deletes the image after confirming with the user and loads the insert image page.\n     */\n    deleteImage() {\n        Notification.deleteCancelPromise(\n            getString('deleteimage', 'tiny_media'),\n            getString('deleteimagewarning', 'tiny_media'),\n        ).then(() => {\n            hideElements(Selectors.IMAGE.elements.altWarning, this.root);\n            // Removing the image in the preview will bring the user to the insert page.\n            this.loadInsertImage();\n            return;\n        }).catch(error => {\n            window.console.log(error);\n        });\n    }\n\n    registerEventListeners() {\n        const submitAction = this.root.querySelector(Selectors.IMAGE.actions.submit);\n        submitAction.addEventListener('click', (e) => {\n            e.preventDefault();\n            this.setImage();\n        });\n\n        const deleteImageEle = this.root.querySelector(Selectors.IMAGE.actions.deleteImage);\n        deleteImageEle.addEventListener('click', () => {\n            this.deleteImage();\n        });\n        deleteImageEle.addEventListener(\"keydown\", (e) => {\n            if (e.key === \"Enter\") {\n                this.deleteImage();\n            }\n        });\n\n        this.root.addEventListener('change', (e) => {\n            const presentationEle = e.target.closest(Selectors.IMAGE.elements.presentation);\n            if (presentationEle) {\n                this.presentationChanged();\n            }\n\n            const constrainEle = e.target.closest(Selectors.IMAGE.elements.constrain);\n            if (constrainEle) {\n                this.autoAdjustSize();\n            }\n\n            const sizeOriginalEle = e.target.closest(Selectors.IMAGE.elements.sizeOriginal);\n            if (sizeOriginalEle) {\n                this.sizeChecked('original');\n            }\n\n            const sizeCustomEle = e.target.closest(Selectors.IMAGE.elements.sizeCustom);\n            if (sizeCustomEle) {\n                this.sizeChecked('custom');\n            }\n        });\n\n        this.root.addEventListener('blur', (e) => {\n            if (e.target.nodeType === Node.ELEMENT_NODE) {\n\n                const presentationEle = e.target.closest(Selectors.IMAGE.elements.presentation);\n                if (presentationEle) {\n                    this.presentationChanged();\n                }\n            }\n        }, true);\n\n        // Character count.\n        this.root.addEventListener('keyup', (e) => {\n            const altEle = e.target.closest(Selectors.IMAGE.elements.alt);\n            if (altEle) {\n                this.handleKeyupCharacterCount();\n            }\n        });\n\n        this.root.addEventListener('input', (e) => {\n            const widthEle = e.target.closest(Selectors.IMAGE.elements.width);\n            if (widthEle) {\n                // Avoid empty value.\n                widthEle.value = widthEle.value === \"\" ? 0 : Number(widthEle.value);\n                this.autoAdjustSize();\n            }\n\n            const heightEle = e.target.closest(Selectors.IMAGE.elements.height);\n            if (heightEle) {\n                // Avoid empty value.\n                heightEle.value = heightEle.value === \"\" ? 0 : Number(heightEle.value);\n                this.autoAdjustSize(true);\n            }\n        });\n    }\n\n    handleKeyupCharacterCount() {\n        const alt = this.root.querySelector(Selectors.IMAGE.elements.alt).value;\n        const current = this.root.querySelector('#currentcount');\n        current.innerHTML = alt.length;\n    }\n\n    /**\n     * Calculates the dimensions to fit a square into a specified box while maintaining aspect ratio.\n     *\n     * @param {number} squareWidth - The width of the square.\n     * @param {number} squareHeight - The height of the square.\n     * @param {number} boxWidth - The width of the box.\n     * @param {number} boxHeight - The height of the box.\n     * @returns {Object} An object with the new width and height of the square to fit in the box.\n     */\n    fitSquareIntoBox = (squareWidth, squareHeight, boxWidth, boxHeight) => {\n        if (squareWidth < boxWidth && squareHeight < boxHeight) {\n          // If the square is smaller than the box, keep its dimensions.\n          return {\n            width: squareWidth,\n            height: squareHeight,\n          };\n        }\n        // Calculate the scaling factor based on the minimum scaling required to fit in the box.\n        const widthScaleFactor = boxWidth / squareWidth;\n        const heightScaleFactor = boxHeight / squareHeight;\n        const minScaleFactor = Math.min(widthScaleFactor, heightScaleFactor);\n        // Scale the square's dimensions based on the aspect ratio and the minimum scaling factor.\n        const newWidth = squareWidth * minScaleFactor;\n        const newHeight = squareHeight * minScaleFactor;\n        return {\n          width: newWidth,\n          height: newHeight,\n        };\n    };\n}\n"],"names":["_interopRequireDefault","e","__esModule","default","_config","_modal_events","_notification","_pending","_selectors","_templates","_exports","ImageDetails","DEFAULTS","WIDTH","HEIGHT","rawImageDimensions","constructor","root","editor","currentModal","canShowFilePicker","canShowDropZone","currentUrl","image","this","init","setTitle","getString","imageTypeChecked","presentationChanged","storeImageDimensions","setImageDimensions","registerEventListeners","loadInsertImage","async","templateContext","elementid","id","showfilepicker","showdropzone","Promise","all","bodyImageInsert","footerImageInsert","then","ImageInsert","catch","error","window","console","log","width","height","currentWidth","element","value","getCurrentWidth","querySelector","Selectors","IMAGE","elements","currentHeight","getCurrentHeight","preview","setAttribute","src","style","display","constrain","isPercentageValue","checked","disabled","widthRatio","Math","round","parseInt","heightRatio","setSelectedSize","sizeChecked","Number","option","widthInput","heightInput","sizeOriginalChecked","sizeCustomChecked","autoAdjustSize","forceHeight","arguments","length","undefined","widthField","heightField","normalizeFieldData","fieldData","field","percentValue","pixelSize","type","getKeyField","currentValue","keyField","relativeField","imagePreviewBox","previewBox","updateImageDimensions","boxWidth","clientWidth","boxHeight","clientHeight","dimensions","fitSquareIntoBox","getRoot","on","ModalEvents","shown","sizeOriginal","sizeCustom","hideElements","properties","showElements","presentation","alt","handleKeyupCharacterCount","isExternalUrl","RegExp","Config","wwwroot","test","url","setFilenameLabel","decodeURI","filename","split","pop","label","urlLabelEle","fileNameLabel","innerHTML","toggleAriaInvalid","selectors","predicate","forEach","selector","querySelectorAll","hasErrorUrlField","urlError","urlWarning","hasErrorAltField","imageAltError","altWarning","urlWaaltWarningrning","updateWarning","getImageContext","classList","push","styles","responsive","customStyle","classlist","join","setImage","pendingPromise","Pending","resolve","isNaN","focus","Templates","render","html","insertContent","destroy","deleteImage","Notification","deleteCancelPromise","actions","submit","addEventListener","preventDefault","deleteImageEle","key","target","closest","nodeType","Node","ELEMENT_NODE","widthEle","heightEle","squareWidth","squareHeight","widthScaleFactor","heightScaleFactor","minScaleFactor","min"],"mappings":"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"}