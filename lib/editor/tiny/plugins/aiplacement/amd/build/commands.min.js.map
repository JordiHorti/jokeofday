{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Commands helper for the Moodle tiny_aiplacement plugin.\n *\n * @module      tiny_aiplacement/commands\n * @copyright   2024 Matt Porritt <matt.porritt@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getButtonImage, addDynamicToolbarMenu} from 'editor_tiny/utils';\nimport {get_string as getString} from 'core/str';\nimport {\n    component,\n    placement,\n    contextMenuName,\n    generateImageName,\n    generateTextName,\n    contextMenuIcon,\n    generateImageIcon,\n    generateTextIcon\n} from './common';\nimport GenerateImage from './generateimage';\nimport GenerateText from './generatetext';\nimport {isTextAllowed, isImageAllowed} from './options';\n\n/**\n * Get the setup function for the buttons.\n *\n * This is performed in an async function which ultimately returns the registration function as the\n * Tiny.AddOnManager.Add() function does not support async functions.\n *\n * @returns {function} The registration function to call within the Plugin.add function.\n */\nexport const getSetup = async() => {\n    const [\n        contextMenuIconText,\n        generateImageIconText,\n        generateTextIconText,\n        contextMenuIconImage,\n        generateImageIconImage,\n        generateTextIconImage,\n    ] = await Promise.all([\n        getString('generatecontent', placement),\n        getString('generateimage', placement),\n        getString('generatetext', placement),\n        getButtonImage(contextMenuIcon, component),\n        getButtonImage(generateImageIcon, component),\n        getButtonImage(generateTextIcon, component),\n    ]);\n\n    const getToolbarParts = (editor) => {\n        // Add the context menu button.\n        const menuItems = [];\n\n        if (isTextAllowed(editor)) {\n            const textGenerator = new GenerateText(editor);\n\n            editor.ui.registry.addMenuItem(generateTextName, {\n                icon: generateTextIcon,\n                text: generateTextIconText,\n                onAction: () => {\n                    textGenerator.displayContentModal(editor);\n                },\n            });\n\n            menuItems.push(generateTextName);\n\n            if (!isImageAllowed(editor)) {\n                // Only text generation is allowed.\n                return {\n                    menuItems,\n                    singleButton: generateTextIcon,\n                    singleButtonTitle: generateTextIconText,\n                    generator: textGenerator,\n                };\n            }\n        }\n\n        if (isImageAllowed(editor)) {\n            const imageGenerator = new GenerateImage(editor);\n\n            editor.ui.registry.addMenuItem(generateImageName, {\n                icon: generateImageIcon,\n                text: generateImageIconText,\n                onAction: () => {\n                    imageGenerator.displayContentModal(editor);\n                },\n            });\n\n            menuItems.push(generateImageName);\n\n            if (!isTextAllowed(editor)) {\n                // Only image generation is allowed.\n                return {\n                    menuItems,\n                    singleButton: generateImageIcon,\n                    singleButtonTitle: generateImageIconText,\n                    generator: imageGenerator,\n                };\n            }\n        }\n\n        return {\n            menuItems,\n            singleButton: null,\n            singleButtonTitle: null,\n            generator: null,\n        };\n    };\n\n\n    return (editor) => {\n        if (!isTextAllowed(editor) && !isImageAllowed(editor)) {\n            return;\n        }\n\n        // Register the icon SVG files as an icon suitable for use in TinyMCE toolbars and buttons.\n        editor.ui.registry.addIcon(contextMenuIcon, contextMenuIconImage.html);\n        editor.ui.registry.addIcon(generateImageIcon, generateImageIconImage.html);\n        editor.ui.registry.addIcon(generateTextIcon, generateTextIconImage.html);\n\n        const {menuItems, singleButton, singleButtonTitle, generator} = getToolbarParts(editor);\n\n        addDynamicToolbarMenu(\n            editor,\n            menuItems,\n            contextMenuName,\n            contextMenuIcon,\n            contextMenuIconText,\n            singleButton,\n            singleButtonTitle,\n            () => {\n                generator.displayContentModal(editor);\n            },\n        );\n    };\n};\n"],"names":["_interopRequireDefault","e","__esModule","default","_generateimage","_generatetext","_exports","getSetup","async","contextMenuIconText","generateImageIconText","generateTextIconText","contextMenuIconImage","generateImageIconImage","generateTextIconImage","Promise","all","getString","placement","get_string","getButtonImage","contextMenuIcon","component","generateImageIcon","generateTextIcon","editor","isTextAllowed","isImageAllowed","ui","registry","addIcon","html","menuItems","singleButton","singleButtonTitle","generator","textGenerator","GenerateText","addMenuItem","generateTextName","icon","text","onAction","displayContentModal","push","imageGenerator","GenerateImage","generateImageName","getToolbarParts","addDynamicToolbarMenu","contextMenuName"],"mappings":"sNAoC0C,SAAAA,uBAAAC,GAAAA,OAAAA,GAAAA,EAAAC,WAAAD,EAAAE,CAAAA,QAAAF,EAAA;;;;;;;sFAD1CG,eAAAJ,uBAAAI,gBACAC,cAAAL,uBAAAK,eAkHEC,SAAAC,SAvGsBC,UACpB,MACIC,oBACAC,sBACAC,qBACAC,qBACAC,uBACAC,6BACMC,QAAQC,IAAI,EAClB,EAAAC,KAAAA,YAAU,kBAAmBC,QAASA,YACtC,EAAAD,KAASE,YAAC,gBAAiBD,QAAAA,YAC3B,EAAAD,KAAAA,YAAU,eAAgBC,QAASA,YACnC,EAAAE,OAAcA,gBAACC,QAAeA,gBAAEC,oBAChC,EAAAF,OAAAA,gBAAeG,QAAAA,kBAAmBD,QAAAA,YAClC,EAAAF,OAAcA,gBAACI,QAAgBA,iBAAEF,QAASA,aAgE9C,OAAQG,SACJ,KAAK,EAAAC,SAAaA,eAACD,WAAY,EAAAE,SAAAA,gBAAeF,QAC1C,OAIJA,OAAOG,GAAGC,SAASC,QAAQT,QAAAA,gBAAiBT,qBAAqBmB,MACjEN,OAAOG,GAAGC,SAASC,QAAQP,QAAAA,kBAAmBV,uBAAuBkB,MACrEN,OAAOG,GAAGC,SAASC,QAAQN,QAAAA,iBAAkBV,sBAAsBiB,MAEnE,MAAMC,UAACA,UAASC,aAAEA,aAAYC,kBAAEA,kBAAiBC,UAAEA,WAvE9BV,UAErB,MAAMO,UAAY,GAElB,IAAI,EAAAN,SAAAA,eAAcD,QAAS,CACvB,MAAMW,cAAgB,IAAIC,cAAYlC,QAACsB,QAYvC,GAVAA,OAAOG,GAAGC,SAASS,YAAYC,yBAAkB,CAC7CC,KAAMhB,QAAgBA,iBACtBiB,KAAM9B,qBACN+B,SAAUA,KACNN,cAAcO,oBAAoBlB,OAAO,IAIjDO,UAAUY,KAAKL,QAAAA,oBAEV,EAAAZ,SAAAA,gBAAeF,QAEhB,MAAO,CACHO,oBACAC,aAAcT,QAAgBA,iBAC9BU,kBAAmBvB,qBACnBwB,UAAWC,cAGvB,CAEA,IAAI,EAAAT,SAAAA,gBAAeF,QAAS,CACxB,MAAMoB,eAAiB,IAAIC,eAAa3C,QAACsB,QAYzC,GAVAA,OAAOG,GAAGC,SAASS,YAAYS,0BAAmB,CAC9CP,KAAMjB,QAAiBA,kBACvBkB,KAAM/B,sBACNgC,SAAUA,KACNG,eAAeF,oBAAoBlB,OAAO,IAIlDO,UAAUY,KAAKG,QAAAA,qBAEV,EAAArB,SAAAA,eAAcD,QAEf,MAAO,CACHO,oBACAC,aAAcV,QAAiBA,kBAC/BW,kBAAmBxB,sBACnByB,UAAWU,eAGvB,CAEA,MAAO,CACHb,oBACAC,aAAc,KACdC,kBAAmB,KACnBC,UAAW,KACd,EAc+Da,CAAgBvB,SAEhF,EAAAwB,8BACIxB,OACAO,UACAkB,QAAeA,gBACf7B,QAAeA,gBACfZ,oBACAwB,aACAC,mBACA,KACIC,UAAUQ,oBAAoBlB,OAAO,GAE5C,CACJ,CACH"}