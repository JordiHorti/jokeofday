{"version":3,"file":"generatetext.min.js","sources":["../src/generatetext.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny AI generate text.\n *\n * @module      tiny_aiplacement/generatetext\n * @copyright   2024 Matt Porritt <matt.porritt@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport TextModal from './textmodal';\nimport Ajax from 'core/ajax';\nimport {getString} from 'core/str';\nimport Templates from 'core/templates';\nimport AIHelper from 'core_ai/helper';\nimport {getContextId} from './options';\nimport TinyAiTextMarker from './textmark';\nimport GenerateBase from './generatebase';\n\nexport default class GenerateText extends GenerateBase {\n    SELECTORS = {\n        GENERATEBUTTON: () => `[id=\"${this.editor.id}_tiny_aiplacement_generatebutton\"]`,\n        PROMPTAREA: () => `[id=\"${this.editor.id}_tiny_aiplacement_textprompt\"]`,\n        RESPONSEWRAPPER: '.tiny_aiplacement_textresponse',\n        RESPONSEPLACEHOLDER: '.tiny_aiplacement_textresponse_placeholder',\n        GENERATEDRESPONSE: () => `[id=\"${this.editor.id}_tiny_aiplacement_textresponse\"]`,\n        INSERTBTN: '[data-action=\"inserter\"]',\n        BACKTBTN: '[data-action=\"back\"]',\n    };\n\n    getModalClass() {\n        return TextModal;\n    }\n\n    /**\n     * Handle click events within the text modal.\n     *\n     * @param {Event} e - The click event object.\n     * @param {HTMLElement} root - The root element of the modal.\n     */\n    handleContentModalClick(e, root) {\n        const actions = {\n            generate: () => this.handleSubmit(root, e.target),\n            inserter: () => this.handleInsert(root, e.target),\n            cancel: () => this.modalObject.destroy(),\n            back: () => {\n                this.modalObject.destroy();\n                this.displayContentModal();\n            },\n        };\n\n        const actionKey = Object.keys(actions).find(key => e.target.closest(`[data-action=\"${key}\"]`));\n        if (actionKey) {\n            e.preventDefault();\n            actions[actionKey]();\n        }\n    }\n\n    /**\n     * Set up the prompt area in the modal, adding necessary event listeners.\n     *\n     * @param {HTMLElement} root - The root element of the modal.\n     */\n    setupPromptArea(root) {\n        const generateBtn = root.querySelector(this.SELECTORS.GENERATEBUTTON());\n        const promptArea = root.querySelector(this.SELECTORS.PROMPTAREA());\n\n        promptArea.addEventListener('input', () => {\n            generateBtn.disabled = promptArea.value.trim() === '';\n        });\n    }\n\n    /**\n     * Handle the submit action.\n     *\n     * @param {Object} root The root element of the modal.\n     * @param {Object} submitBtn The submit button element.\n     */\n    async handleSubmit(root, submitBtn) {\n        await this.displayLoading(root, submitBtn);\n\n        const requestArgs = this.getRequestArgs(root);\n        const request = {\n            methodname: 'aiplacement_editor_generate_text',\n            args: requestArgs\n        };\n\n        try {\n            this.responseObj = await Ajax.call([request])[0];\n            if (this.responseObj.error) {\n                this.handleGenerationError(root, submitBtn, '');\n            } else {\n                await this.displayGeneratedText(root);\n                this.hideLoading(root, submitBtn);\n            }\n        } catch (error) {\n            this.handleGenerationError(root, submitBtn, '');\n        }\n    }\n\n    /**\n     * Handle the insert action.\n     *\n     * @param {Object} root The root element of the modal.\n     * @param {HTMLElement} submitBtn - The submit button element.\n     */\n    async handleInsert(root, submitBtn) {\n        await this.displayLoading(root, submitBtn);\n\n        // Update the generated response with the content from the form.\n        // In case the user has edited the response.\n        const generatedResponseDiv = root.querySelector(this.SELECTORS.GENERATEDRESPONSE());\n\n        // Wrap the edited sections in the response with tags.\n        // This is so we can differentiate between the edited sections and the generated content.\n        const wrappedEditedResponse = await TinyAiTextMarker.wrapEditedSections(\n            this.responseObj.generatedcontent,\n            generatedResponseDiv.value)\n        ;\n\n        // Replace double line breaks with <br> and with </p><p> for paragraphs.\n        this.responseObj.editedtext = AIHelper.replaceLineBreaks(wrappedEditedResponse);\n\n        // Generate the HTML for the response.\n        const formattedResponse = await Templates.render('tiny_aiplacement/textinsert', this.responseObj);\n\n        // Insert the response into the editor.\n        this.editor.insertContent(formattedResponse);\n        this.editor.execCommand('mceRepaint');\n        this.editor.windowManager.close();\n\n        // Close the modal and return to the editor.\n        this.modalObject.hide();\n    }\n\n    /**\n     * Handle a generation error.\n     *\n     * @param {Object} root The root element of the modal.\n     * @param {Object} submitBtn The submit button element.\n     * @param {String} errorMessage The error message to display.\n     */\n    async handleGenerationError(root, submitBtn, errorMessage = '') {\n        if (!errorMessage) {\n            // Get the default error message.\n            errorMessage = await getString('errorgeneral', 'tiny_aiplacement');\n        }\n        this.modalObject.setBody(Templates.render('tiny_aiplacement/modalbodyerror', {'errorMessage': errorMessage}));\n        const backBtn = root.querySelector(this.SELECTORS.BACKTBTN);\n        const generateBtn = root.querySelector(this.SELECTORS.GENERATEBUTTON());\n        backBtn.classList.remove('hidden');\n        generateBtn.classList.add('hidden');\n        this.hideLoading(root, submitBtn);\n    }\n\n    /**\n     * Display the generated image in the modal.\n     *\n     * @param {HTMLElement} root - The root element of the modal.\n     */\n    async displayGeneratedText(root) {\n        const insertBtn = root.querySelector(this.SELECTORS.INSERTBTN);\n        insertBtn.classList.remove('hidden');\n\n        // Add generated text to the modal.\n        const generatedResponseDiv = root.querySelector(this.SELECTORS.GENERATEDRESPONSE());\n        generatedResponseDiv.value = this.responseObj.generatedcontent;\n        const responseWrapper = root.querySelector(this.SELECTORS.RESPONSEWRAPPER);\n        responseWrapper.classList.remove('hidden');\n        const responsePlaceholder = root.querySelector(this.SELECTORS.RESPONSEPLACEHOLDER);\n        responsePlaceholder.classList.add('hidden');\n    }\n\n    /**\n     * Get the request args for the generated text.\n     *\n     * @param {Object} root The root element of the modal.\n     */\n    getRequestArgs(root) {\n        const contextId = getContextId(this.editor);\n        const promptText = root.querySelector(this.SELECTORS.PROMPTAREA()).value;\n\n        return {\n            contextid: contextId,\n            prompttext: promptText\n        };\n    }\n}\n"],"names":["_interopRequireDefault","e","__esModule","default","_textmodal","_ajax","_templates","_helper","_textmark","_generatebase","GenerateText","GenerateBase","SELECTORS","GENERATEBUTTON","this","editor","id","PROMPTAREA","RESPONSEWRAPPER","RESPONSEPLACEHOLDER","GENERATEDRESPONSE","INSERTBTN","BACKTBTN","getModalClass","TextModal","handleContentModalClick","root","actions","generate","handleSubmit","target","inserter","handleInsert","cancel","modalObject","destroy","back","displayContentModal","actionKey","Object","keys","find","key","closest","preventDefault","setupPromptArea","generateBtn","querySelector","promptArea","addEventListener","disabled","value","trim","submitBtn","displayLoading","request","methodname","args","getRequestArgs","responseObj","Ajax","call","error","handleGenerationError","displayGeneratedText","hideLoading","generatedResponseDiv","wrappedEditedResponse","TinyAiTextMarker","wrapEditedSections","generatedcontent","editedtext","AIHelper","replaceLineBreaks","formattedResponse","Templates","render","insertContent","execCommand","windowManager","close","hide","errorMessage","arguments","length","undefined","getString","setBody","backBtn","classList","remove","add","contextid","getContextId","prompttext","_exports"],"mappings":"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"}