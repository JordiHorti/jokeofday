{"version":3,"file":"generatebase.min.js","sources":["../src/generatebase.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny AI base generate class.\n *\n * @module      tiny_aiplacement/generatebase\n * @copyright   2024 Matt Porritt <matt.porritt@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {loadingMessages} from 'tiny_aiplacement/loading';\nimport {getString} from 'core/str';\nimport {\n    getContextId,\n    getUserId,\n} from 'tiny_aiplacement/options';\nimport Policy from 'core_ai/policy';\nimport PolicyModal from 'core_ai/policymodal';\nimport CustomEvents from 'core/custom_interaction_events';\nimport {isPolicyAgreed} from './options';\n\nexport default class GenerateBase {\n    modalObject;\n\n    /**\n     * Class constructor.\n     *\n     * @param {TinyMCE.editor} editor The tinyMCE editor instance.\n     */\n    constructor(editor) {\n        this.editor = editor;\n        this.userid = getUserId(editor);\n        this.contextid = getContextId(editor);\n        this.responseObj = null;\n    }\n\n    /**\n     * Display the modal when the AI button is clicked.\n     *\n     */\n    async displayContentModal() {\n        Policy.preconfigurePolicyState(this.userid, isPolicyAgreed(this.editor));\n        if (!await Policy.getPolicyStatus(this.userid)) {\n            const policyModal = await PolicyModal.create();\n            policyModal.getModal().on(CustomEvents.events.activate, policyModal.getActionSelector('save'), () => {\n                this.displayContentModal();\n            });\n            return;\n        }\n\n        this.modalObject = await this.setupModal();\n    }\n\n    getModalClass() {\n        throw new Error(\"Method 'getModalClass' must be implemented.\");\n    }\n\n\n    /**\n     * Set up the base text generation modal with default body content.\n     *\n     * @returns {TextModal} The image modal object.\n     */\n    async setupModal() {\n        const modal = this.getModalClass().create({\n            templateContext: {\n                elementid: this.editor.id,\n            },\n        });\n\n        this.addContentEventListeners(modal);\n\n        return modal;\n    }\n\n    /**\n     * Add event listeners for the text modal.\n     *\n     * @param {Modal} modal\n     */\n    async addContentEventListeners(modal) {\n        const modalRoot = (await modal).getRoot();\n        const root = modalRoot[0];\n\n        root.addEventListener('click', (e) => {\n            this.handleContentModalClick(e, root);\n        });\n\n        this.setupPromptArea(root);\n        this.hideLoadingSpinner(root);\n    }\n\n    handleContentModalClick() {\n        throw new Error('Method handleContentModalClick must be implemented.');\n    }\n\n    /**\n     * Hide the loading spinner.\n     *\n     * @param {Object} root The root element of the modal.\n     */\n    hideLoadingSpinner(root) {\n        const loadingSpinnerDiv = root.querySelector(`[id=\"${this.editor.id}_tiny_aiplacement_spinner\"]`);\n        loadingSpinnerDiv.classList.add('hidden');\n        loadingSpinnerDiv.classList.remove('tiny-aiplacement-loading-spinner-container');\n    }\n\n    /**\n     * Display the loading state in the modal.\n     *\n     * @param {HTMLElement} root - The root element of the modal.\n     * @param {HTMLElement} submitBtn - The submit button element.\n     * @param {String|null} removeClass - The class to be removed from the loading spinner div, if any.\n     */\n    async displayLoading(root, submitBtn, removeClass = null) {\n        const loadingSpinnerDiv = root.querySelector(`[id=\"${this.editor.id}_tiny_aiplacement_spinner\"]`);\n        const overlayDiv = root.querySelector(`[id=\"${this.editor.id}_tiny_aiplacement_overlay\"]`);\n        const blurDiv = root.querySelector(`[id=\"${this.editor.id}_tiny_aiplacement_blur\"]`);\n        const loadingTextDiv = root.querySelector(`[id=\"${this.editor.id}_tiny_aiplacement_loading_text\"]`);\n        const actionButtons = root.querySelectorAll('.tiny-aiplacement-generate-footer button');\n\n        loadingMessages(loadingTextDiv);\n\n        if (removeClass) {\n            loadingSpinnerDiv.classList.remove(removeClass);\n        }\n\n        loadingSpinnerDiv.classList.remove('hidden');\n        overlayDiv.classList.remove('hidden');\n        blurDiv.classList.add('tiny-aiplacement-blur');\n        submitBtn.innerHTML = await getString('generating', 'tiny_aiplacement');\n\n        if (actionButtons) {\n            actionButtons.forEach((button) => {\n                button.disabled = true;\n            });\n        }\n    }\n\n    /**\n     * Hide the loading action in the modal.\n     *\n     * @param {Object} root The root element of the modal.\n     * @param {Object} submitBtn The submit button element.\n     */\n    async hideLoading(root, submitBtn) {\n        const loadingSpinnerDiv = root.querySelector(`[id=\"${this.editor.id}_tiny_aiplacement_spinner\"]`);\n        const overlayDiv = root.querySelector(`[id=\"${this.editor.id}_tiny_aiplacement_overlay\"]`);\n        const blurDiv = root.querySelector(`[id=\"${this.editor.id}_tiny_aiplacement_blur\"]`);\n        const actionButtons = root.querySelectorAll('.tiny-aiplacement-generate-footer button');\n        if (loadingSpinnerDiv) {\n            loadingSpinnerDiv.classList.add('hidden');\n        }\n        if (overlayDiv) {\n            overlayDiv.classList.add('hidden');\n        }\n        if (blurDiv) {\n            blurDiv.classList.remove('tiny-aiplacement-blur');\n        }\n        submitBtn.innerHTML = await getString('regenerate', 'tiny_aiplacement');\n\n        if (actionButtons) {\n            actionButtons.forEach((button) => {\n                button.disabled = false;\n            });\n        }\n    }\n}\n"],"names":["_interopRequireDefault","e","__esModule","default","_policy","_policymodal","_custom_interaction_events","_exports","modalObject","constructor","editor","this","userid","getUserId","contextid","getContextId","responseObj","displayContentModal","Policy","preconfigurePolicyState","isPolicyAgreed","getPolicyStatus","setupModal","policyModal","PolicyModal","create","getModal","on","CustomEvents","events","activate","getActionSelector","getModalClass","Error","modal","templateContext","elementid","id","addContentEventListeners","root","getRoot","addEventListener","handleContentModalClick","setupPromptArea","hideLoadingSpinner","loadingSpinnerDiv","querySelector","classList","add","remove","displayLoading","submitBtn","removeClass","arguments","length","undefined","overlayDiv","blurDiv","loadingTextDiv","actionButtons","querySelectorAll","loadingMessages","innerHTML","getString","forEach","button","disabled","hideLoading"],"mappings":"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"}