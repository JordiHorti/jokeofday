{"version":3,"file":"actions.min.js","sources":["../src/actions.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Various actions on badges - enabling, disabling, etc.\n *\n * @module      core_badges/actions\n * @copyright   2024 Sara Arjona <sara@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport selectors from 'core_badges/selectors';\nimport Notification from 'core/notification';\nimport {prefetchStrings} from 'core/prefetch';\nimport {getString} from 'core/str';\nimport Ajax from 'core/ajax';\nimport Pending from 'core/pending';\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport {add as addToast} from 'core/toast';\nimport * as reportEvents from 'core_reportbuilder/local/events';\nimport * as reportSelectors from 'core_reportbuilder/local/selectors';\n\n/**\n * Initialize module.\n */\nexport const init = () => {\n    prefetchStrings('core_badges', [\n        'reviewconfirm',\n        'activatesuccess',\n        'deactivatesuccess',\n        'awardoncron',\n        'numawardstat',\n    ]);\n    prefetchStrings('core', [\n        'confirm',\n        'enable',\n    ]);\n\n    registerEventListeners();\n};\n\n/**\n * Register events for delete preset option in action menu.\n */\nconst registerEventListeners = () => {\n    document.addEventListener('click', (event) => {\n        const enableOption = event.target.closest(selectors.actions.enablebadge);\n\n        if (enableOption) {\n            event.preventDefault();\n\n            // Use triggerElement to return focus to the action menu toggle.\n            const reportElement = event.target.closest(reportSelectors.regions.report);\n            const triggerElement = reportElement ? enableOption.closest('.dropdown').querySelector('.dropdown-toggle') : null;\n            const badgeId = enableOption.dataset.badgeid;\n            const badgeName = enableOption.dataset.badgename;\n\n            Notification.saveCancelPromise(\n                getString('confirm', 'core'),\n                getString('reviewconfirm', 'core_badges', badgeName),\n                getString('enable', 'core'),\n                {triggerElement}\n            ).then(() => {\n                return enableBadge(badgeId, badgeName, reportElement);\n            }).catch(() => {\n                return;\n            });\n        }\n\n        const disableOption = event.target.closest(selectors.actions.disablebadge);\n        if (disableOption) {\n            event.preventDefault();\n            const badgeId = disableOption.dataset.badgeid;\n            const badgeName = disableOption.dataset.badgename;\n            const reportElement = event.target.closest(reportSelectors.regions.report);\n            disableBadge(badgeId, badgeName, reportElement);\n        }\n    });\n};\n\n/**\n * Enable the badge.\n *\n * @param {Number} badgeId The id of the badge to enable.\n * @param {String} badgeName The name of the badge to enable.\n * @param {HTMLElement} reportElement the report element.\n */\nasync function enableBadge(badgeId, badgeName, reportElement) {\n    var request = {\n        methodname: 'core_badges_enable_badges',\n        args: {\n            badgeids: [badgeId],\n        }\n    };\n\n    const pendingPromise = new Pending('core_badges/enable');\n    try {\n        const result = await Ajax.call([request])[0];\n        if (reportElement) {\n            showEnableResultToast(badgeName, result);\n            // Report element is present, reload the table.\n            dispatchEvent(reportEvents.tableReload, {preservePagination: true}, reportElement);\n        } else {\n            // Report element is not present, add the parameters to the current page to display the message.\n            const awards = result.result?.pop().awards;\n            document.location = document.location.pathname + `?id=${badgeId}&awards=${awards}`;\n        }\n    } catch (error) {\n        Notification.exception(error);\n    }\n    pendingPromise.resolve();\n}\n\n/**\n * Show the result of enabling a badge.\n *\n * @param {String} badgeName The name of the badge to enable.\n * @param {Object} result The result of enabling a badge.\n */\nfunction showEnableResultToast(badgeName, result) {\n    if (result.result?.length > 0) {\n        addToast(getString('activatesuccess', 'core_badges', badgeName), {type: 'success'});\n        const awards = result.result?.pop().awards;\n        if (awards == 'cron') {\n            addToast(getString('awardoncron', 'core_badges', {badgename: badgeName}));\n        } else if (awards > 0) {\n            addToast(getString('numawardstat', 'core_badges', {badgename: badgeName, awards: awards}));\n        }\n    } else if (result.warnings.length > 0) {\n        addToast(result.warnings[0].message, {type: 'danger'});\n    }\n}\n\n/**\n * Disable the badge.\n *\n * @param {Number} badgeId The id of the badge to disable.\n * @param {String} badgeName The name of the badge to enable.\n * @param {HTMLElement} reportElement the report element.\n */\nasync function disableBadge(badgeId, badgeName, reportElement) {\n    var request = {\n        methodname: 'core_badges_disable_badges',\n        args: {\n            badgeids: [badgeId],\n        }\n    };\n\n    try {\n        const result = await Ajax.call([request])[0];\n        if (reportElement) {\n            // Report element is present, show the message in a toast and reload the table.\n            showDisableResultToast(badgeName, result);\n            dispatchEvent(reportEvents.tableReload, {preservePagination: true}, reportElement);\n        } else {\n            // Report element is not present, the page should be reloaded.\n            document.location = document.location.pathname + `?id=${badgeId}`;\n        }\n    } catch (error) {\n        Notification.exception(error);\n    }\n}\n\n/**\n * Show the result of disabling a badge.\n *\n * @param {String} badgeName The name of the badge to disable.\n * @param {Object} result The result of disabling a badge.\n */\nfunction showDisableResultToast(badgeName, result) {\n    if (result.result) {\n        addToast(\n            getString('deactivatesuccess', 'core_badges', badgeName),\n            {type: 'success'}\n        );\n    } else if (result.warnings.length > 0) {\n        addToast(\n            result.warnings[0].message,\n            {type: 'danger'}\n        );\n    }\n}\n"],"names":["_getRequireWildcardCache","e","WeakMap","r","t","_interopRequireWildcard","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_interopRequireDefault","_selectors","_notification","_ajax","_pending","reportEvents","reportSelectors","_exports","init","prefetchStrings","registerEventListeners","document","addEventListener","event","enableOption","target","closest","selectors","actions","enablebadge","preventDefault","reportElement","regions","report","triggerElement","querySelector","badgeId","dataset","badgeid","badgeName","badgename","Notification","saveCancelPromise","getString","then","async","request","methodname","args","badgeids","pendingPromise","Pending","result","Ajax","_result$result2","length","_result$result3","addToast","type","awards","pop","warnings","message","showEnableResultToast","dispatchEvent","tableReload","preservePagination","_result$result","location","pathname","error","exception","resolve","enableBadge","catch","disableOption","disablebadge","showDisableResultToast","disableBadge"],"mappings":"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"}