{"version":3,"file":"gateways_modal.min.js","sources":["../src/gateways_modal.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Contain the logic for the gateways modal.\n *\n * @module     core_payment/gateways_modal\n * @copyright  2019 Shamim Rezaie <shamim@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Templates from 'core/templates';\nimport {getString} from 'core/str';\nimport {getAvailableGateways} from './repository';\nimport Selectors from './selectors';\nimport ModalEvents from 'core/modal_events';\nimport PaymentEvents from 'core_payment/events';\nimport {add as addToast, addToastRegion} from 'core/toast';\nimport Notification from 'core/notification';\nimport ModalGateways from './modal_gateways';\n\n/**\n * Register event listeners for the module.\n */\nconst registerEventListeners = () => {\n    document.addEventListener('click', e => {\n        const gatewayTrigger = e.target.closest('[data-action=\"core_payment/triggerPayment\"]');\n        if (gatewayTrigger) {\n            e.preventDefault();\n\n            show(gatewayTrigger, {focusOnClose: e.target});\n        }\n    });\n};\n\n/**\n * Shows the gateway selector modal.\n *\n * @param {HTMLElement} rootNode\n * @param {Object} options - Additional options\n * @param {HTMLElement} options.focusOnClose The element to focus on when the modal is closed.\n */\nconst show = async(rootNode, {\n    focusOnClose = null,\n} = {}) => {\n\n    // Load upfront, so we don't try to inject the internal content into a possibly-not-yet-resolved promise.\n    const body = await Templates.render('core_payment/gateways_modal', {});\n\n    const modal = await ModalGateways.create({\n        title: getString('selectpaymenttype', 'core_payment'),\n        body: body,\n        show: true,\n        removeOnClose: true,\n    });\n\n    const rootElement = modal.getRoot()[0];\n    addToastRegion(rootElement);\n\n    modal.getRoot().on(ModalEvents.hidden, () => {\n        focusOnClose?.focus();\n    });\n\n    modal.getRoot().on(PaymentEvents.proceed, async(e) => {\n        e.preventDefault();\n        const gateway = (rootElement.querySelector(Selectors.values.gateway) || {value: ''}).value;\n\n        if (gateway) {\n            processPayment(\n                gateway,\n                rootNode.dataset.component,\n                rootNode.dataset.paymentarea,\n                rootNode.dataset.itemid,\n                rootNode.dataset.description\n            ).then((message) => {\n                modal.hide();\n                Notification.addNotification({\n                    message,\n                    type: 'success',\n                });\n                location.href = rootNode.dataset.successurl;\n\n                return;\n            }).catch(message => Notification.alert('', message));\n        } else {\n            // We cannot use await in the following line.\n            // The reason is that we are preventing the default action of the save event being triggered,\n            // therefore we cannot define the event handler function asynchronous.\n            addToast(getString('nogatewayselected', 'core_payment'), {\n                type: 'warning',\n            });\n        }\n    });\n\n    // Re-calculate the cost when gateway is changed.\n    rootElement.addEventListener('change', e => {\n        if (e.target.matches(Selectors.elements.gateways)) {\n            updateCostRegion(rootElement, rootNode.dataset.cost);\n        }\n    });\n\n    const gateways = await getAvailableGateways(rootNode.dataset.component, rootNode.dataset.paymentarea, rootNode.dataset.itemid);\n    const context = {\n        gateways\n    };\n\n    const {html, js} = await Templates.renderForPromise('core_payment/gateways', context);\n    Templates.replaceNodeContents(rootElement.querySelector(Selectors.regions.gatewaysContainer), html, js);\n    selectSingleGateway(rootElement);\n    await updateCostRegion(rootElement, rootNode.dataset.cost);\n};\n\n/**\n * Auto-select the gateway if there is only one gateway.\n *\n * @param {HTMLElement} root An HTMLElement that contains the cost region\n */\nconst selectSingleGateway = root => {\n    const gateways = root.querySelectorAll(Selectors.elements.gateways);\n\n    if (gateways.length == 1) {\n        gateways[0].checked = true;\n    }\n};\n\n/**\n * Shows the cost of the item the user is purchasing in the cost region.\n *\n * @param {HTMLElement} root An HTMLElement that contains the cost region\n * @param {string} defaultCost The default cost that is going to be displayed if no gateway is selected\n * @returns {Promise<void>}\n */\nconst updateCostRegion = async(root, defaultCost = '') => {\n    const gatewayElement = root.querySelector(Selectors.values.gateway);\n    const surcharge = parseInt((gatewayElement || {dataset: {surcharge: 0}}).dataset.surcharge);\n    const cost = (gatewayElement || {dataset: {cost: defaultCost}}).dataset.cost;\n    const valueStr = surcharge ? await getString('feeincludesurcharge', 'core_payment', {fee: cost, surcharge: surcharge}) : cost;\n\n    const surchargeStr = await getString('labelvalue', 'core',\n        {\n            label: await getString('cost', 'core'),\n            value: valueStr\n        }\n    );\n\n    const {html, js} = await Templates.renderForPromise('core_payment/fee_breakdown', {surchargestr: surchargeStr});\n    Templates.replaceNodeContents(root.querySelector(Selectors.regions.costContainer), html, js);\n};\n\n/**\n * Process payment using the selected gateway.\n *\n * @param {string} gateway The gateway to be used for payment\n * @param {string} component Name of the component that the itemId belongs to\n * @param {string} paymentArea Name of the area in the component that the itemId belongs to\n * @param {number} itemId An internal identifier that is used by the component\n * @param {string} description Description of the payment\n * @returns {Promise<string>}\n */\nconst processPayment = async(gateway, component, paymentArea, itemId, description) => {\n    const paymentMethod = await import(`paygw_${gateway}/gateways_modal`);\n    return paymentMethod.process(component, paymentArea, itemId, description);\n};\n\n/**\n * Set up the payment actions.\n */\nexport const init = () => {\n    if (!init.initialised) {\n        // Event listeners should only be registered once.\n        init.initialised = true;\n        registerEventListeners();\n    }\n};\n\n/**\n * Whether the init function was called before.\n *\n * @static\n * @type {boolean}\n */\ninit.initialised = false;\n"],"names":["_templates","_interopRequireDefault","_selectors","_modal_events","_events","_notification","_modal_gateways","_systemImportTransformerGlobalIdentifier","window","self","global","e","__esModule","default","show","async","rootNode","focusOnClose","arguments","length","undefined","body","Templates","render","modal","ModalGateways","create","title","getString","removeOnClose","rootElement","getRoot","addToastRegion","on","ModalEvents","hidden","focus","PaymentEvents","proceed","preventDefault","gateway","querySelector","Selectors","values","value","processPayment","dataset","component","paymentarea","itemid","description","then","message","hide","Notification","addNotification","type","location","href","successurl","catch","alert","addToast","addEventListener","target","matches","elements","gateways","updateCostRegion","cost","context","getAvailableGateways","html","js","renderForPromise","replaceNodeContents","regions","gatewaysContainer","selectSingleGateway","root","querySelectorAll","checked","defaultCost","gatewayElement","surcharge","parseInt","valueStr","fee","surchargeStr","label","surchargestr","costContainer","paymentArea","itemId","define","amd","Promise","resolve","reject","require","module","exports","loader","process","init","initialised","document","gatewayTrigger","closest","_exports"],"mappings":"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"}