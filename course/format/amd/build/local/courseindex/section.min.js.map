{"version":3,"file":"section.min.js","sources":["../../../src/local/courseindex/section.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course index section component.\n *\n * This component is used to control specific course section interactions like drag and drop.\n *\n * @module     core_courseformat/local/courseindex/section\n * @class      core_courseformat/local/courseindex/section\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport SectionTitle from 'core_courseformat/local/courseindex/sectiontitle';\nimport DndSection from 'core_courseformat/local/courseeditor/dndsection';\n\nexport default class Component extends DndSection {\n\n    /**\n     * Constructor hook.\n     */\n    create() {\n        // Optional component name for debugging.\n        this.name = 'courseindex_section';\n        // Default query selectors.\n        this.selectors = {\n            SECTION: `[data-for='section']`,\n            SECTION_ITEM: `[data-for='section_item']`,\n            SECTION_TITLE: `[data-for='section_title']`,\n            CM_LAST: `[data-for=\"cm\"]:last-child`,\n        };\n        // Default classes to toggle on refresh.\n        this.classes = {\n            SECTIONHIDDEN: 'dimmed',\n            SECTIONCURRENT: 'current',\n            LOCKED: 'editinprogress',\n            RESTRICTIONS: 'restrictions',\n            PAGEITEM: 'pageitem',\n            OVERLAYBORDERS: 'overlay-preview-borders',\n        };\n\n        // We need our id to watch specific events.\n        this.id = this.element.dataset.id;\n        this.isPageItem = false;\n    }\n\n    /**\n     * Static method to create a component instance form the mustahce template.\n     *\n     * @param {string} target the DOM main element or its ID\n     * @param {object} selectors optional css selector overrides\n     * @return {Component}\n     */\n    static init(target, selectors) {\n        return new this({\n            element: document.getElementById(target),\n            selectors,\n        });\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     * @param {Object} state the initial state\n     */\n    stateReady(state) {\n        this.configState(state);\n        const sectionItem = this.getElement(this.selectors.SECTION_ITEM);\n        // Drag and drop is only available for components compatible course formats.\n        if (this.reactive.isEditing && this.reactive.supportComponents) {\n            // Init the inner dragable element passing the full section as affected region.\n            const titleitem = new SectionTitle({\n                ...this,\n                element: sectionItem,\n                fullregion: this.element,\n            });\n            this.configDragDrop(titleitem);\n        }\n        // Check if the current url is the section url.\n        const section = state.section.get(this.id);\n        if (window.location.href == section.sectionurl.replace(/&amp;/g, \"&\")) {\n            this.reactive.dispatch('setPageItem', 'section', this.id);\n            sectionItem.scrollIntoView();\n        }\n    }\n\n    /**\n     * Component watchers.\n     *\n     * @returns {Array} of watchers\n     */\n    getWatchers() {\n        return [\n            {watch: `section[${this.id}]:deleted`, handler: this.remove},\n            {watch: `section[${this.id}]:updated`, handler: this._refreshSection},\n            {watch: `course.pageItem:updated`, handler: this._refreshPageItem},\n        ];\n    }\n\n    /**\n     * Get the last CM element of that section.\n     *\n     * @returns {element|null}\n     */\n    getLastCm() {\n        return this.getElement(this.selectors.CM_LAST);\n    }\n\n    /**\n     * Update a course index section using the state information.\n     *\n     * @param {Object} param details the update details.\n     * @param {Object} param.element the section element\n     */\n    _refreshSection({element}) {\n        // Update classes.\n        const sectionItem = this.getElement(this.selectors.SECTION_ITEM);\n        sectionItem.classList.toggle(this.classes.SECTIONHIDDEN, !element.visible);\n        sectionItem.classList.toggle(this.classes.RESTRICTIONS, element.hasrestrictions ?? false);\n        this.element.classList.toggle(this.classes.SECTIONCURRENT, element.current);\n        this.element.classList.toggle(this.classes.DRAGGING, element.dragging ?? false);\n        this.element.classList.toggle(this.classes.LOCKED, element.locked ?? false);\n        this.locked = element.locked;\n        // Update title.\n        this.getElement(this.selectors.SECTION_TITLE).innerHTML = element.title;\n    }\n\n    /**\n     * Handle a page item update.\n     *\n     * @param {Object} details the update details\n     * @param {Object} details.state the state data.\n     * @param {Object} details.element the course state data.\n     */\n    _refreshPageItem({element, state}) {\n        if (!element.pageItem) {\n            return;\n        }\n\n        const containsPageItem = this._isPageItemInThisSection(element.pageItem);\n\n        if (!containsPageItem || this._isParentSectionIndexCollapsed(state)) {\n            this.pageItem = false;\n            this.getElement(this.selectors.SECTION_ITEM).classList.remove(this.classes.PAGEITEM);\n            return;\n        }\n\n        const section = state.section.get(this.id);\n        if (section.indexcollapsed && !element.pageItem?.isStatic) {\n            this.pageItem = containsPageItem;\n        } else {\n            this.pageItem = (element.pageItem.type == 'section' && element.pageItem.id == this.id);\n        }\n        const sectionItem = this.getElement(this.selectors.SECTION_ITEM);\n        sectionItem.classList.toggle(this.classes.PAGEITEM, this.pageItem ?? false);\n        if (this.pageItem && !this.reactive.isEditing) {\n            this.element.scrollIntoView({block: \"nearest\"});\n        }\n    }\n\n    /**\n     * Check if the page item is inside this section.\n     *\n     * @private\n     * @param {Object} pageItem\n     * @param {Object} pageItem.sectionId the current page item section id.\n     * @returns {boolean}\n     */\n    _isPageItemInThisSection(pageItem) {\n        if (pageItem.sectionId == this.id) {\n            return true;\n        }\n        // Check for any possible subsections.\n        const subsection = this.element.querySelector(`${this.selectors.SECTION}[data-id=\"${pageItem.sectionId}\"]`);\n        if (subsection) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Check if the parent section index is collapsed.\n     *\n     * @private\n     * @param {Object} state the current state\n     * @returns {boolean|null} null if no parent section is found.\n     */\n    _isParentSectionIndexCollapsed(state) {\n        const parentElement = this.element.parentElement.closest(this.selectors.SECTION);\n        if (!parentElement || !parentElement.dataset.id) {\n            return null;\n        }\n        const parentSection = state.section.get(parentElement.dataset.id);\n        return !!parentSection.indexcollapsed;\n    }\n\n    /**\n     * Overridden version of the component addOverlay async method.\n     *\n     * The course index is not compatible with overlay elements.\n     */\n    async addOverlay() {\n        this.element.classList.add(this.classes.OVERLAYBORDERS);\n    }\n\n    /**\n     * Overridden version of the component removeOverlay.\n     *\n     * The course index is not compatible with overlay elements.\n     */\n    removeOverlay() {\n        this.element.classList.remove(this.classes.OVERLAYBORDERS);\n    }\n}\n"],"names":["_interopRequireDefault","e","__esModule","default","_sectiontitle","_dndsection","Component","DndSection","create","this","name","selectors","SECTION","SECTION_ITEM","SECTION_TITLE","CM_LAST","classes","SECTIONHIDDEN","SECTIONCURRENT","LOCKED","RESTRICTIONS","PAGEITEM","OVERLAYBORDERS","id","element","dataset","isPageItem","init","target","document","getElementById","stateReady","state","configState","sectionItem","getElement","reactive","isEditing","supportComponents","titleitem","SectionTitle","fullregion","configDragDrop","section","get","window","location","href","sectionurl","replace","dispatch","scrollIntoView","getWatchers","watch","handler","remove","_refreshSection","_refreshPageItem","getLastCm","_ref","classList","toggle","visible","hasrestrictions","current","DRAGGING","dragging","locked","innerHTML","title","_ref2","_element$pageItem","pageItem","containsPageItem","_isPageItemInThisSection","_isParentSectionIndexCollapsed","indexcollapsed","isStatic","type","block","sectionId","querySelector","parentElement","closest","addOverlay","add","removeOverlay","_exports"],"mappings":"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"}