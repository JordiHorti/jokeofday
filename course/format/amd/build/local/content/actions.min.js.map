{"version":3,"file":"actions.min.js","sources":["../../../src/local/content/actions.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course state actions dispatcher.\n *\n * This module captures all data-dispatch links in the course content and dispatch the proper\n * state mutation, including any confirmation and modal required.\n *\n * @module     core_courseformat/local/content/actions\n * @class      core_courseformat/local/content/actions\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {BaseComponent} from 'core/reactive';\nimport Modal from 'core/modal';\nimport ModalSaveCancel from 'core/modal_save_cancel';\nimport ModalDeleteCancel from 'core/modal_delete_cancel';\nimport ModalEvents from 'core/modal_events';\nimport Templates from 'core/templates';\nimport {prefetchStrings} from 'core/prefetch';\nimport {getString} from 'core/str';\nimport {getFirst} from 'core/normalise';\nimport {toggleBulkSelectionAction} from 'core_courseformat/local/content/actions/bulkselection';\nimport * as CourseEvents from 'core_course/events';\nimport Pending from 'core/pending';\nimport ContentTree from 'core_courseformat/local/courseeditor/contenttree';\n// The jQuery module is only used for interacting with Boostrap 4. It can we removed when MDL-71979 is integrated.\nimport jQuery from 'jquery';\nimport Notification from \"core/notification\";\n\n// Load global strings.\nprefetchStrings('core', ['movecoursesection', 'movecoursemodule', 'confirm', 'delete']);\n\n// Mutations are dispatched by the course content actions.\n// Formats can use this module addActions static method to add custom actions.\n// Direct mutations can be simple strings (mutation) name or functions.\nconst directMutations = {\n    sectionHide: 'sectionHide',\n    sectionShow: 'sectionShow',\n    cmHide: 'cmHide',\n    cmShow: 'cmShow',\n    cmStealth: 'cmStealth',\n    cmMoveRight: 'cmMoveRight',\n    cmMoveLeft: 'cmMoveLeft',\n    cmNoGroups: 'cmNoGroups',\n    cmSeparateGroups: 'cmSeparateGroups',\n    cmVisibleGroups: 'cmVisibleGroups',\n};\n\nexport default class extends BaseComponent {\n\n    /**\n     * Constructor hook.\n     */\n    create() {\n        // Optional component name for debugging.\n        this.name = 'content_actions';\n        // Default query selectors.\n        this.selectors = {\n            ACTIONLINK: `[data-action]`,\n            // Move modal selectors.\n            SECTIONLINK: `[data-for='section']`,\n            CMLINK: `[data-for='cm']`,\n            SECTIONNODE: `[data-for='sectionnode']`,\n            MODALTOGGLER: `[data-toggle='collapse']`,\n            ADDSECTION: `[data-action='addSection']`,\n            CONTENTTREE: `#destination-selector`,\n            ACTIONMENU: `.action-menu`,\n            ACTIONMENUTOGGLER: `[data-toggle=\"dropdown\"]`,\n            // Availability modal selectors.\n            OPTIONSRADIO: `[type='radio']`,\n            COURSEADDSECTION: `#course-addsection`,\n            MAXSECTIONSWARNING: `[data-region='max-sections-warning']`,\n            ADDSECTIONREGION: `[data-region='section-addsection']`,\n        };\n        // Component css classes.\n        this.classes = {\n            DISABLED: `disabled`,\n            ITALIC: `font-italic`,\n            DISPLAYNONE: `d-none`,\n        };\n    }\n\n    /**\n     * Add extra actions to the module.\n     *\n     * @param {array} actions array of methods to execute\n     */\n    static addActions(actions) {\n        for (const [action, mutationReference] of Object.entries(actions)) {\n            if (typeof mutationReference !== 'function' && typeof mutationReference !== 'string') {\n                throw new Error(`${action} action must be a mutation name or a function`);\n            }\n            directMutations[action] = mutationReference;\n        }\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     * @param {Object} state the state data.\n     *\n     */\n    stateReady(state) {\n        // Delegate dispatch clicks.\n        this.addEventListener(\n            this.element,\n            'click',\n            this._dispatchClick\n        );\n        // Check section limit.\n        this._checkSectionlist({state});\n        // Add an Event listener to recalculate limits it if a section HTML is altered.\n        this.addEventListener(\n            this.element,\n            CourseEvents.sectionRefreshed,\n            () => this._checkSectionlist({state})\n        );\n    }\n\n    /**\n     * Return the component watchers.\n     *\n     * @returns {Array} of watchers\n     */\n    getWatchers() {\n        return [\n            // Check section limit.\n            {watch: `course.sectionlist:updated`, handler: this._checkSectionlist},\n        ];\n    }\n\n    _dispatchClick(event) {\n        const target = event.target.closest(this.selectors.ACTIONLINK);\n        if (!target) {\n            return;\n        }\n        if (target.classList.contains(this.classes.DISABLED)) {\n            event.preventDefault();\n            return;\n        }\n\n        // Invoke proper method.\n        const actionName = target.dataset.action;\n        const methodName = this._actionMethodName(actionName);\n\n        if (this[methodName] !== undefined) {\n            this[methodName](target, event);\n            return;\n        }\n\n        // Check direct mutations or mutations handlers.\n        if (directMutations[actionName] !== undefined) {\n            if (typeof directMutations[actionName] === 'function') {\n                directMutations[actionName](target, event);\n                return;\n            }\n            this._requestMutationAction(target, event, directMutations[actionName]);\n            return;\n        }\n    }\n\n    _actionMethodName(name) {\n        const requestName = name.charAt(0).toUpperCase() + name.slice(1);\n        return `_request${requestName}`;\n    }\n\n    /**\n     * Check the section list and disable some options if needed.\n     *\n     * @param {Object} detail the update details.\n     * @param {Object} detail.state the state object.\n     */\n    _checkSectionlist({state}) {\n        // Disable \"add section\" actions if the course max sections has been exceeded.\n        this._setAddSectionLocked(state.course.sectionlist.length > state.course.maxsections);\n    }\n\n    /**\n     * Return the ids represented by this element.\n     *\n     * Depending on the dataset attributes the action could represent a single id\n     * or a bulk actions with all the current selected ids.\n     *\n     * @param {HTMLElement} target\n     * @returns {Number[]} array of Ids\n     */\n    _getTargetIds(target) {\n        let ids = [];\n        if (target?.dataset?.id) {\n            ids.push(target.dataset.id);\n        }\n        const bulkType = target?.dataset?.bulk;\n        if (!bulkType) {\n            return ids;\n        }\n        const bulk = this.reactive.get('bulk');\n        if (bulk.enabled && bulk.selectedType === bulkType) {\n            ids = [...ids, ...bulk.selection];\n        }\n        return ids;\n    }\n\n    /**\n     * Handle a move section request.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     */\n    async _requestMoveSection(target, event) {\n        // Check we have an id.\n        const sectionIds = this._getTargetIds(target);\n        if (sectionIds.length == 0) {\n            return;\n        }\n\n        event.preventDefault();\n\n        const pendingModalReady = new Pending(`courseformat/actions:prepareMoveSectionModal`);\n\n        // The section edit menu to refocus on end.\n        const editTools = this._getClosestActionMenuToogler(target);\n\n        // Collect section information from the state.\n        const exporter = this.reactive.getExporter();\n        const data = exporter.course(this.reactive.state);\n        let titleText = null;\n\n        // Add the target section id and title.\n        let sectionInfo = null;\n        if (sectionIds.length == 1) {\n            sectionInfo = this.reactive.get('section', sectionIds[0]);\n            data.sectionid = sectionInfo.id;\n            data.sectiontitle = sectionInfo.title;\n            data.information = await this.reactive.getFormatString('sectionmove_info', data.sectiontitle);\n            titleText = this.reactive.getFormatString('sectionmove_title');\n        } else {\n            data.information = await this.reactive.getFormatString('sectionsmove_info', sectionIds.length);\n            titleText = this.reactive.getFormatString('sectionsmove_title');\n        }\n\n\n        // Create the modal.\n        // Build the modal parameters from the event data.\n        const modal = await this._modalBodyRenderedPromise(Modal, {\n            title: titleText,\n            body: Templates.render('core_courseformat/local/content/movesection', data),\n        });\n\n        const modalBody = getFirst(modal.getBody());\n\n        // Disable current selected section ids.\n        sectionIds.forEach(sectionId => {\n            const currentElement = modalBody.querySelector(`${this.selectors.SECTIONLINK}[data-id='${sectionId}']`);\n            this._disableLink(currentElement);\n        });\n\n        // Setup keyboard navigation.\n        new ContentTree(\n            modalBody.querySelector(this.selectors.CONTENTTREE),\n            {\n                SECTION: this.selectors.SECTIONNODE,\n                TOGGLER: this.selectors.MODALTOGGLER,\n                COLLAPSE: this.selectors.MODALTOGGLER,\n            },\n            true\n        );\n\n        // Capture click.\n        modalBody.addEventListener('click', (event) => {\n            const target = event.target;\n            if (!target.matches('a') || target.dataset.for != 'section' || target.dataset.id === undefined) {\n                return;\n            }\n            if (target.getAttribute('aria-disabled')) {\n                return;\n            }\n            event.preventDefault();\n            this.reactive.dispatch('sectionMoveAfter', sectionIds, target.dataset.id);\n            this._destroyModal(modal, editTools);\n        });\n\n        pendingModalReady.resolve();\n    }\n\n    /**\n     * Handle a move cm request.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     */\n    async _requestMoveCm(target, event) {\n        // Check we have an id.\n        const cmIds = this._getTargetIds(target);\n        if (cmIds.length == 0) {\n            return;\n        }\n\n        event.preventDefault();\n\n        const pendingModalReady = new Pending(`courseformat/actions:prepareMoveCmModal`);\n\n        // The section edit menu to refocus on end.\n        const editTools = this._getClosestActionMenuToogler(target);\n\n        // Collect information from the state.\n        const exporter = this.reactive.getExporter();\n        const data = exporter.course(this.reactive.state);\n\n        let titleText = null;\n        if (cmIds.length == 1) {\n            const cmInfo = this.reactive.get('cm', cmIds[0]);\n            data.cmid = cmInfo.id;\n            data.cmname = cmInfo.name;\n            data.information = await this.reactive.getFormatString('cmmove_info', data.cmname);\n            if (cmInfo.hasdelegatedsection) {\n                titleText = this.reactive.getFormatString('cmmove_subsectiontitle');\n            } else {\n                titleText = this.reactive.getFormatString('cmmove_title');\n            }\n        } else {\n            data.information = await this.reactive.getFormatString('cmsmove_info', cmIds.length);\n            titleText = this.reactive.getFormatString('cmsmove_title');\n        }\n\n        // Create the modal.\n        // Build the modal parameters from the event data.\n        const modal = await this._modalBodyRenderedPromise(Modal, {\n            title: titleText,\n            body: Templates.render('core_courseformat/local/content/movecm', data),\n        });\n\n        const modalBody = getFirst(modal.getBody());\n\n        // Disable current selected section ids.\n        cmIds.forEach(cmId => {\n            const currentElement = modalBody.querySelector(`${this.selectors.CMLINK}[data-id='${cmId}']`);\n            this._disableLink(currentElement);\n        });\n\n        // Setup keyboard navigation.\n        new ContentTree(\n            modalBody.querySelector(this.selectors.CONTENTTREE),\n            {\n                SECTION: this.selectors.SECTIONNODE,\n                TOGGLER: this.selectors.MODALTOGGLER,\n                COLLAPSE: this.selectors.MODALTOGGLER,\n                ENTER: this.selectors.SECTIONLINK,\n            }\n        );\n\n        // Open the cm section node if possible (Bootstrap 4 uses jQuery to interact with collapsibles).\n        // All jQuery in this code can be replaced when MDL-71979 is integrated.\n        cmIds.forEach(cmId => {\n            const cmInfo = this.reactive.get('cm', cmId);\n            let selector;\n            if (!cmInfo.hasdelegatedsection) {\n                selector = `${this.selectors.CMLINK}[data-id='${cmId}']`;\n            } else {\n                selector = `${this.selectors.SECTIONLINK}[data-id='${cmInfo.sectionid}']`;\n            }\n            const currentElement = modalBody.querySelector(selector);\n            this._expandCmMoveModalParentSections(modalBody, currentElement);\n        });\n\n        modalBody.addEventListener('click', (event) => {\n            const target = event.target;\n            if (!target.matches('a') || target.dataset.for === undefined || target.dataset.id === undefined) {\n                return;\n            }\n            if (target.getAttribute('aria-disabled')) {\n                return;\n            }\n            event.preventDefault();\n\n            let targetSectionId;\n            let targetCmId;\n            let droppedCmIds = [...cmIds];\n            if (target.dataset.for == 'cm') {\n                const dropData = exporter.cmDraggableData(this.reactive.state, target.dataset.id);\n                targetSectionId = dropData.sectionid;\n                targetCmId = dropData.nextcmid;\n            } else {\n                const section = this.reactive.get('section', target.dataset.id);\n                targetSectionId = target.dataset.id;\n                targetCmId = section?.cmlist[0];\n            }\n            const section = this.reactive.get('section', targetSectionId);\n            if (section.component) {\n                // Remove cmIds which are not allowed to be moved to this delegated section (mostly\n                // all other delegated cm).\n                droppedCmIds = droppedCmIds.filter(cmId => {\n                    const cmInfo = this.reactive.get('cm', cmId);\n                    return !cmInfo.hasdelegatedsection;\n                });\n            }\n            if (droppedCmIds.length === 0) {\n                return; // No cm to move.\n            }\n            this.reactive.dispatch('cmMove', droppedCmIds, targetSectionId, targetCmId);\n            this._destroyModal(modal, editTools);\n        });\n\n        pendingModalReady.resolve();\n    }\n\n    /**\n     * Expand all the modal tree branches that contains the element.\n     *\n     * Bootstrap 4 uses jQuery to interact with collapsibles.\n     * All jQuery in this code can be replaced when MDL-71979 is integrated.\n     *\n     * @private\n     * @param {HTMLElement} modalBody the modal body element\n     * @param {HTMLElement} element the element to display\n     */\n    _expandCmMoveModalParentSections(modalBody, element) {\n        const sectionnode = element.closest(this.selectors.SECTIONNODE);\n        if (!sectionnode) {\n            return;\n        }\n\n        const toggler = jQuery(sectionnode).find(this.selectors.MODALTOGGLER);\n        let collapsibleId = toggler.data('target') ?? toggler.attr('href');\n        if (collapsibleId) {\n            // We cannot be sure we have # in the id element name.\n            collapsibleId = collapsibleId.replace('#', '');\n            const expandNode = modalBody.querySelector(`#${collapsibleId}`);\n            jQuery(expandNode).collapse('show');\n        }\n\n        // Section are a tree structure, we need to expand all the parents.\n        this._expandCmMoveModalParentSections(modalBody, sectionnode.parentElement);\n    }\n\n    /**\n     * Handle a create section request.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     */\n    async _requestAddSection(target, event) {\n        event.preventDefault();\n        this.reactive.dispatch('addSection', target.dataset.id ?? 0);\n    }\n\n    /**\n     * Handle a create subsection request.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     */\n    async _requestAddModule(target, event) {\n        event.preventDefault();\n        this.reactive.dispatch('addModule', target.dataset.modname, target.dataset.sectionnum, target.dataset.beforemod);\n    }\n\n    /**\n     * Handle a delete section request.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     */\n    async _requestDeleteSection(target, event) {\n        const sectionIds = this._getTargetIds(target);\n        if (sectionIds.length == 0) {\n            return;\n        }\n\n        event.preventDefault();\n\n        // We don't need confirmation to delete empty sections.\n        let needsConfirmation = sectionIds.some(sectionId => {\n            const sectionInfo = this.reactive.get('section', sectionId);\n            const cmList = sectionInfo.cmlist ?? [];\n            return (cmList.length || sectionInfo.hassummary || sectionInfo.rawtitle);\n        });\n        if (!needsConfirmation) {\n            this._dispatchSectionDelete(sectionIds, target);\n            return;\n        }\n\n        let bodyText = null;\n        let titleText = null;\n        if (sectionIds.length == 1) {\n            titleText = this.reactive.getFormatString('sectiondelete_title');\n            const sectionInfo = this.reactive.get('section', sectionIds[0]);\n            bodyText = this.reactive.getFormatString('sectiondelete_info', {name: sectionInfo.title});\n        } else {\n            titleText = this.reactive.getFormatString('sectionsdelete_title');\n            bodyText = this.reactive.getFormatString('sectionsdelete_info', {count: sectionIds.length});\n        }\n\n        const modal = await this._modalBodyRenderedPromise(ModalDeleteCancel, {\n            title: titleText,\n            body: bodyText,\n        });\n\n        modal.getRoot().on(\n            ModalEvents.delete,\n            e => {\n                // Stop the default save button behaviour which is to close the modal.\n                e.preventDefault();\n                modal.destroy();\n                this._dispatchSectionDelete(sectionIds, target);\n            }\n        );\n    }\n\n    /**\n     * Dispatch the section delete action and handle the redirection if necessary.\n     *\n     * @param {Array} sectionIds  the IDs of the sections to delete.\n     * @param {Element} target the dispatch action element\n     */\n    async _dispatchSectionDelete(sectionIds, target) {\n        await this.reactive.dispatch('sectionDelete', sectionIds);\n        if (target.baseURI.includes('section.php')) {\n            // Redirect to the course main page if the section is the current page.\n            window.location.href = this.reactive.get('course').baseurl;\n        }\n    }\n\n    /**\n     * Handle a toggle cm selection.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     */\n    async _requestToggleSelectionCm(target, event) {\n        toggleBulkSelectionAction(this.reactive, target, event, 'cm');\n    }\n\n    /**\n     * Handle a toggle section selection.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     */\n    async _requestToggleSelectionSection(target, event) {\n        toggleBulkSelectionAction(this.reactive, target, event, 'section');\n    }\n\n    /**\n     * Basic mutation action helper.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     * @param {string} mutationName the mutation name\n     */\n    async _requestMutationAction(target, event, mutationName) {\n        if (!target.dataset.id && target.dataset.for !== 'bulkaction') {\n            return;\n        }\n        event.preventDefault();\n        if (target.dataset.for === 'bulkaction') {\n            // If the mutation is a bulk action we use the current selection.\n            this.reactive.dispatch(mutationName, this.reactive.get('bulk').selection);\n        } else {\n            this.reactive.dispatch(mutationName, [target.dataset.id]);\n        }\n    }\n\n    /**\n     * Handle a course module duplicate request.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     */\n    async _requestCmDuplicate(target, event) {\n        const cmIds = this._getTargetIds(target);\n        if (cmIds.length == 0) {\n            return;\n        }\n        const sectionId = target.dataset.sectionid ?? null;\n        event.preventDefault();\n        this.reactive.dispatch('cmDuplicate', cmIds, sectionId);\n    }\n\n    /**\n     * Handle a delete cm request.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     */\n    async _requestCmDelete(target, event) {\n        const cmIds = this._getTargetIds(target);\n        if (cmIds.length == 0) {\n            return;\n        }\n\n        event.preventDefault();\n\n        let bodyText = null;\n        let titleText = null;\n        let delegatedsection = null;\n        if (cmIds.length == 1) {\n            const cmInfo = this.reactive.get('cm', cmIds[0]);\n            if (cmInfo.hasdelegatedsection) {\n                delegatedsection = cmInfo.delegatesectionid;\n                titleText = this.reactive.getFormatString('cmdelete_subsectiontitle');\n                bodyText = getString(\n                    'sectiondelete_info',\n                    'core_courseformat',\n                    {\n                        type: cmInfo.modname,\n                        name: cmInfo.name,\n                    }\n                );\n            } else {\n                titleText = this.reactive.getFormatString('cmdelete_title');\n                bodyText = getString(\n                    'cmdelete_info',\n                    'core_courseformat',\n                    {\n                        type: cmInfo.modname,\n                        name: cmInfo.name,\n                    }\n                );\n            }\n        } else {\n            titleText = getString('cmsdelete_title', 'core_courseformat');\n            bodyText = getString(\n                'cmsdelete_info',\n                'core_courseformat',\n                {count: cmIds.length}\n            );\n        }\n\n        const modal = await this._modalBodyRenderedPromise(ModalDeleteCancel, {\n            title: titleText,\n            body: bodyText,\n        });\n\n        modal.getRoot().on(\n            ModalEvents.delete,\n            e => {\n                // Stop the default save button behaviour which is to close the modal.\n                e.preventDefault();\n                modal.destroy();\n                this.reactive.dispatch('cmDelete', cmIds);\n                if (cmIds.length == 1 && delegatedsection && target.baseURI.includes('section.php')) {\n                    // Redirect to the course main page if the subsection is the current page.\n                    let parameters = new URLSearchParams(window.location.search);\n                    if (parameters.has('id') && parameters.get('id') == delegatedsection) {\n                        this._dispatchSectionDelete([delegatedsection], target);\n                    }\n                }\n            }\n        );\n    }\n\n    /**\n     * Handle a cm availability change request.\n     *\n     * @param {Element} target the dispatch action element\n     */\n    async _requestCmAvailability(target) {\n        const cmIds = this._getTargetIds(target);\n        if (cmIds.length == 0) {\n            return;\n        }\n        // Show the availability modal to decide which action to trigger.\n        const exporter = this.reactive.getExporter();\n        const data = {\n            allowstealth: exporter.canUseStealth(this.reactive.state, cmIds),\n        };\n        const modal = await this._modalBodyRenderedPromise(ModalSaveCancel, {\n            title: getString('availability', 'core'),\n            body: Templates.render('core_courseformat/local/content/cm/availabilitymodal', data),\n            saveButtonText: getString('apply', 'core'),\n        });\n\n        this._setupMutationRadioButtonModal(modal, cmIds);\n    }\n\n    /**\n     * Handle a section availability change request.\n     *\n     * @param {Element} target the dispatch action element\n     */\n    async _requestSectionAvailability(target) {\n        const sectionIds = this._getTargetIds(target);\n        if (sectionIds.length == 0) {\n            return;\n        }\n        const title = (sectionIds.length == 1) ? 'sectionavailability_title' : 'sectionsavailability_title';\n        // Show the availability modal to decide which action to trigger.\n        const modal = await this._modalBodyRenderedPromise(ModalSaveCancel, {\n            title: this.reactive.getFormatString(title),\n            body: Templates.render('core_courseformat/local/content/section/availabilitymodal', []),\n            saveButtonText: getString('apply', 'core'),\n        });\n\n        this._setupMutationRadioButtonModal(modal, sectionIds);\n    }\n\n    /**\n     * Add events to a mutation selector radio buttons modal.\n     * @param {Modal} modal\n     * @param {Number[]} ids the section or cm ids to apply the mutation\n     */\n    _setupMutationRadioButtonModal(modal, ids) {\n        // The save button is not enabled until the user selects an option.\n        modal.setButtonDisabled('save', true);\n\n        const submitFunction = (radio) => {\n            const mutation = radio?.value;\n            if (!mutation) {\n                return false;\n            }\n            this.reactive.dispatch(mutation, ids);\n            return true;\n        };\n\n        const modalBody = getFirst(modal.getBody());\n        const radioOptions = modalBody.querySelectorAll(this.selectors.OPTIONSRADIO);\n        radioOptions.forEach(radio => {\n            radio.addEventListener('change', () => {\n                modal.setButtonDisabled('save', false);\n            });\n            radio.parentNode.addEventListener('click', () => {\n                radio.checked = true;\n                modal.setButtonDisabled('save', false);\n            });\n            radio.parentNode.addEventListener('dblclick', dbClickEvent => {\n                if (submitFunction(radio)) {\n                    dbClickEvent.preventDefault();\n                    modal.destroy();\n                }\n            });\n        });\n\n        modal.getRoot().on(\n            ModalEvents.save,\n            () => {\n                const radio = modalBody.querySelector(`${this.selectors.OPTIONSRADIO}:checked`);\n                submitFunction(radio);\n            }\n        );\n    }\n\n    /**\n     * Disable all add sections actions.\n     *\n     * @param {boolean} locked the new locked value.\n     */\n    _setAddSectionLocked(locked) {\n        const targets = this.getElements(this.selectors.ADDSECTIONREGION);\n        targets.forEach(element => {\n            element.classList.toggle(this.classes.DISABLED, locked);\n            const addSectionElement = element.querySelector(this.selectors.ADDSECTION);\n            addSectionElement.classList.toggle(this.classes.DISABLED, locked);\n            this.setElementLocked(addSectionElement, locked);\n            // We tweak the element to show a tooltip as a title attribute.\n            if (locked) {\n                getString('sectionaddmax', 'core_courseformat')\n                    .then((text) => addSectionElement.setAttribute('title', text))\n                    .catch(Notification.exception);\n                addSectionElement.style.pointerEvents = null; // Unlocks the pointer events.\n                addSectionElement.style.userSelect = null; // Unlocks the pointer events.\n            } else {\n                addSectionElement.setAttribute('title', addSectionElement.dataset.addSections);\n            }\n        });\n        const courseAddSection = this.getElement(this.selectors.COURSEADDSECTION);\n        if (courseAddSection) {\n            const addSection = courseAddSection.querySelector(this.selectors.ADDSECTION);\n            addSection.classList.toggle(this.classes.DISPLAYNONE, locked);\n            const noMoreSections = courseAddSection.querySelector(this.selectors.MAXSECTIONSWARNING);\n            noMoreSections.classList.toggle(this.classes.DISPLAYNONE, !locked);\n        }\n    }\n\n    /**\n     * Replace an element with a copy with a different tag name.\n     *\n     * @param {Element} element the original element\n     */\n    _disableLink(element) {\n        if (element) {\n            element.style.pointerEvents = 'none';\n            element.style.userSelect = 'none';\n            element.classList.add(this.classes.DISABLED);\n            element.classList.add(this.classes.ITALIC);\n            element.setAttribute('aria-disabled', true);\n            element.addEventListener('click', event => event.preventDefault());\n        }\n    }\n\n    /**\n     * Render a modal and return a body ready promise.\n     *\n     * @param {Modal} ModalClass the modal class\n     * @param {object} modalParams the modal params\n     * @return {Promise} the modal body ready promise\n     */\n    _modalBodyRenderedPromise(ModalClass, modalParams) {\n        return new Promise((resolve, reject) => {\n            ModalClass.create(modalParams).then((modal) => {\n                modal.setRemoveOnClose(true);\n                // Handle body loading event.\n                modal.getRoot().on(ModalEvents.bodyRendered, () => {\n                    resolve(modal);\n                });\n                // Configure some extra modal params.\n                if (modalParams.saveButtonText !== undefined) {\n                    modal.setSaveButtonText(modalParams.saveButtonText);\n                }\n                if (modalParams.deleteButtonText !== undefined) {\n                    modal.setDeleteButtonText(modalParams.saveButtonText);\n                }\n                modal.show();\n                return;\n            }).catch(() => {\n                reject(`Cannot load modal content`);\n            });\n        });\n    }\n\n    /**\n     * Hide and later destroy a modal.\n     *\n     * Behat will fail if we remove the modal while some boostrap collapse is executing.\n     *\n     * @param {Modal} modal\n     * @param {HTMLElement} element the dom element to focus on.\n     */\n    _destroyModal(modal, element) {\n        modal.hide();\n        const pendingDestroy = new Pending(`courseformat/actions:destroyModal`);\n        if (element) {\n            element.focus();\n        }\n        setTimeout(() =>{\n            modal.destroy();\n            pendingDestroy.resolve();\n        }, 500);\n    }\n\n    /**\n     * Get the closest actions menu toggler to an action element.\n     *\n     * @param {HTMLElement} element the action link element\n     * @returns {HTMLElement|undefined}\n     */\n    _getClosestActionMenuToogler(element) {\n        const actionMenu = element.closest(this.selectors.ACTIONMENU);\n        if (!actionMenu) {\n            return undefined;\n        }\n        return actionMenu.querySelector(this.selectors.ACTIONMENUTOGGLER);\n    }\n}\n"],"names":["_getRequireWildcardCache","e","WeakMap","r","t","_interopRequireDefault","__esModule","default","_modal","_modal_save_cancel","_modal_delete_cancel","_modal_events","_templates","CourseEvents","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_interopRequireWildcard","_pending","_contenttree","_jquery","_notification","prefetchStrings","directMutations","sectionHide","sectionShow","cmHide","cmShow","cmStealth","cmMoveRight","cmMoveLeft","cmNoGroups","cmSeparateGroups","cmVisibleGroups","_default","BaseComponent","create","this","name","selectors","ACTIONLINK","SECTIONLINK","CMLINK","SECTIONNODE","MODALTOGGLER","ADDSECTION","CONTENTTREE","ACTIONMENU","ACTIONMENUTOGGLER","OPTIONSRADIO","COURSEADDSECTION","MAXSECTIONSWARNING","ADDSECTIONREGION","classes","DISABLED","ITALIC","DISPLAYNONE","addActions","actions","action","mutationReference","entries","Error","stateReady","state","addEventListener","element","_dispatchClick","_checkSectionlist","sectionRefreshed","getWatchers","watch","handler","event","target","closest","classList","contains","preventDefault","actionName","dataset","methodName","_actionMethodName","undefined","_requestMutationAction","charAt","toUpperCase","slice","_ref","_setAddSectionLocked","course","sectionlist","length","maxsections","_getTargetIds","_target$dataset","_target$dataset2","ids","id","push","bulkType","bulk","reactive","enabled","selectedType","selection","_requestMoveSection","sectionIds","pendingModalReady","Pending","editTools","_getClosestActionMenuToogler","data","getExporter","titleText","sectionInfo","sectionid","sectiontitle","title","information","getFormatString","modal","_modalBodyRenderedPromise","Modal","body","Templates","render","modalBody","getFirst","getBody","forEach","sectionId","currentElement","querySelector","_disableLink","ContentTree","SECTION","TOGGLER","COLLAPSE","matches","for","getAttribute","dispatch","_destroyModal","resolve","_requestMoveCm","cmIds","exporter","cmInfo","cmid","cmname","hasdelegatedsection","cmId","ENTER","selector","_expandCmMoveModalParentSections","targetSectionId","targetCmId","droppedCmIds","dropData","cmDraggableData","nextcmid","section","cmlist","component","filter","sectionnode","toggler","jQuery","find","collapsibleId","attr","replace","expandNode","collapse","parentElement","_requestAddSection","_requestAddModule","modname","sectionnum","beforemod","_requestDeleteSection","some","hassummary","rawtitle","_dispatchSectionDelete","bodyText","count","ModalDeleteCancel","getRoot","on","ModalEvents","delete","destroy","baseURI","includes","window","location","href","baseurl","_requestToggleSelectionCm","toggleBulkSelectionAction","_requestToggleSelectionSection","mutationName","_requestCmDuplicate","_requestCmDelete","delegatedsection","delegatesectionid","getString","type","parameters","URLSearchParams","search","_requestCmAvailability","allowstealth","canUseStealth","ModalSaveCancel","saveButtonText","_setupMutationRadioButtonModal","_requestSectionAvailability","setButtonDisabled","submitFunction","radio","mutation","value","querySelectorAll","parentNode","checked","dbClickEvent","save","locked","getElements","toggle","addSectionElement","setElementLocked","then","text","setAttribute","catch","Notification","exception","style","pointerEvents","userSelect","addSections","courseAddSection","getElement","add","ModalClass","modalParams","Promise","reject","setRemoveOnClose","bodyRendered","setSaveButtonText","deleteButtonText","setDeleteButtonText","show","hide","pendingDestroy","focus","setTimeout","actionMenu","_exports"],"mappings":"mlBA0C6C,SAAAA,yBAAAC,GAAA,GAAA,mBAAAC,QAAA,OAAA,KAAA,IAAAC,EAAAD,IAAAA,QAAAE,EAAAF,IAAAA,eAAAF,yBAAA,SAAAC,GAAAA,OAAAA,EAAAG,EAAAD,IAAAF,EAAA,CAAA,SAAAI,uBAAAJ,GAAAA,OAAAA,GAAAA,EAAAK,WAAAL,EAAAM,CAAAA,QAAAN,EAAA;;;;;;;;;;;qFAd7CO,OAAAH,uBAAAG,QACAC,mBAAAJ,uBAAAI,oBACAC,qBAAAL,uBAAAK,sBACAC,cAAAN,uBAAAM,eACAC,WAAAP,uBAAAO,YAKAC,aAK6C,SAAAZ,EAAAE,GAAAA,IAAAA,GAAAF,GAAAA,EAAAK,WAAAL,OAAAA,EAAAA,GAAAA,OAAAA,GAAAA,iBAAAA,GAAAA,mBAAAA,EAAAM,MAAAA,CAAAA,QAAAN,GAAAG,IAAAA,EAAAJ,yBAAAG,GAAA,GAAAC,GAAAA,EAAAU,IAAAb,GAAA,OAAAG,EAAAW,IAAAd,GAAA,IAAAe,EAAA,CAAAC,UAAA,MAAAC,EAAAC,OAAAC,gBAAAD,OAAAE,yBAAA,IAAA,IAAAC,KAAArB,EAAAqB,GAAAA,YAAAA,GAAAC,CAAAA,EAAAA,eAAAC,KAAAvB,EAAAqB,GAAAG,CAAAA,IAAAA,EAAAP,EAAAC,OAAAE,yBAAApB,EAAAqB,GAAAG,KAAAA,IAAAA,EAAAV,KAAAU,EAAAC,KAAAP,OAAAC,eAAAJ,EAAAM,EAAAG,GAAAT,EAAAM,GAAArB,EAAAqB,GAAAN,OAAAA,EAAAT,QAAAN,EAAAG,GAAAA,EAAAsB,IAAAzB,EAAAe,GAAAA,CAAA,CAL7CW,CAAAd,cACAe,SAAAvB,uBAAAuB,UACAC,aAAAxB,uBAAAwB,cAEAC,QAAAzB,uBAAAyB,SACAC,cAAA1B,uBAAA0B,gBAGA,EAAAC,UAAeA,iBAAC,OAAQ,CAAC,oBAAqB,mBAAoB,UAAW,WAK7E,MAAMC,gBAAkB,CACpBC,YAAa,cACbC,YAAa,cACbC,OAAQ,SACRC,OAAQ,SACRC,UAAW,YACXC,YAAa,cACbC,WAAY,aACZC,WAAY,aACZC,iBAAkB,mBAClBC,gBAAiB,mBAGN,MAAAC,iBAAcC,UAAAA,cAKzBC,MAAAA,GAEIC,KAAKC,KAAO,kBAEZD,KAAKE,UAAY,CACbC,WAAY,gBAEZC,YAAa,uBACbC,OAAQ,kBACRC,YAAa,2BACbC,aAAc,2BACdC,WAAY,6BACZC,YAAa,wBACbC,WAAY,eACZC,kBAAmB,2BAEnBC,aAAc,iBACdC,iBAAkB,qBAClBC,mBAAoB,uCACpBC,iBAAkB,sCAGtBf,KAAKgB,QAAU,CACXC,SAAU,WACVC,OAAQ,cACRC,YAAa,SAErB,CAOA,iBAAOC,CAAWC,SACd,IAAK,MAAOC,OAAQC,qBAAsBnD,OAAOoD,QAAQH,SAAU,CAC/D,GAAiC,mBAAtBE,mBAAiE,iBAAtBA,kBAClD,MAAM,IAAIE,MAAM,GAAGH,uDAEvBpC,gBAAgBoC,QAAUC,iBAC9B,CACJ,CAQAG,UAAAA,CAAWC,OAEP3B,KAAK4B,iBACD5B,KAAK6B,QACL,QACA7B,KAAK8B,gBAGT9B,KAAK+B,kBAAkB,CAACJ,cAExB3B,KAAK4B,iBACD5B,KAAK6B,QACL/D,aAAakE,kBACb,IAAMhC,KAAK+B,kBAAkB,CAACJ,eAEtC,CAOAM,WAAAA,GACI,MAAO,CAEH,CAACC,MAAO,6BAA8BC,QAASnC,KAAK+B,mBAE5D,CAEAD,cAAAA,CAAeM,OACX,MAAMC,OAASD,MAAMC,OAAOC,QAAQtC,KAAKE,UAAUC,YACnD,IAAKkC,OACD,OAEJ,GAAIA,OAAOE,UAAUC,SAASxC,KAAKgB,QAAQC,UAEvC,YADAmB,MAAMK,iBAKV,MAAMC,WAAaL,OAAOM,QAAQrB,OAC5BsB,WAAa5C,KAAK6C,kBAAkBH,YAE1C,QAAyBI,IAArB9C,KAAK4C,YAMT,YAAoCE,IAAhC5D,gBAAgBwD,YAC2B,mBAAhCxD,gBAAgBwD,iBACvBxD,gBAAgBwD,YAAYL,OAAQD,YAGxCpC,KAAK+C,uBAAuBV,OAAQD,MAAOlD,gBAAgBwD,kBAL/D,EALI1C,KAAK4C,YAAYP,OAAQD,MAajC,CAEAS,iBAAAA,CAAkB5C,MAEd,MAAO,WADaA,KAAK+C,OAAO,GAAGC,cAAgBhD,KAAKiD,MAAM,IAElE,CAQAnB,iBAAAA,CAAiBoB,MAAU,IAATxB,MAACA,OAAMwB,KAErBnD,KAAKoD,qBAAqBzB,MAAM0B,OAAOC,YAAYC,OAAS5B,MAAM0B,OAAOG,YAC7E,CAWAC,aAAAA,CAAcpB,QAAQ,IAAAqB,gBAAAC,iBAClB,IAAIC,IAAM,GACNvB,sBAAMqB,gBAANrB,OAAQM,eAAO,IAAAe,iBAAfA,gBAAiBG,IACjBD,IAAIE,KAAKzB,OAAOM,QAAQkB,IAE5B,MAAME,SAAW1B,cAAesB,QAATA,iBAANtB,OAAQM,eAARgB,IAAeA,wBAAfA,iBAAiBK,KAClC,IAAKD,SACD,OAAOH,IAEX,MAAMI,KAAOhE,KAAKiE,SAASjG,IAAI,QAI/B,OAHIgG,KAAKE,SAAWF,KAAKG,eAAiBJ,WACtCH,IAAM,IAAIA,OAAQI,KAAKI,YAEpBR,GACX,CAQA,yBAAMS,CAAoBhC,OAAQD,OAE9B,MAAMkC,WAAatE,KAAKyD,cAAcpB,QACtC,GAAyB,GAArBiC,WAAWf,OACX,OAGJnB,MAAMK,iBAEN,MAAM8B,kBAAoB,IAAIC,SAAOhH,QAAC,gDAGhCiH,UAAYzE,KAAK0E,6BAA6BrC,QAI9CsC,KADW3E,KAAKiE,SAASW,cACTvB,OAAOrD,KAAKiE,SAAStC,OAC3C,IAAIkD,UAAY,KAGZC,YAAc,KACO,GAArBR,WAAWf,QACXuB,YAAc9E,KAAKiE,SAASjG,IAAI,UAAWsG,WAAW,IACtDK,KAAKI,UAAYD,YAAYjB,GAC7Bc,KAAKK,aAAeF,YAAYG,MAChCN,KAAKO,kBAAoBlF,KAAKiE,SAASkB,gBAAgB,mBAAoBR,KAAKK,cAChFH,UAAY7E,KAAKiE,SAASkB,gBAAgB,uBAE1CR,KAAKO,kBAAoBlF,KAAKiE,SAASkB,gBAAgB,oBAAqBb,WAAWf,QACvFsB,UAAY7E,KAAKiE,SAASkB,gBAAgB,uBAM9C,MAAMC,YAAcpF,KAAKqF,0BAA0BC,eAAO,CACtDL,MAAOJ,UACPU,KAAMC,WAAShI,QAACiI,OAAO,8CAA+Cd,QAGpEe,WAAY,EAAAC,WAAQA,UAACP,MAAMQ,WAGjCtB,WAAWuB,SAAQC,YACf,MAAMC,eAAiBL,UAAUM,cAAc,GAAGhG,KAAKE,UAAUE,wBAAwB0F,eACzF9F,KAAKiG,aAAaF,eAAe,IAIrC,IAAIG,aAAW1I,QACXkI,UAAUM,cAAchG,KAAKE,UAAUO,aACvC,CACI0F,QAASnG,KAAKE,UAAUI,YACxB8F,QAASpG,KAAKE,UAAUK,aACxB8F,SAAUrG,KAAKE,UAAUK,eAE7B,GAIJmF,UAAU9D,iBAAiB,SAAUQ,QACjC,MAAMC,OAASD,MAAMC,OAChBA,OAAOiE,QAAQ,MAA8B,WAAtBjE,OAAOM,QAAQ4D,UAA0CzD,IAAtBT,OAAOM,QAAQkB,KAG1ExB,OAAOmE,aAAa,mBAGxBpE,MAAMK,iBACNzC,KAAKiE,SAASwC,SAAS,mBAAoBnC,WAAYjC,OAAOM,QAAQkB,IACtE7D,KAAK0G,cAActB,MAAOX,YAAU,IAGxCF,kBAAkBoC,SACtB,CAQA,oBAAMC,CAAevE,OAAQD,OAEzB,MAAMyE,MAAQ7G,KAAKyD,cAAcpB,QACjC,GAAoB,GAAhBwE,MAAMtD,OACN,OAGJnB,MAAMK,iBAEN,MAAM8B,kBAAoB,IAAIC,SAAOhH,QAAC,2CAGhCiH,UAAYzE,KAAK0E,6BAA6BrC,QAG9CyE,SAAW9G,KAAKiE,SAASW,cACzBD,KAAOmC,SAASzD,OAAOrD,KAAKiE,SAAStC,OAE3C,IAAIkD,UAAY,KAChB,GAAoB,GAAhBgC,MAAMtD,OAAa,CACnB,MAAMwD,OAAS/G,KAAKiE,SAASjG,IAAI,KAAM6I,MAAM,IAC7ClC,KAAKqC,KAAOD,OAAOlD,GACnBc,KAAKsC,OAASF,OAAO9G,KACrB0E,KAAKO,kBAAoBlF,KAAKiE,SAASkB,gBAAgB,cAAeR,KAAKsC,QAEvEpC,UADAkC,OAAOG,oBACKlH,KAAKiE,SAASkB,gBAAgB,0BAE9BnF,KAAKiE,SAASkB,gBAAgB,eAElD,MACIR,KAAKO,kBAAoBlF,KAAKiE,SAASkB,gBAAgB,eAAgB0B,MAAMtD,QAC7EsB,UAAY7E,KAAKiE,SAASkB,gBAAgB,iBAK9C,MAAMC,YAAcpF,KAAKqF,0BAA0BC,eAAO,CACtDL,MAAOJ,UACPU,KAAMC,WAAShI,QAACiI,OAAO,yCAA0Cd,QAG/De,WAAY,EAAAC,WAAQA,UAACP,MAAMQ,WAGjCiB,MAAMhB,SAAQsB,OACV,MAAMpB,eAAiBL,UAAUM,cAAc,GAAGhG,KAAKE,UAAUG,mBAAmB8G,UACpFnH,KAAKiG,aAAaF,eAAe,IAIrC,IAAIG,aAAW1I,QACXkI,UAAUM,cAAchG,KAAKE,UAAUO,aACvC,CACI0F,QAASnG,KAAKE,UAAUI,YACxB8F,QAASpG,KAAKE,UAAUK,aACxB8F,SAAUrG,KAAKE,UAAUK,aACzB6G,MAAOpH,KAAKE,UAAUE,cAM9ByG,MAAMhB,SAAQsB,OACV,MAAMJ,OAAS/G,KAAKiE,SAASjG,IAAI,KAAMmJ,MACvC,IAAIE,SAIAA,SAHCN,OAAOG,oBAGG,GAAGlH,KAAKE,UAAUE,wBAAwB2G,OAAOhC,cAFjD,GAAG/E,KAAKE,UAAUG,mBAAmB8G,SAIpD,MAAMpB,eAAiBL,UAAUM,cAAcqB,UAC/CrH,KAAKsH,iCAAiC5B,UAAWK,eAAe,IAGpEL,UAAU9D,iBAAiB,SAAUQ,QACjC,MAAMC,OAASD,MAAMC,OACrB,IAAKA,OAAOiE,QAAQ,WAA+BxD,IAAvBT,OAAOM,QAAQ4D,UAA2CzD,IAAtBT,OAAOM,QAAQkB,GAC3E,OAEJ,GAAIxB,OAAOmE,aAAa,iBACpB,OAIJ,IAAIe,gBACAC,WAHJpF,MAAMK,iBAIN,IAAIgF,aAAe,IAAIZ,OACvB,GAA0B,MAAtBxE,OAAOM,QAAQ4D,IAAa,CAC5B,MAAMmB,SAAWZ,SAASa,gBAAgB3H,KAAKiE,SAAStC,MAAOU,OAAOM,QAAQkB,IAC9E0D,gBAAkBG,SAAS3C,UAC3ByC,WAAaE,SAASE,QAC1B,KAAO,CACH,MAAMC,QAAU7H,KAAKiE,SAASjG,IAAI,UAAWqE,OAAOM,QAAQkB,IAC5D0D,gBAAkBlF,OAAOM,QAAQkB,GACjC2D,WAAaK,mBAAO,EAAPA,QAASC,OAAO,EACjC,CACgB9H,KAAKiE,SAASjG,IAAI,UAAWuJ,iBACjCQ,YAGRN,aAAeA,aAAaO,QAAOb,OAChBnH,KAAKiE,SAASjG,IAAI,KAAMmJ,MACxBD,uBAGK,IAAxBO,aAAalE,SAGjBvD,KAAKiE,SAASwC,SAAS,SAAUgB,aAAcF,gBAAiBC,YAChExH,KAAK0G,cAActB,MAAOX,WAAU,IAGxCF,kBAAkBoC,SACtB,CAYAW,gCAAAA,CAAiC5B,UAAW7D,SACxC,MAAMoG,YAAcpG,QAAQS,QAAQtC,KAAKE,UAAUI,aACnD,IAAK2H,YACD,OAGJ,MAAMC,SAAU,EAAAC,QAAAA,SAAOF,aAAaG,KAAKpI,KAAKE,UAAUK,cACxD,IAAI8H,cAAgBH,QAAQvD,KAAK,WAAauD,QAAQI,KAAK,QAC3D,GAAID,cAAe,CAEfA,cAAgBA,cAAcE,QAAQ,IAAK,IAC3C,MAAMC,WAAa9C,UAAUM,cAAc,IAAIqC,kBAC/C,EAAAF,QAAAA,SAAOK,YAAYC,SAAS,OAChC,CAGAzI,KAAKsH,iCAAiC5B,UAAWuC,YAAYS,cACjE,CAQA,wBAAMC,CAAmBtG,OAAQD,OAC7BA,MAAMK,iBACNzC,KAAKiE,SAASwC,SAAS,aAAcpE,OAAOM,QAAQkB,IAAM,EAC9D,CAQA,uBAAM+E,CAAkBvG,OAAQD,OAC5BA,MAAMK,iBACNzC,KAAKiE,SAASwC,SAAS,YAAapE,OAAOM,QAAQkG,QAASxG,OAAOM,QAAQmG,WAAYzG,OAAOM,QAAQoG,UAC1G,CAQA,2BAAMC,CAAsB3G,OAAQD,OAChC,MAAMkC,WAAatE,KAAKyD,cAAcpB,QACtC,GAAyB,GAArBiC,WAAWf,OACX,OAWJ,GARAnB,MAAMK,kBAGkB6B,WAAW2E,MAAKnD,YACpC,MAAMhB,YAAc9E,KAAKiE,SAASjG,IAAI,UAAW8H,WAEjD,OADehB,YAAYgD,QAAU,IACtBvE,QAAUuB,YAAYoE,YAAcpE,YAAYqE,QAAQ,IAIvE,YADAnJ,KAAKoJ,uBAAuB9E,WAAYjC,QAI5C,IAAIgH,SAAW,KACXxE,UAAY,KAChB,GAAyB,GAArBP,WAAWf,OAAa,CACxBsB,UAAY7E,KAAKiE,SAASkB,gBAAgB,uBAC1C,MAAML,YAAc9E,KAAKiE,SAASjG,IAAI,UAAWsG,WAAW,IAC5D+E,SAAWrJ,KAAKiE,SAASkB,gBAAgB,qBAAsB,CAAClF,KAAM6E,YAAYG,OACtF,MACIJ,UAAY7E,KAAKiE,SAASkB,gBAAgB,wBAC1CkE,SAAWrJ,KAAKiE,SAASkB,gBAAgB,sBAAuB,CAACmE,MAAOhF,WAAWf,SAGvF,MAAM6B,YAAcpF,KAAKqF,0BAA0BkE,6BAAmB,CAClEtE,MAAOJ,UACPU,KAAM8D,WAGVjE,MAAMoE,UAAUC,GACZC,cAAAA,QAAYC,QACZzM,IAEIA,EAAEuF,iBACF2C,MAAMwE,UACN5J,KAAKoJ,uBAAuB9E,WAAYjC,OAAO,GAG3D,CAQA,4BAAM+G,CAAuB9E,WAAYjC,cAC/BrC,KAAKiE,SAASwC,SAAS,gBAAiBnC,YAC1CjC,OAAOwH,QAAQC,SAAS,iBAExBC,OAAOC,SAASC,KAAOjK,KAAKiE,SAASjG,IAAI,UAAUkM,QAE3D,CAQA,+BAAMC,CAA0B9H,OAAQD,QACpC,EAAAgI,eAAAA,2BAA0BpK,KAAKiE,SAAU5B,OAAQD,MAAO,KAC5D,CAQA,oCAAMiI,CAA+BhI,OAAQD,QACzC,EAAAgI,eAAAA,2BAA0BpK,KAAKiE,SAAU5B,OAAQD,MAAO,UAC5D,CASA,4BAAMW,CAAuBV,OAAQD,MAAOkI,eACnCjI,OAAOM,QAAQkB,IAA6B,eAAvBxB,OAAOM,QAAQ4D,OAGzCnE,MAAMK,iBACqB,eAAvBJ,OAAOM,QAAQ4D,IAEfvG,KAAKiE,SAASwC,SAAS6D,aAActK,KAAKiE,SAASjG,IAAI,QAAQoG,WAE/DpE,KAAKiE,SAASwC,SAAS6D,aAAc,CAACjI,OAAOM,QAAQkB,KAE7D,CAQA,yBAAM0G,CAAoBlI,OAAQD,OAC9B,MAAMyE,MAAQ7G,KAAKyD,cAAcpB,QACjC,GAAoB,GAAhBwE,MAAMtD,OACN,OAEJ,MAAMuC,UAAYzD,OAAOM,QAAQoC,WAAa,KAC9C3C,MAAMK,iBACNzC,KAAKiE,SAASwC,SAAS,cAAeI,MAAOf,UACjD,CAQA,sBAAM0E,CAAiBnI,OAAQD,OAC3B,MAAMyE,MAAQ7G,KAAKyD,cAAcpB,QACjC,GAAoB,GAAhBwE,MAAMtD,OACN,OAGJnB,MAAMK,iBAEN,IAAI4G,SAAW,KACXxE,UAAY,KACZ4F,iBAAmB,KACvB,GAAoB,GAAhB5D,MAAMtD,OAAa,CACnB,MAAMwD,OAAS/G,KAAKiE,SAASjG,IAAI,KAAM6I,MAAM,IACzCE,OAAOG,qBACPuD,iBAAmB1D,OAAO2D,kBAC1B7F,UAAY7E,KAAKiE,SAASkB,gBAAgB,4BAC1CkE,UAAW,EAAAsB,KAAAA,WACP,qBACA,oBACA,CACIC,KAAM7D,OAAO8B,QACb5I,KAAM8G,OAAO9G,SAIrB4E,UAAY7E,KAAKiE,SAASkB,gBAAgB,kBAC1CkE,UAAW,EAAAsB,KAAAA,WACP,gBACA,oBACA,CACIC,KAAM7D,OAAO8B,QACb5I,KAAM8G,OAAO9G,OAI7B,MACI4E,WAAY,EAAA8F,KAAAA,WAAU,kBAAmB,qBACzCtB,UAAW,EAAAsB,KAAAA,WACP,iBACA,oBACA,CAACrB,MAAOzC,MAAMtD,SAItB,MAAM6B,YAAcpF,KAAKqF,0BAA0BkE,6BAAmB,CAClEtE,MAAOJ,UACPU,KAAM8D,WAGVjE,MAAMoE,UAAUC,GACZC,cAAAA,QAAYC,QACZzM,IAKI,GAHAA,EAAEuF,iBACF2C,MAAMwE,UACN5J,KAAKiE,SAASwC,SAAS,WAAYI,OACf,GAAhBA,MAAMtD,QAAekH,kBAAoBpI,OAAOwH,QAAQC,SAAS,eAAgB,CAEjF,IAAIe,WAAa,IAAIC,gBAAgBf,OAAOC,SAASe,QACjDF,WAAW9M,IAAI,OAAS8M,WAAW7M,IAAI,OAASyM,kBAChDzK,KAAKoJ,uBAAuB,CAACqB,kBAAmBpI,OAExD,IAGZ,CAOA,4BAAM2I,CAAuB3I,QACzB,MAAMwE,MAAQ7G,KAAKyD,cAAcpB,QACjC,GAAoB,GAAhBwE,MAAMtD,OACN,OAGJ,MACMoB,KAAO,CACTsG,aAFajL,KAAKiE,SAASW,cAEJsG,cAAclL,KAAKiE,SAAStC,MAAOkF,QAExDzB,YAAcpF,KAAKqF,0BAA0B8F,2BAAiB,CAChElG,OAAO,EAAA0F,KAAAA,WAAU,eAAgB,QACjCpF,KAAMC,mBAAUC,OAAO,uDAAwDd,MAC/EyG,gBAAgB,EAAAT,KAAAA,WAAU,QAAS,UAGvC3K,KAAKqL,+BAA+BjG,MAAOyB,MAC/C,CAOA,iCAAMyE,CAA4BjJ,QAC9B,MAAMiC,WAAatE,KAAKyD,cAAcpB,QACtC,GAAyB,GAArBiC,WAAWf,OACX,OAEJ,MAAM0B,MAA8B,GAArBX,WAAWf,OAAe,4BAA8B,6BAEjE6B,YAAcpF,KAAKqF,0BAA0B8F,2BAAiB,CAChElG,MAAOjF,KAAKiE,SAASkB,gBAAgBF,OACrCM,KAAMC,mBAAUC,OAAO,4DAA6D,IACpF2F,gBAAgB,EAAAT,KAAAA,WAAU,QAAS,UAGvC3K,KAAKqL,+BAA+BjG,MAAOd,WAC/C,CAOA+G,8BAAAA,CAA+BjG,MAAOxB,KAElCwB,MAAMmG,kBAAkB,QAAQ,GAEhC,MAAMC,eAAkBC,QACpB,MAAMC,SAAWD,iBAAAA,EAAAA,MAAOE,MACxB,QAAKD,WAGL1L,KAAKiE,SAASwC,SAASiF,SAAU9H,MAC1B,EAAI,EAGT8B,WAAY,EAAAC,WAAQA,UAACP,MAAMQ,WACZF,UAAUkG,iBAAiB5L,KAAKE,UAAUU,cAClDiF,SAAQ4F,QACjBA,MAAM7J,iBAAiB,UAAU,KAC7BwD,MAAMmG,kBAAkB,QAAQ,EAAM,IAE1CE,MAAMI,WAAWjK,iBAAiB,SAAS,KACvC6J,MAAMK,SAAU,EAChB1G,MAAMmG,kBAAkB,QAAQ,EAAM,IAE1CE,MAAMI,WAAWjK,iBAAiB,YAAYmK,eACtCP,eAAeC,SACfM,aAAatJ,iBACb2C,MAAMwE,UACV,GACF,IAGNxE,MAAMoE,UAAUC,GACZC,cAAWlM,QAACwO,MACZ,KACI,MAAMP,MAAQ/F,UAAUM,cAAc,GAAGhG,KAAKE,UAAUU,wBACxD4K,eAAeC,MAAM,GAGjC,CAOArI,oBAAAA,CAAqB6I,QACDjM,KAAKkM,YAAYlM,KAAKE,UAAUa,kBACxC8E,SAAQhE,UACZA,QAAQU,UAAU4J,OAAOnM,KAAKgB,QAAQC,SAAUgL,QAChD,MAAMG,kBAAoBvK,QAAQmE,cAAchG,KAAKE,UAAUM,YAC/D4L,kBAAkB7J,UAAU4J,OAAOnM,KAAKgB,QAAQC,SAAUgL,QAC1DjM,KAAKqM,iBAAiBD,kBAAmBH,QAErCA,SACA,EAAAtB,KAAAA,WAAU,gBAAiB,qBACtB2B,MAAMC,MAASH,kBAAkBI,aAAa,QAASD,QACvDE,MAAMC,cAAAA,QAAaC,WACxBP,kBAAkBQ,MAAMC,cAAgB,KACxCT,kBAAkBQ,MAAME,WAAa,MAErCV,kBAAkBI,aAAa,QAASJ,kBAAkBzJ,QAAQoK,YACtE,IAEJ,MAAMC,iBAAmBhN,KAAKiN,WAAWjN,KAAKE,UAAUW,kBACxD,GAAImM,iBAAkB,CACCA,iBAAiBhH,cAAchG,KAAKE,UAAUM,YACtD+B,UAAU4J,OAAOnM,KAAKgB,QAAQG,YAAa8K,QAC/Be,iBAAiBhH,cAAchG,KAAKE,UAAUY,oBACtDyB,UAAU4J,OAAOnM,KAAKgB,QAAQG,aAAc8K,OAC/D,CACJ,CAOAhG,YAAAA,CAAapE,SACLA,UACAA,QAAQ+K,MAAMC,cAAgB,OAC9BhL,QAAQ+K,MAAME,WAAa,OAC3BjL,QAAQU,UAAU2K,IAAIlN,KAAKgB,QAAQC,UACnCY,QAAQU,UAAU2K,IAAIlN,KAAKgB,QAAQE,QACnCW,QAAQ2K,aAAa,iBAAiB,GACtC3K,QAAQD,iBAAiB,SAASQ,OAASA,MAAMK,mBAEzD,CASA4C,yBAAAA,CAA0B8H,WAAYC,aAClC,OAAO,IAAIC,SAAQ,CAAC1G,QAAS2G,UACzBH,WAAWpN,OAAOqN,aAAad,MAAMlH,QACjCA,MAAMmI,kBAAiB,GAEvBnI,MAAMoE,UAAUC,GAAGC,cAAWlM,QAACgQ,cAAc,KACzC7G,QAAQvB,MAAM,SAGiBtC,IAA/BsK,YAAYhC,gBACZhG,MAAMqI,kBAAkBL,YAAYhC,qBAEHtI,IAAjCsK,YAAYM,kBACZtI,MAAMuI,oBAAoBP,YAAYhC,gBAE1ChG,MAAMwI,MACN,IACDnB,OAAM,KACLa,OAAO,4BAA4B,GACrC,GAEV,CAUA5G,aAAAA,CAActB,MAAOvD,SACjBuD,MAAMyI,OACN,MAAMC,eAAiB,IAAItJ,SAAOhH,QAAC,qCAC/BqE,SACAA,QAAQkM,QAEZC,YAAW,KACP5I,MAAMwE,UACNkE,eAAenH,SAAS,GACzB,IACP,CAQAjC,4BAAAA,CAA6B7C,SACzB,MAAMoM,WAAapM,QAAQS,QAAQtC,KAAKE,UAAUQ,YAClD,GAAKuN,WAGL,OAAOA,WAAWjI,cAAchG,KAAKE,UAAUS,kBACnD,EACH,OAAAuN,SAAA1Q,QAAAqC,SAAAqO,SAAA1Q,OAAA"}