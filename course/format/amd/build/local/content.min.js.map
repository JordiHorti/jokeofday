{"version":3,"file":"content.min.js","sources":["../../src/local/content.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course index main component.\n *\n * @module     core_courseformat/local/content\n * @class      core_courseformat/local/content\n * @copyright  2020 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {BaseComponent} from 'core/reactive';\nimport {debounce} from 'core/utils';\nimport {getCurrentCourseEditor} from 'core_courseformat/courseeditor';\nimport Config from 'core/config';\nimport inplaceeditable from 'core/inplace_editable';\nimport Section from 'core_courseformat/local/content/section';\nimport CmItem from 'core_courseformat/local/content/section/cmitem';\nimport Fragment from 'core/fragment';\nimport Templates from 'core/templates';\nimport DispatchActions from 'core_courseformat/local/content/actions';\nimport * as CourseEvents from 'core_course/events';\n// The jQuery module is only used for interacting with Boostrap 4. It can we removed when MDL-71979 is integrated.\nimport jQuery from 'jquery';\nimport Pending from 'core/pending';\n\nexport default class Component extends BaseComponent {\n\n    /**\n     * Constructor hook.\n     *\n     * @param {Object} descriptor the component descriptor\n     */\n    create(descriptor) {\n        // Optional component name for debugging.\n        this.name = 'course_format';\n        // Default query selectors.\n        this.selectors = {\n            SECTION: `[data-for='section']`,\n            SECTION_ITEM: `[data-for='section_title']`,\n            SECTION_CMLIST: `[data-for='cmlist']`,\n            COURSE_SECTIONLIST: `[data-for='course_sectionlist']`,\n            CM: `[data-for='cmitem']`,\n            TOGGLER: `[data-action=\"togglecoursecontentsection\"]`,\n            COLLAPSE: `[data-toggle=\"collapse\"]`,\n            TOGGLEALL: `[data-toggle=\"toggleall\"]`,\n            // Formats can override the activity tag but a default one is needed to create new elements.\n            ACTIVITYTAG: 'li',\n            SECTIONTAG: 'li',\n        };\n        this.selectorGenerators = {\n            cmNameFor: (id) => `[data-cm-name-for='${id}']`,\n            sectionNameFor: (id) => `[data-section-name-for='${id}']`,\n        };\n        // Default classes to toggle on refresh.\n        this.classes = {\n            COLLAPSED: `collapsed`,\n            // Course content classes.\n            ACTIVITY: `activity`,\n            STATEDREADY: `stateready`,\n            SECTION: `section`,\n        };\n        // Array to save dettached elements during element resorting.\n        this.dettachedCms = {};\n        this.dettachedSections = {};\n        // Index of sections and cms components.\n        this.sections = {};\n        this.cms = {};\n        // The page section return.\n        this.sectionReturn = descriptor.sectionReturn ?? null;\n        this.debouncedReloads = new Map();\n    }\n\n    /**\n     * Static method to create a component instance form the mustahce template.\n     *\n     * @param {string} target the DOM main element or its ID\n     * @param {object} selectors optional css selector overrides\n     * @param {number} sectionReturn the content section return\n     * @return {Component}\n     */\n    static init(target, selectors, sectionReturn) {\n        return new Component({\n            element: document.getElementById(target),\n            reactive: getCurrentCourseEditor(),\n            selectors,\n            sectionReturn,\n        });\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     * @param {Object} state the state data\n     */\n    stateReady(state) {\n        this._indexContents();\n        // Activate section togglers.\n        this.addEventListener(this.element, 'click', this._sectionTogglers);\n\n        // Collapse/Expand all sections button.\n        const toogleAll = this.getElement(this.selectors.TOGGLEALL);\n        if (toogleAll) {\n\n            // Ensure collapse menu button adds aria-controls attribute referring to each collapsible element.\n            const collapseElements = this.getElements(this.selectors.COLLAPSE);\n            const collapseElementIds = [...collapseElements].map(element => element.id);\n            toogleAll.setAttribute('aria-controls', collapseElementIds.join(' '));\n\n            this.addEventListener(toogleAll, 'click', this._allSectionToggler);\n            this.addEventListener(toogleAll, 'keydown', e => {\n                // Collapse/expand all sections when Space key is pressed on the toggle button.\n                if (e.key === ' ') {\n                    this._allSectionToggler(e);\n                }\n            });\n            this._refreshAllSectionsToggler(state);\n        }\n\n        if (this.reactive.supportComponents) {\n            // Actions are only available in edit mode.\n            if (this.reactive.isEditing) {\n                new DispatchActions(this);\n            }\n\n            // Mark content as state ready.\n            this.element.classList.add(this.classes.STATEDREADY);\n        }\n\n        // Capture completion events.\n        this.addEventListener(\n            this.element,\n            CourseEvents.manualCompletionToggled,\n            this._completionHandler\n        );\n\n        // Capture page scroll to update page item.\n        this.addEventListener(\n            document,\n            \"scroll\",\n            this._scrollHandler\n        );\n    }\n\n    /**\n     * Setup sections toggler.\n     *\n     * Toggler click is delegated to the main course content element because new sections can\n     * appear at any moment and this way we prevent accidental double bindings.\n     *\n     * @param {Event} event the triggered event\n     */\n    _sectionTogglers(event) {\n        const sectionlink = event.target.closest(this.selectors.TOGGLER);\n        const closestCollapse = event.target.closest(this.selectors.COLLAPSE);\n        // Assume that chevron is the only collapse toggler in a section heading;\n        // I think this is the most efficient way to verify at the moment.\n        const isChevron = closestCollapse?.closest(this.selectors.SECTION_ITEM);\n\n        if (sectionlink || isChevron) {\n\n            const section = event.target.closest(this.selectors.SECTION);\n            const toggler = section.querySelector(this.selectors.COLLAPSE);\n            const isCollapsed = toggler?.classList.contains(this.classes.COLLAPSED) ?? false;\n\n            const sectionId = section.getAttribute('data-id');\n            this.reactive.dispatch(\n                'sectionContentCollapsed',\n                [sectionId],\n                !isCollapsed,\n            );\n        }\n    }\n\n    /**\n     * Handle the collapse/expand all sections button.\n     *\n     * Toggler click is delegated to the main course content element because new sections can\n     * appear at any moment and this way we prevent accidental double bindings.\n     *\n     * @param {Event} event the triggered event\n     */\n    _allSectionToggler(event) {\n        event.preventDefault();\n\n        const target = event.target.closest(this.selectors.TOGGLEALL);\n        const isAllCollapsed = target.classList.contains(this.classes.COLLAPSED);\n\n        const course = this.reactive.get('course');\n        this.reactive.dispatch(\n            'sectionContentCollapsed',\n            course.sectionlist ?? [],\n            !isAllCollapsed\n        );\n    }\n\n    /**\n     * Return the component watchers.\n     *\n     * @returns {Array} of watchers\n     */\n    getWatchers() {\n        // Section return is a global page variable but most formats define it just before start printing\n        // the course content. This is the reason why we define this page setting here.\n        this.reactive.sectionReturn = this.sectionReturn;\n\n        // Check if the course format is compatible with reactive components.\n        if (!this.reactive.supportComponents) {\n            return [];\n        }\n        return [\n            // State changes that require to reload some course modules.\n            {watch: `cm.visible:updated`, handler: this._reloadCm},\n            {watch: `cm.stealth:updated`, handler: this._reloadCm},\n            {watch: `cm.sectionid:updated`, handler: this._reloadCm},\n            {watch: `cm.indent:updated`, handler: this._reloadCm},\n            {watch: `cm.groupmode:updated`, handler: this._reloadCm},\n            {watch: `cm.name:updated`, handler: this._refreshCmName},\n            // Update section number and title.\n            {watch: `section.number:updated`, handler: this._refreshSectionNumber},\n            {watch: `section.title:updated`, handler: this._refreshSectionTitle},\n            // Collapse and expand sections.\n            {watch: `section.contentcollapsed:updated`, handler: this._refreshSectionCollapsed},\n            // Sections and cm sorting.\n            {watch: `transaction:start`, handler: this._startProcessing},\n            {watch: `course.sectionlist:updated`, handler: this._refreshCourseSectionlist},\n            {watch: `section.cmlist:updated`, handler: this._refreshSectionCmlist},\n            // Section visibility.\n            {watch: `section.visible:updated`, handler: this._reloadSection},\n            // Reindex sections and cms.\n            {watch: `state:updated`, handler: this._indexContents},\n        ];\n    }\n\n    /**\n     * Update a course module name on the whole page.\n     *\n     * @param {object} param\n     * @param {Object} param.element details the update details.\n     */\n    _refreshCmName({element}) {\n        // Update classes.\n        // Replace the text content of the cm name.\n        const allCmNamesFor = this.getElements(\n            this.selectorGenerators.cmNameFor(element.id)\n        );\n        allCmNamesFor.forEach((cmNameFor) => {\n            cmNameFor.textContent = element.name;\n        });\n    }\n\n    /**\n     * Update section collapsed state via bootstrap 4 if necessary.\n     *\n     * Formats that do not use bootstrap 4 must override this method in order to keep the section\n     * toggling working.\n     *\n     * @param {object} args\n     * @param {Object} args.state The state data\n     * @param {Object} args.element The element to update\n     */\n    _refreshSectionCollapsed({state, element}) {\n        const target = this.getElement(this.selectors.SECTION, element.id);\n        if (!target) {\n            throw new Error(`Unknown section with ID ${element.id}`);\n        }\n        // Check if it is already done.\n        const toggler = target.querySelector(this.selectors.COLLAPSE);\n        const isCollapsed = toggler?.classList.contains(this.classes.COLLAPSED) ?? false;\n\n        if (element.contentcollapsed !== isCollapsed) {\n            let collapsibleId = toggler.dataset.target ?? toggler.getAttribute(\"href\");\n            if (!collapsibleId) {\n                return;\n            }\n            collapsibleId = collapsibleId.replace('#', '');\n            const collapsible = document.getElementById(collapsibleId);\n            if (!collapsible) {\n                return;\n            }\n\n            // Course index is based on Bootstrap 4 collapsibles. To collapse them we need jQuery to\n            // interact with collapsibles methods. Hopefully, this will change in Bootstrap 5 because\n            // it does not require jQuery anymore (when MDL-71979 is integrated).\n            jQuery(collapsible).collapse(element.contentcollapsed ? 'hide' : 'show');\n        }\n\n        this._refreshAllSectionsToggler(state);\n    }\n\n    /**\n     * Refresh the collapse/expand all sections element.\n     *\n     * @param {Object} state The state data\n     */\n    _refreshAllSectionsToggler(state) {\n        const target = this.getElement(this.selectors.TOGGLEALL);\n        if (!target) {\n            return;\n        }\n        // Check if we have all sections collapsed/expanded.\n        let allcollapsed = true;\n        let allexpanded = true;\n        state.section.forEach(\n            section => {\n                allcollapsed = allcollapsed && section.contentcollapsed;\n                allexpanded = allexpanded && !section.contentcollapsed;\n            }\n        );\n        if (allcollapsed) {\n            target.classList.add(this.classes.COLLAPSED);\n            target.setAttribute('aria-expanded', false);\n        }\n        if (allexpanded) {\n            target.classList.remove(this.classes.COLLAPSED);\n            target.setAttribute('aria-expanded', true);\n        }\n    }\n\n    /**\n     * Setup the component to start a transaction.\n     *\n     * Some of the course actions replaces the current DOM element with a new one before updating the\n     * course state. This means the component cannot preload any index properly until the transaction starts.\n     *\n     */\n    _startProcessing() {\n        // During a section or cm sorting, some elements could be dettached from the DOM and we\n        // need to store somewhare in case they are needed later.\n        this.dettachedCms = {};\n        this.dettachedSections = {};\n    }\n\n    /**\n     * Activity manual completion listener.\n     *\n     * @param {Event} event the custom ecent\n     */\n    _completionHandler({detail}) {\n        if (detail === undefined) {\n            return;\n        }\n        this.reactive.dispatch('cmCompletion', [detail.cmid], detail.completed);\n    }\n\n    /**\n     * Check the current page scroll and update the active element if necessary.\n     */\n    _scrollHandler() {\n        const pageOffset = window.scrollY;\n        const items = this.reactive.getExporter().allItemsArray(this.reactive.state);\n        // Check what is the active element now.\n        let pageItem = null;\n        items.every(item => {\n            const index = (item.type === 'section') ? this.sections : this.cms;\n            if (index[item.id] === undefined) {\n                return true;\n            }\n\n            const element = index[item.id].element;\n            pageItem = item;\n            return pageOffset >= element.offsetTop;\n        });\n        if (pageItem) {\n            this.reactive.dispatch('setPageItem', pageItem.type, pageItem.id);\n        }\n    }\n\n    /**\n     * Update a course section when the section number changes.\n     *\n     * The courseActions module used for most course section tools still depends on css classes and\n     * section numbers (not id). To prevent inconsistencies when a section is moved, we need to refresh\n     * the\n     *\n     * Course formats can override the section title rendering so the frontend depends heavily on backend\n     * rendering. Luckily in edit mode we can trigger a title update using the inplace_editable module.\n     *\n     * @param {Object} param\n     * @param {Object} param.element details the update details.\n     */\n    _refreshSectionNumber({element}) {\n        // Find the element.\n        const target = this.getElement(this.selectors.SECTION, element.id);\n        if (!target) {\n            // Job done. Nothing to refresh.\n            return;\n        }\n        // Update section numbers in all data, css and YUI attributes.\n        target.id = `section-${element.number}`;\n        // YUI uses section number as section id in data-sectionid, in principle if a format use components\n        // don't need this sectionid attribute anymore, but we keep the compatibility in case some plugin\n        // use it for legacy purposes.\n        target.dataset.sectionid = element.number;\n        // The data-number is the attribute used by components to store the section number.\n        target.dataset.number = element.number;\n\n        // Update title and title inplace editable, if any.\n        const inplace = inplaceeditable.getInplaceEditable(target.querySelector(this.selectors.SECTION_ITEM));\n        if (inplace) {\n            // The course content HTML can be modified at any moment, so the function need to do some checkings\n            // to make sure the inplace editable still represents the same itemid.\n            const currentvalue = inplace.getValue();\n            const currentitemid = inplace.getItemId();\n            // Unnamed sections must be recalculated.\n            if (inplace.getValue() === '') {\n                // The value to send can be an empty value if it is a default name.\n                if (currentitemid == element.id && (currentvalue != element.rawtitle || element.rawtitle == '')) {\n                    inplace.setValue(element.rawtitle);\n                }\n            }\n        }\n    }\n\n    /**\n     * Update a course section name on the whole page.\n     *\n     * @param {object} param\n     * @param {Object} param.element details the update details.\n     */\n    _refreshSectionTitle({element}) {\n        // Replace the text content of the section name in the whole page.\n        const allSectionNamesFor = document.querySelectorAll(\n            this.selectorGenerators.sectionNameFor(element.id)\n        );\n        allSectionNamesFor.forEach((sectionNameFor) => {\n            sectionNameFor.textContent = element.title;\n        });\n    }\n\n    /**\n     * Refresh a section cm list.\n     *\n     * @param {Object} param\n     * @param {Object} param.element details the update details.\n     */\n    _refreshSectionCmlist({element}) {\n        const cmlist = element.cmlist ?? [];\n        const section = this.getElement(this.selectors.SECTION, element.id);\n        const listparent = section?.querySelector(this.selectors.SECTION_CMLIST);\n        // A method to create a fake element to be replaced when the item is ready.\n        const createCm = this._createCmItem.bind(this);\n        if (listparent) {\n            this._fixOrder(listparent, cmlist, this.selectors.CM, this.dettachedCms, createCm);\n        }\n    }\n\n    /**\n     * Refresh the section list.\n     *\n     * @param {Object} param\n     * @param {Object} param.state the full state object.\n     */\n    _refreshCourseSectionlist({state}) {\n        // If we have a section return means we only show a single section so no need to fix order.\n        if (this.reactive.sectionReturn !== null) {\n            return;\n        }\n        const sectionlist = this.reactive.getExporter().listedSectionIds(state);\n        const listparent = this.getElement(this.selectors.COURSE_SECTIONLIST);\n        // For now section cannot be created at a frontend level.\n        const createSection = this._createSectionItem.bind(this);\n        if (listparent) {\n            this._fixOrder(listparent, sectionlist, this.selectors.SECTION, this.dettachedSections, createSection);\n        }\n    }\n\n    /**\n     * Regenerate content indexes.\n     *\n     * This method is used when a legacy action refresh some content element.\n     */\n    _indexContents() {\n        // Find unindexed sections.\n        this._scanIndex(\n            this.selectors.SECTION,\n            this.sections,\n            (item) => {\n                return new Section(item);\n            }\n        );\n\n        // Find unindexed cms.\n        this._scanIndex(\n            this.selectors.CM,\n            this.cms,\n            (item) => {\n                return new CmItem(item);\n            }\n        );\n    }\n\n    /**\n     * Reindex a content (section or cm) of the course content.\n     *\n     * This method is used internally by _indexContents.\n     *\n     * @param {string} selector the DOM selector to scan\n     * @param {*} index the index attribute to update\n     * @param {*} creationhandler method to create a new indexed element\n     */\n    _scanIndex(selector, index, creationhandler) {\n        const items = this.getElements(`${selector}:not([data-indexed])`);\n        items.forEach((item) => {\n            if (!item?.dataset?.id) {\n                return;\n            }\n            // Delete previous item component.\n            if (index[item.dataset.id] !== undefined) {\n                index[item.dataset.id].unregister();\n            }\n            // Create the new component.\n            index[item.dataset.id] = creationhandler({\n                ...this,\n                element: item,\n            });\n            // Mark as indexed.\n            item.dataset.indexed = true;\n        });\n    }\n\n    /**\n     * Reload a course module contents.\n     *\n     * Most course module HTML is still strongly backend dependant.\n     * Some changes require to get a new version of the module.\n     *\n     * @param {object} param0 the watcher details\n     * @param {object} param0.element the state object\n     */\n    _reloadCm({element}) {\n        if (!this.getElement(this.selectors.CM, element.id)) {\n            return;\n        }\n        const debouncedReload = this._getDebouncedReloadCm(element.id);\n        debouncedReload();\n    }\n\n    /**\n     * Generate or get a reload CM debounced function.\n     * @param {Number} cmId\n     * @returns {Function} the debounced reload function\n     */\n    _getDebouncedReloadCm(cmId) {\n        const pendingKey = `courseformat/content:reloadCm_${cmId}`;\n        let debouncedReload = this.debouncedReloads.get(pendingKey);\n        if (debouncedReload) {\n            return debouncedReload;\n        }\n        const reload = () => {\n            const pendingReload = new Pending(pendingKey);\n            this.debouncedReloads.delete(pendingKey);\n            const cmitem = this.getElement(this.selectors.CM, cmId);\n            if (!cmitem) {\n                return pendingReload.resolve();\n            }\n            const promise = Fragment.loadFragment(\n                'core_courseformat',\n                'cmitem',\n                Config.courseContextId,\n                {\n                    id: cmId,\n                    courseid: Config.courseId,\n                    sr: this.reactive.sectionReturn ?? null,\n                }\n            );\n            promise.then((html, js) => {\n                // Other state change can reload the CM or the section before this one.\n                if (!document.contains(cmitem)) {\n                    pendingReload.resolve();\n                    return false;\n                }\n                Templates.replaceNode(cmitem, html, js);\n                this._indexContents();\n                pendingReload.resolve();\n                return true;\n            }).catch(() => {\n                pendingReload.resolve();\n            });\n            return pendingReload;\n        };\n        debouncedReload = debounce(\n            reload,\n            200,\n            {\n                cancel: true, pending: true\n            }\n        );\n        this.debouncedReloads.set(pendingKey, debouncedReload);\n        return debouncedReload;\n    }\n\n    /**\n     * Cancel the active reload CM debounced function, if any.\n     * @param {Number} cmId\n     */\n    _cancelDebouncedReloadCm(cmId) {\n        const pendingKey = `courseformat/content:reloadCm_${cmId}`;\n        const debouncedReload = this.debouncedReloads.get(pendingKey);\n        if (!debouncedReload) {\n            return;\n        }\n        debouncedReload.cancel();\n        this.debouncedReloads.delete(pendingKey);\n    }\n\n    /**\n     * Reload a course section contents.\n     *\n     * Section HTML is still strongly backend dependant.\n     * Some changes require to get a new version of the section.\n     *\n     * @param {details} param0 the watcher details\n     * @param {object} param0.element the state object\n     */\n    _reloadSection({element}) {\n        const pendingReload = new Pending(`courseformat/content:reloadSection_${element.id}`);\n        const sectionitem = this.getElement(this.selectors.SECTION, element.id);\n        if (sectionitem) {\n            // Cancel any pending reload because the section will reload cms too.\n            for (const cmId of element.cmlist) {\n                this._cancelDebouncedReloadCm(cmId);\n            }\n            const promise = Fragment.loadFragment(\n                'core_courseformat',\n                'section',\n                Config.courseContextId,\n                {\n                    id: element.id,\n                    courseid: Config.courseId,\n                    sr: this.reactive.sectionReturn ?? null,\n                }\n            );\n            promise.then((html, js) => {\n                Templates.replaceNode(sectionitem, html, js);\n                this._indexContents();\n                pendingReload.resolve();\n            }).catch(() => {\n                pendingReload.resolve();\n            });\n        }\n    }\n\n    /**\n     * Create a new course module item in a section.\n     *\n     * Thos method will append a fake item in the container and trigger an ajax request to\n     * replace the fake element by the real content.\n     *\n     * @param {Element} container the container element (section)\n     * @param {Number} cmid the course-module ID\n     * @returns {Element} the created element\n     */\n    _createCmItem(container, cmid) {\n        const newItem = document.createElement(this.selectors.ACTIVITYTAG);\n        newItem.dataset.for = 'cmitem';\n        newItem.dataset.id = cmid;\n        // The legacy actions.js requires a specific ID and class to refresh the CM.\n        newItem.id = `module-${cmid}`;\n        newItem.classList.add(this.classes.ACTIVITY);\n        container.append(newItem);\n        this._reloadCm({\n            element: this.reactive.get('cm', cmid),\n        });\n        return newItem;\n    }\n\n    /**\n     * Create a new section item.\n     *\n     * This method will append a fake item in the container and trigger an ajax request to\n     * replace the fake element by the real content.\n     *\n     * @param {Element} container the container element (section)\n     * @param {Number} sectionid the course-module ID\n     * @returns {Element} the created element\n     */\n    _createSectionItem(container, sectionid) {\n        const section = this.reactive.get('section', sectionid);\n        const newItem = document.createElement(this.selectors.SECTIONTAG);\n        newItem.dataset.for = 'section';\n        newItem.dataset.id = sectionid;\n        newItem.dataset.number = section.number;\n        // The legacy actions.js requires a specific ID and class to refresh the section.\n        newItem.id = `section-${sectionid}`;\n        newItem.classList.add(this.classes.SECTION);\n        container.append(newItem);\n        this._reloadSection({\n            element: section,\n        });\n        return newItem;\n    }\n\n    /**\n     * Fix/reorder the section or cms order.\n     *\n     * @param {Element} container the HTML element to reorder.\n     * @param {Array} neworder an array with the ids order\n     * @param {string} selector the element selector\n     * @param {Object} dettachedelements a list of dettached elements\n     * @param {function} createMethod method to create missing elements\n     */\n    async _fixOrder(container, neworder, selector, dettachedelements, createMethod) {\n        if (container === undefined) {\n            return;\n        }\n\n        // Empty lists should not be visible.\n        if (!neworder.length) {\n            container.classList.add('hidden');\n            container.innerHTML = '';\n            return;\n        }\n\n        // Grant the list is visible (in case it was empty).\n        container.classList.remove('hidden');\n\n        // Move the elements in order at the beginning of the list.\n        neworder.forEach((itemid, index) => {\n            let item = this.getElement(selector, itemid) ?? dettachedelements[itemid] ?? createMethod(container, itemid);\n            if (item === undefined) {\n                // Missing elements cannot be sorted.\n                return;\n            }\n            // Get the current elemnt at that position.\n            const currentitem = container.children[index];\n            if (currentitem === undefined) {\n                container.append(item);\n                return;\n            }\n            if (currentitem !== item) {\n                container.insertBefore(item, currentitem);\n            }\n        });\n\n        // Remove the remaining elements.\n        const orphanElements = [];\n        while (container.children.length > neworder.length) {\n            const lastchild = container.lastChild;\n            // Any orphan element is always displayed after the listed elements.\n            // Also, some third-party plugins can use a fake dndupload-preview indicator.\n            if (lastchild?.classList?.contains('dndupload-preview') || lastchild.dataset?.orphan) {\n                orphanElements.push(lastchild);\n            } else {\n                dettachedelements[lastchild?.dataset?.id ?? 0] = lastchild;\n            }\n            container.removeChild(lastchild);\n        }\n        // Restore orphan elements.\n        orphanElements.forEach((element) => {\n            container.append(element);\n        });\n    }\n}\n"],"names":["_getRequireWildcardCache","e","WeakMap","r","t","_interopRequireDefault","__esModule","default","_config","_inplace_editable","_section","_cmitem","_fragment","_templates","_actions","CourseEvents","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_interopRequireWildcard","_jquery","_pending","Component","BaseComponent","create","descriptor","this","name","selectors","SECTION","SECTION_ITEM","SECTION_CMLIST","COURSE_SECTIONLIST","CM","TOGGLER","COLLAPSE","TOGGLEALL","ACTIVITYTAG","SECTIONTAG","selectorGenerators","cmNameFor","id","sectionNameFor","classes","COLLAPSED","ACTIVITY","STATEDREADY","dettachedCms","dettachedSections","sections","cms","sectionReturn","debouncedReloads","Map","init","target","element","document","getElementById","reactive","getCurrentCourseEditor","stateReady","state","_indexContents","addEventListener","_sectionTogglers","toogleAll","getElement","collapseElementIds","getElements","map","setAttribute","join","_allSectionToggler","key","_refreshAllSectionsToggler","supportComponents","isEditing","DispatchActions","classList","add","manualCompletionToggled","_completionHandler","_scrollHandler","event","sectionlink","closest","closestCollapse","isChevron","section","toggler","querySelector","isCollapsed","contains","sectionId","getAttribute","dispatch","preventDefault","isAllCollapsed","course","sectionlist","getWatchers","watch","handler","_reloadCm","_refreshCmName","_refreshSectionNumber","_refreshSectionTitle","_refreshSectionCollapsed","_startProcessing","_refreshCourseSectionlist","_refreshSectionCmlist","_reloadSection","_ref","forEach","textContent","_ref2","Error","contentcollapsed","collapsibleId","dataset","replace","collapsible","jQuery","collapse","allcollapsed","allexpanded","remove","_ref3","detail","undefined","cmid","completed","pageOffset","window","scrollY","items","getExporter","allItemsArray","pageItem","every","item","index","type","offsetTop","_ref4","number","sectionid","inplace","inplaceeditable","getInplaceEditable","currentvalue","getValue","currentitemid","getItemId","rawtitle","setValue","_ref5","querySelectorAll","title","_ref6","cmlist","listparent","createCm","_createCmItem","bind","_fixOrder","_ref7","listedSectionIds","createSection","_createSectionItem","_scanIndex","Section","CmItem","selector","creationhandler","_item$dataset","unregister","indexed","_ref8","_getDebouncedReloadCm","debouncedReload","cmId","pendingKey","debounce","reload","pendingReload","Pending","delete","cmitem","resolve","Fragment","loadFragment","Config","courseContextId","courseid","courseId","sr","then","html","js","Templates","replaceNode","catch","cancel","pending","_cancelDebouncedReloadCm","_ref9","sectionitem","container","newItem","createElement","for","append","neworder","dettachedelements","createMethod","length","innerHTML","itemid","currentitem","children","insertBefore","orphanElements","_lastchild$classList","_lastchild$dataset","lastchild","lastChild","_lastchild$dataset2","orphan","push","removeChild","_exports"],"mappings":"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"}